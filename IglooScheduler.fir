;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-05-30 21:57:15.424, builtAtMillis: 1496181435424
circuit IglooScheduler : 
  module Memo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<9>, flip wrData : UInt<9>, flip ren : UInt<1>, flip rdAddr : UInt<9>, rdData : UInt<9>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<9>[512] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module AggregateMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<9>, flip waddr : UInt<9>, flip in : UInt<64>, out : UInt<64>, flip wen : UInt<1>, flip ren : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst Memo of Memo @[AggregateMem.scala 11:11]
    Memo.io is invalid
    Memo.clock <= clock
    Memo.reset <= reset
    inst Memo_1 of Memo_1 @[AggregateMem.scala 11:11]
    Memo_1.io is invalid
    Memo_1.clock <= clock
    Memo_1.reset <= reset
    inst Memo_2 of Memo_2 @[AggregateMem.scala 11:11]
    Memo_2.io is invalid
    Memo_2.clock <= clock
    Memo_2.reset <= reset
    inst Memo_3 of Memo_3 @[AggregateMem.scala 11:11]
    Memo_3.io is invalid
    Memo_3.clock <= clock
    Memo_3.reset <= reset
    inst Memo_4 of Memo_4 @[AggregateMem.scala 11:11]
    Memo_4.io is invalid
    Memo_4.clock <= clock
    Memo_4.reset <= reset
    inst Memo_5 of Memo_5 @[AggregateMem.scala 11:11]
    Memo_5.io is invalid
    Memo_5.clock <= clock
    Memo_5.reset <= reset
    inst Memo_6 of Memo_6 @[AggregateMem.scala 11:11]
    Memo_6.io is invalid
    Memo_6.clock <= clock
    Memo_6.reset <= reset
    inst Memo_7 of Memo_7 @[AggregateMem.scala 11:11]
    Memo_7.io is invalid
    Memo_7.clock <= clock
    Memo_7.reset <= reset
    Memo.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_1.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_1.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_1.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_1.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_2.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_2.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_2.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_2.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_3.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_3.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_3.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_3.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_4.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_4.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_4.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_4.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_5.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_5.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_5.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_5.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_6.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_6.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_6.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_6.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_7.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_7.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_7.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_7.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    node _T_9 = bits(io.in, 7, 0) @[AggregateMem.scala 40:88]
    node _T_10 = cat(UInt<1>("h00"), _T_9) @[Cat.scala 30:58]
    Memo.io.wrData <= _T_10 @[AggregateMem.scala 40:23]
    node _T_12 = bits(io.in, 15, 8) @[AggregateMem.scala 40:88]
    node _T_13 = cat(UInt<1>("h00"), _T_12) @[Cat.scala 30:58]
    Memo_1.io.wrData <= _T_13 @[AggregateMem.scala 40:23]
    node _T_15 = bits(io.in, 23, 16) @[AggregateMem.scala 40:88]
    node _T_16 = cat(UInt<1>("h00"), _T_15) @[Cat.scala 30:58]
    Memo_2.io.wrData <= _T_16 @[AggregateMem.scala 40:23]
    node _T_18 = bits(io.in, 31, 24) @[AggregateMem.scala 40:88]
    node _T_19 = cat(UInt<1>("h00"), _T_18) @[Cat.scala 30:58]
    Memo_3.io.wrData <= _T_19 @[AggregateMem.scala 40:23]
    node _T_21 = bits(io.in, 39, 32) @[AggregateMem.scala 40:88]
    node _T_22 = cat(UInt<1>("h00"), _T_21) @[Cat.scala 30:58]
    Memo_4.io.wrData <= _T_22 @[AggregateMem.scala 40:23]
    node _T_24 = bits(io.in, 47, 40) @[AggregateMem.scala 40:88]
    node _T_25 = cat(UInt<1>("h00"), _T_24) @[Cat.scala 30:58]
    Memo_5.io.wrData <= _T_25 @[AggregateMem.scala 40:23]
    node _T_27 = bits(io.in, 55, 48) @[AggregateMem.scala 40:88]
    node _T_28 = cat(UInt<1>("h00"), _T_27) @[Cat.scala 30:58]
    Memo_6.io.wrData <= _T_28 @[AggregateMem.scala 40:23]
    node _T_30 = bits(io.in, 63, 56) @[AggregateMem.scala 40:88]
    node _T_31 = cat(UInt<1>("h00"), _T_30) @[Cat.scala 30:58]
    Memo_7.io.wrData <= _T_31 @[AggregateMem.scala 40:23]
    node _T_32 = bits(Memo_7.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_33 = bits(Memo_6.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_34 = bits(Memo_5.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_35 = bits(Memo_4.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_36 = bits(Memo_3.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_37 = bits(Memo_2.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_38 = bits(Memo_1.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_39 = bits(Memo.io.rdData, 7, 0) @[AggregateMem.scala 42:64]
    node _T_40 = cat(_T_38, _T_39) @[Cat.scala 30:58]
    node _T_41 = cat(_T_36, _T_37) @[Cat.scala 30:58]
    node _T_42 = cat(_T_41, _T_40) @[Cat.scala 30:58]
    node _T_43 = cat(_T_34, _T_35) @[Cat.scala 30:58]
    node _T_44 = cat(_T_32, _T_33) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_42) @[Cat.scala 30:58]
    io.out <= _T_46 @[AggregateMem.scala 42:9]
    
  module BinaryBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip in : UInt<2>, flip fastin : UInt<64>, flip push : UInt<1>, flip fastpush : UInt<1>, out : UInt<32>, flip pop : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg wPos : UInt<7>, clock @[BinaryBuffer.scala 26:15]
    reg rPos : UInt<3>, clock @[BinaryBuffer.scala 27:15]
    reg mem : UInt<2>[128], clock @[BinaryBuffer.scala 29:14]
    node _T_144 = cat(mem[14], mem[15]) @[Cat.scala 30:58]
    node _T_145 = cat(mem[12], mem[13]) @[Cat.scala 30:58]
    node _T_146 = cat(_T_145, _T_144) @[Cat.scala 30:58]
    node _T_147 = cat(mem[10], mem[11]) @[Cat.scala 30:58]
    node _T_148 = cat(mem[8], mem[9]) @[Cat.scala 30:58]
    node _T_149 = cat(_T_148, _T_147) @[Cat.scala 30:58]
    node _T_150 = cat(_T_149, _T_146) @[Cat.scala 30:58]
    node _T_151 = cat(mem[6], mem[7]) @[Cat.scala 30:58]
    node _T_152 = cat(mem[4], mem[5]) @[Cat.scala 30:58]
    node _T_153 = cat(_T_152, _T_151) @[Cat.scala 30:58]
    node _T_154 = cat(mem[2], mem[3]) @[Cat.scala 30:58]
    node _T_155 = cat(mem[0], mem[1]) @[Cat.scala 30:58]
    node _T_156 = cat(_T_155, _T_154) @[Cat.scala 30:58]
    node _T_157 = cat(_T_156, _T_153) @[Cat.scala 30:58]
    node _T_158 = cat(_T_157, _T_150) @[Cat.scala 30:58]
    node _T_159 = cat(mem[30], mem[31]) @[Cat.scala 30:58]
    node _T_160 = cat(mem[28], mem[29]) @[Cat.scala 30:58]
    node _T_161 = cat(_T_160, _T_159) @[Cat.scala 30:58]
    node _T_162 = cat(mem[26], mem[27]) @[Cat.scala 30:58]
    node _T_163 = cat(mem[24], mem[25]) @[Cat.scala 30:58]
    node _T_164 = cat(_T_163, _T_162) @[Cat.scala 30:58]
    node _T_165 = cat(_T_164, _T_161) @[Cat.scala 30:58]
    node _T_166 = cat(mem[22], mem[23]) @[Cat.scala 30:58]
    node _T_167 = cat(mem[20], mem[21]) @[Cat.scala 30:58]
    node _T_168 = cat(_T_167, _T_166) @[Cat.scala 30:58]
    node _T_169 = cat(mem[18], mem[19]) @[Cat.scala 30:58]
    node _T_170 = cat(mem[16], mem[17]) @[Cat.scala 30:58]
    node _T_171 = cat(_T_170, _T_169) @[Cat.scala 30:58]
    node _T_172 = cat(_T_171, _T_168) @[Cat.scala 30:58]
    node _T_173 = cat(_T_172, _T_165) @[Cat.scala 30:58]
    node _T_174 = cat(mem[46], mem[47]) @[Cat.scala 30:58]
    node _T_175 = cat(mem[44], mem[45]) @[Cat.scala 30:58]
    node _T_176 = cat(_T_175, _T_174) @[Cat.scala 30:58]
    node _T_177 = cat(mem[42], mem[43]) @[Cat.scala 30:58]
    node _T_178 = cat(mem[40], mem[41]) @[Cat.scala 30:58]
    node _T_179 = cat(_T_178, _T_177) @[Cat.scala 30:58]
    node _T_180 = cat(_T_179, _T_176) @[Cat.scala 30:58]
    node _T_181 = cat(mem[38], mem[39]) @[Cat.scala 30:58]
    node _T_182 = cat(mem[36], mem[37]) @[Cat.scala 30:58]
    node _T_183 = cat(_T_182, _T_181) @[Cat.scala 30:58]
    node _T_184 = cat(mem[34], mem[35]) @[Cat.scala 30:58]
    node _T_185 = cat(mem[32], mem[33]) @[Cat.scala 30:58]
    node _T_186 = cat(_T_185, _T_184) @[Cat.scala 30:58]
    node _T_187 = cat(_T_186, _T_183) @[Cat.scala 30:58]
    node _T_188 = cat(_T_187, _T_180) @[Cat.scala 30:58]
    node _T_189 = cat(mem[62], mem[63]) @[Cat.scala 30:58]
    node _T_190 = cat(mem[60], mem[61]) @[Cat.scala 30:58]
    node _T_191 = cat(_T_190, _T_189) @[Cat.scala 30:58]
    node _T_192 = cat(mem[58], mem[59]) @[Cat.scala 30:58]
    node _T_193 = cat(mem[56], mem[57]) @[Cat.scala 30:58]
    node _T_194 = cat(_T_193, _T_192) @[Cat.scala 30:58]
    node _T_195 = cat(_T_194, _T_191) @[Cat.scala 30:58]
    node _T_196 = cat(mem[54], mem[55]) @[Cat.scala 30:58]
    node _T_197 = cat(mem[52], mem[53]) @[Cat.scala 30:58]
    node _T_198 = cat(_T_197, _T_196) @[Cat.scala 30:58]
    node _T_199 = cat(mem[50], mem[51]) @[Cat.scala 30:58]
    node _T_200 = cat(mem[48], mem[49]) @[Cat.scala 30:58]
    node _T_201 = cat(_T_200, _T_199) @[Cat.scala 30:58]
    node _T_202 = cat(_T_201, _T_198) @[Cat.scala 30:58]
    node _T_203 = cat(_T_202, _T_195) @[Cat.scala 30:58]
    node _T_204 = cat(mem[78], mem[79]) @[Cat.scala 30:58]
    node _T_205 = cat(mem[76], mem[77]) @[Cat.scala 30:58]
    node _T_206 = cat(_T_205, _T_204) @[Cat.scala 30:58]
    node _T_207 = cat(mem[74], mem[75]) @[Cat.scala 30:58]
    node _T_208 = cat(mem[72], mem[73]) @[Cat.scala 30:58]
    node _T_209 = cat(_T_208, _T_207) @[Cat.scala 30:58]
    node _T_210 = cat(_T_209, _T_206) @[Cat.scala 30:58]
    node _T_211 = cat(mem[70], mem[71]) @[Cat.scala 30:58]
    node _T_212 = cat(mem[68], mem[69]) @[Cat.scala 30:58]
    node _T_213 = cat(_T_212, _T_211) @[Cat.scala 30:58]
    node _T_214 = cat(mem[66], mem[67]) @[Cat.scala 30:58]
    node _T_215 = cat(mem[64], mem[65]) @[Cat.scala 30:58]
    node _T_216 = cat(_T_215, _T_214) @[Cat.scala 30:58]
    node _T_217 = cat(_T_216, _T_213) @[Cat.scala 30:58]
    node _T_218 = cat(_T_217, _T_210) @[Cat.scala 30:58]
    node _T_219 = cat(mem[94], mem[95]) @[Cat.scala 30:58]
    node _T_220 = cat(mem[92], mem[93]) @[Cat.scala 30:58]
    node _T_221 = cat(_T_220, _T_219) @[Cat.scala 30:58]
    node _T_222 = cat(mem[90], mem[91]) @[Cat.scala 30:58]
    node _T_223 = cat(mem[88], mem[89]) @[Cat.scala 30:58]
    node _T_224 = cat(_T_223, _T_222) @[Cat.scala 30:58]
    node _T_225 = cat(_T_224, _T_221) @[Cat.scala 30:58]
    node _T_226 = cat(mem[86], mem[87]) @[Cat.scala 30:58]
    node _T_227 = cat(mem[84], mem[85]) @[Cat.scala 30:58]
    node _T_228 = cat(_T_227, _T_226) @[Cat.scala 30:58]
    node _T_229 = cat(mem[82], mem[83]) @[Cat.scala 30:58]
    node _T_230 = cat(mem[80], mem[81]) @[Cat.scala 30:58]
    node _T_231 = cat(_T_230, _T_229) @[Cat.scala 30:58]
    node _T_232 = cat(_T_231, _T_228) @[Cat.scala 30:58]
    node _T_233 = cat(_T_232, _T_225) @[Cat.scala 30:58]
    node _T_234 = cat(mem[110], mem[111]) @[Cat.scala 30:58]
    node _T_235 = cat(mem[108], mem[109]) @[Cat.scala 30:58]
    node _T_236 = cat(_T_235, _T_234) @[Cat.scala 30:58]
    node _T_237 = cat(mem[106], mem[107]) @[Cat.scala 30:58]
    node _T_238 = cat(mem[104], mem[105]) @[Cat.scala 30:58]
    node _T_239 = cat(_T_238, _T_237) @[Cat.scala 30:58]
    node _T_240 = cat(_T_239, _T_236) @[Cat.scala 30:58]
    node _T_241 = cat(mem[102], mem[103]) @[Cat.scala 30:58]
    node _T_242 = cat(mem[100], mem[101]) @[Cat.scala 30:58]
    node _T_243 = cat(_T_242, _T_241) @[Cat.scala 30:58]
    node _T_244 = cat(mem[98], mem[99]) @[Cat.scala 30:58]
    node _T_245 = cat(mem[96], mem[97]) @[Cat.scala 30:58]
    node _T_246 = cat(_T_245, _T_244) @[Cat.scala 30:58]
    node _T_247 = cat(_T_246, _T_243) @[Cat.scala 30:58]
    node _T_248 = cat(_T_247, _T_240) @[Cat.scala 30:58]
    node _T_249 = cat(mem[126], mem[127]) @[Cat.scala 30:58]
    node _T_250 = cat(mem[124], mem[125]) @[Cat.scala 30:58]
    node _T_251 = cat(_T_250, _T_249) @[Cat.scala 30:58]
    node _T_252 = cat(mem[122], mem[123]) @[Cat.scala 30:58]
    node _T_253 = cat(mem[120], mem[121]) @[Cat.scala 30:58]
    node _T_254 = cat(_T_253, _T_252) @[Cat.scala 30:58]
    node _T_255 = cat(_T_254, _T_251) @[Cat.scala 30:58]
    node _T_256 = cat(mem[118], mem[119]) @[Cat.scala 30:58]
    node _T_257 = cat(mem[116], mem[117]) @[Cat.scala 30:58]
    node _T_258 = cat(_T_257, _T_256) @[Cat.scala 30:58]
    node _T_259 = cat(mem[114], mem[115]) @[Cat.scala 30:58]
    node _T_260 = cat(mem[112], mem[113]) @[Cat.scala 30:58]
    node _T_261 = cat(_T_260, _T_259) @[Cat.scala 30:58]
    node _T_262 = cat(_T_261, _T_258) @[Cat.scala 30:58]
    node _T_263 = cat(_T_262, _T_255) @[Cat.scala 30:58]
    wire catMem : UInt<32>[8] @[BinaryBuffer.scala 30:17]
    catMem is invalid @[BinaryBuffer.scala 30:17]
    catMem[0] <= _T_158 @[BinaryBuffer.scala 30:17]
    catMem[1] <= _T_173 @[BinaryBuffer.scala 30:17]
    catMem[2] <= _T_188 @[BinaryBuffer.scala 30:17]
    catMem[3] <= _T_203 @[BinaryBuffer.scala 30:17]
    catMem[4] <= _T_218 @[BinaryBuffer.scala 30:17]
    catMem[5] <= _T_233 @[BinaryBuffer.scala 30:17]
    catMem[6] <= _T_248 @[BinaryBuffer.scala 30:17]
    catMem[7] <= _T_263 @[BinaryBuffer.scala 30:17]
    node _T_277 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 32:23]
    node _T_278 = and(io.fastpush, _T_277) @[BinaryBuffer.scala 32:20]
    when _T_278 : @[BinaryBuffer.scala 32:35]
      node _T_280 = add(wPos, UInt<1>("h00")) @[BinaryBuffer.scala 34:15]
      node _T_281 = tail(_T_280, 1) @[BinaryBuffer.scala 34:15]
      node _T_283 = bits(io.fastin, 63, 62) @[BinaryBuffer.scala 34:31]
      mem[_T_281] <= _T_283 @[BinaryBuffer.scala 34:20]
      node _T_285 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 34:15]
      node _T_286 = tail(_T_285, 1) @[BinaryBuffer.scala 34:15]
      node _T_288 = bits(io.fastin, 61, 60) @[BinaryBuffer.scala 34:31]
      mem[_T_286] <= _T_288 @[BinaryBuffer.scala 34:20]
      node _T_290 = add(wPos, UInt<2>("h02")) @[BinaryBuffer.scala 34:15]
      node _T_291 = tail(_T_290, 1) @[BinaryBuffer.scala 34:15]
      node _T_293 = bits(io.fastin, 59, 58) @[BinaryBuffer.scala 34:31]
      mem[_T_291] <= _T_293 @[BinaryBuffer.scala 34:20]
      node _T_295 = add(wPos, UInt<2>("h03")) @[BinaryBuffer.scala 34:15]
      node _T_296 = tail(_T_295, 1) @[BinaryBuffer.scala 34:15]
      node _T_298 = bits(io.fastin, 57, 56) @[BinaryBuffer.scala 34:31]
      mem[_T_296] <= _T_298 @[BinaryBuffer.scala 34:20]
      node _T_300 = add(wPos, UInt<3>("h04")) @[BinaryBuffer.scala 34:15]
      node _T_301 = tail(_T_300, 1) @[BinaryBuffer.scala 34:15]
      node _T_303 = bits(io.fastin, 55, 54) @[BinaryBuffer.scala 34:31]
      mem[_T_301] <= _T_303 @[BinaryBuffer.scala 34:20]
      node _T_305 = add(wPos, UInt<3>("h05")) @[BinaryBuffer.scala 34:15]
      node _T_306 = tail(_T_305, 1) @[BinaryBuffer.scala 34:15]
      node _T_308 = bits(io.fastin, 53, 52) @[BinaryBuffer.scala 34:31]
      mem[_T_306] <= _T_308 @[BinaryBuffer.scala 34:20]
      node _T_310 = add(wPos, UInt<3>("h06")) @[BinaryBuffer.scala 34:15]
      node _T_311 = tail(_T_310, 1) @[BinaryBuffer.scala 34:15]
      node _T_313 = bits(io.fastin, 51, 50) @[BinaryBuffer.scala 34:31]
      mem[_T_311] <= _T_313 @[BinaryBuffer.scala 34:20]
      node _T_315 = add(wPos, UInt<3>("h07")) @[BinaryBuffer.scala 34:15]
      node _T_316 = tail(_T_315, 1) @[BinaryBuffer.scala 34:15]
      node _T_318 = bits(io.fastin, 49, 48) @[BinaryBuffer.scala 34:31]
      mem[_T_316] <= _T_318 @[BinaryBuffer.scala 34:20]
      node _T_320 = add(wPos, UInt<4>("h08")) @[BinaryBuffer.scala 34:15]
      node _T_321 = tail(_T_320, 1) @[BinaryBuffer.scala 34:15]
      node _T_323 = bits(io.fastin, 47, 46) @[BinaryBuffer.scala 34:31]
      mem[_T_321] <= _T_323 @[BinaryBuffer.scala 34:20]
      node _T_325 = add(wPos, UInt<4>("h09")) @[BinaryBuffer.scala 34:15]
      node _T_326 = tail(_T_325, 1) @[BinaryBuffer.scala 34:15]
      node _T_328 = bits(io.fastin, 45, 44) @[BinaryBuffer.scala 34:31]
      mem[_T_326] <= _T_328 @[BinaryBuffer.scala 34:20]
      node _T_330 = add(wPos, UInt<4>("h0a")) @[BinaryBuffer.scala 34:15]
      node _T_331 = tail(_T_330, 1) @[BinaryBuffer.scala 34:15]
      node _T_333 = bits(io.fastin, 43, 42) @[BinaryBuffer.scala 34:31]
      mem[_T_331] <= _T_333 @[BinaryBuffer.scala 34:20]
      node _T_335 = add(wPos, UInt<4>("h0b")) @[BinaryBuffer.scala 34:15]
      node _T_336 = tail(_T_335, 1) @[BinaryBuffer.scala 34:15]
      node _T_338 = bits(io.fastin, 41, 40) @[BinaryBuffer.scala 34:31]
      mem[_T_336] <= _T_338 @[BinaryBuffer.scala 34:20]
      node _T_340 = add(wPos, UInt<4>("h0c")) @[BinaryBuffer.scala 34:15]
      node _T_341 = tail(_T_340, 1) @[BinaryBuffer.scala 34:15]
      node _T_343 = bits(io.fastin, 39, 38) @[BinaryBuffer.scala 34:31]
      mem[_T_341] <= _T_343 @[BinaryBuffer.scala 34:20]
      node _T_345 = add(wPos, UInt<4>("h0d")) @[BinaryBuffer.scala 34:15]
      node _T_346 = tail(_T_345, 1) @[BinaryBuffer.scala 34:15]
      node _T_348 = bits(io.fastin, 37, 36) @[BinaryBuffer.scala 34:31]
      mem[_T_346] <= _T_348 @[BinaryBuffer.scala 34:20]
      node _T_350 = add(wPos, UInt<4>("h0e")) @[BinaryBuffer.scala 34:15]
      node _T_351 = tail(_T_350, 1) @[BinaryBuffer.scala 34:15]
      node _T_353 = bits(io.fastin, 35, 34) @[BinaryBuffer.scala 34:31]
      mem[_T_351] <= _T_353 @[BinaryBuffer.scala 34:20]
      node _T_355 = add(wPos, UInt<4>("h0f")) @[BinaryBuffer.scala 34:15]
      node _T_356 = tail(_T_355, 1) @[BinaryBuffer.scala 34:15]
      node _T_358 = bits(io.fastin, 33, 32) @[BinaryBuffer.scala 34:31]
      mem[_T_356] <= _T_358 @[BinaryBuffer.scala 34:20]
      node _T_360 = add(wPos, UInt<5>("h010")) @[BinaryBuffer.scala 34:15]
      node _T_361 = tail(_T_360, 1) @[BinaryBuffer.scala 34:15]
      node _T_363 = bits(io.fastin, 31, 30) @[BinaryBuffer.scala 34:31]
      mem[_T_361] <= _T_363 @[BinaryBuffer.scala 34:20]
      node _T_365 = add(wPos, UInt<5>("h011")) @[BinaryBuffer.scala 34:15]
      node _T_366 = tail(_T_365, 1) @[BinaryBuffer.scala 34:15]
      node _T_368 = bits(io.fastin, 29, 28) @[BinaryBuffer.scala 34:31]
      mem[_T_366] <= _T_368 @[BinaryBuffer.scala 34:20]
      node _T_370 = add(wPos, UInt<5>("h012")) @[BinaryBuffer.scala 34:15]
      node _T_371 = tail(_T_370, 1) @[BinaryBuffer.scala 34:15]
      node _T_373 = bits(io.fastin, 27, 26) @[BinaryBuffer.scala 34:31]
      mem[_T_371] <= _T_373 @[BinaryBuffer.scala 34:20]
      node _T_375 = add(wPos, UInt<5>("h013")) @[BinaryBuffer.scala 34:15]
      node _T_376 = tail(_T_375, 1) @[BinaryBuffer.scala 34:15]
      node _T_378 = bits(io.fastin, 25, 24) @[BinaryBuffer.scala 34:31]
      mem[_T_376] <= _T_378 @[BinaryBuffer.scala 34:20]
      node _T_380 = add(wPos, UInt<5>("h014")) @[BinaryBuffer.scala 34:15]
      node _T_381 = tail(_T_380, 1) @[BinaryBuffer.scala 34:15]
      node _T_383 = bits(io.fastin, 23, 22) @[BinaryBuffer.scala 34:31]
      mem[_T_381] <= _T_383 @[BinaryBuffer.scala 34:20]
      node _T_385 = add(wPos, UInt<5>("h015")) @[BinaryBuffer.scala 34:15]
      node _T_386 = tail(_T_385, 1) @[BinaryBuffer.scala 34:15]
      node _T_388 = bits(io.fastin, 21, 20) @[BinaryBuffer.scala 34:31]
      mem[_T_386] <= _T_388 @[BinaryBuffer.scala 34:20]
      node _T_390 = add(wPos, UInt<5>("h016")) @[BinaryBuffer.scala 34:15]
      node _T_391 = tail(_T_390, 1) @[BinaryBuffer.scala 34:15]
      node _T_393 = bits(io.fastin, 19, 18) @[BinaryBuffer.scala 34:31]
      mem[_T_391] <= _T_393 @[BinaryBuffer.scala 34:20]
      node _T_395 = add(wPos, UInt<5>("h017")) @[BinaryBuffer.scala 34:15]
      node _T_396 = tail(_T_395, 1) @[BinaryBuffer.scala 34:15]
      node _T_398 = bits(io.fastin, 17, 16) @[BinaryBuffer.scala 34:31]
      mem[_T_396] <= _T_398 @[BinaryBuffer.scala 34:20]
      node _T_400 = add(wPos, UInt<5>("h018")) @[BinaryBuffer.scala 34:15]
      node _T_401 = tail(_T_400, 1) @[BinaryBuffer.scala 34:15]
      node _T_403 = bits(io.fastin, 15, 14) @[BinaryBuffer.scala 34:31]
      mem[_T_401] <= _T_403 @[BinaryBuffer.scala 34:20]
      node _T_405 = add(wPos, UInt<5>("h019")) @[BinaryBuffer.scala 34:15]
      node _T_406 = tail(_T_405, 1) @[BinaryBuffer.scala 34:15]
      node _T_408 = bits(io.fastin, 13, 12) @[BinaryBuffer.scala 34:31]
      mem[_T_406] <= _T_408 @[BinaryBuffer.scala 34:20]
      node _T_410 = add(wPos, UInt<5>("h01a")) @[BinaryBuffer.scala 34:15]
      node _T_411 = tail(_T_410, 1) @[BinaryBuffer.scala 34:15]
      node _T_413 = bits(io.fastin, 11, 10) @[BinaryBuffer.scala 34:31]
      mem[_T_411] <= _T_413 @[BinaryBuffer.scala 34:20]
      node _T_415 = add(wPos, UInt<5>("h01b")) @[BinaryBuffer.scala 34:15]
      node _T_416 = tail(_T_415, 1) @[BinaryBuffer.scala 34:15]
      node _T_418 = bits(io.fastin, 9, 8) @[BinaryBuffer.scala 34:31]
      mem[_T_416] <= _T_418 @[BinaryBuffer.scala 34:20]
      node _T_420 = add(wPos, UInt<5>("h01c")) @[BinaryBuffer.scala 34:15]
      node _T_421 = tail(_T_420, 1) @[BinaryBuffer.scala 34:15]
      node _T_423 = bits(io.fastin, 7, 6) @[BinaryBuffer.scala 34:31]
      mem[_T_421] <= _T_423 @[BinaryBuffer.scala 34:20]
      node _T_425 = add(wPos, UInt<5>("h01d")) @[BinaryBuffer.scala 34:15]
      node _T_426 = tail(_T_425, 1) @[BinaryBuffer.scala 34:15]
      node _T_428 = bits(io.fastin, 5, 4) @[BinaryBuffer.scala 34:31]
      mem[_T_426] <= _T_428 @[BinaryBuffer.scala 34:20]
      node _T_430 = add(wPos, UInt<5>("h01e")) @[BinaryBuffer.scala 34:15]
      node _T_431 = tail(_T_430, 1) @[BinaryBuffer.scala 34:15]
      node _T_433 = bits(io.fastin, 3, 2) @[BinaryBuffer.scala 34:31]
      mem[_T_431] <= _T_433 @[BinaryBuffer.scala 34:20]
      node _T_435 = add(wPos, UInt<5>("h01f")) @[BinaryBuffer.scala 34:15]
      node _T_436 = tail(_T_435, 1) @[BinaryBuffer.scala 34:15]
      node _T_438 = bits(io.fastin, 1, 0) @[BinaryBuffer.scala 34:31]
      mem[_T_436] <= _T_438 @[BinaryBuffer.scala 34:20]
      node _T_440 = add(wPos, UInt<6>("h020")) @[BinaryBuffer.scala 36:15]
      node _T_441 = tail(_T_440, 1) @[BinaryBuffer.scala 36:15]
      wPos <= _T_441 @[BinaryBuffer.scala 36:9]
      skip @[BinaryBuffer.scala 32:35]
    node _T_443 = eq(_T_278, UInt<1>("h00")) @[BinaryBuffer.scala 32:35]
    when _T_443 : @[BinaryBuffer.scala 37:5]
      when io.push : @[BinaryBuffer.scala 38:19]
        node _T_445 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 39:12]
        when _T_445 : @[BinaryBuffer.scala 39:25]
          mem[wPos] <= io.in @[BinaryBuffer.scala 40:19]
          node _T_448 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 41:22]
          node _T_449 = tail(_T_448, 1) @[BinaryBuffer.scala 41:22]
          wPos <= _T_449 @[BinaryBuffer.scala 41:14]
          skip @[BinaryBuffer.scala 39:25]
        node _T_451 = eq(_T_445, UInt<1>("h00")) @[BinaryBuffer.scala 39:25]
        when _T_451 : @[BinaryBuffer.scala 42:9]
          mem[0] <= io.in @[BinaryBuffer.scala 43:16]
          wPos <= UInt<1>("h01") @[BinaryBuffer.scala 44:14]
          rPos <= UInt<1>("h00") @[BinaryBuffer.scala 45:14]
          skip @[BinaryBuffer.scala 42:9]
        skip @[BinaryBuffer.scala 38:19]
      when io.pop : @[BinaryBuffer.scala 49:18]
        node _T_455 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 50:12]
        when _T_455 : @[BinaryBuffer.scala 50:25]
          node _T_457 = add(rPos, UInt<1>("h01")) @[BinaryBuffer.scala 51:22]
          node _T_458 = tail(_T_457, 1) @[BinaryBuffer.scala 51:22]
          rPos <= _T_458 @[BinaryBuffer.scala 51:14]
          skip @[BinaryBuffer.scala 50:25]
        node _T_460 = eq(_T_455, UInt<1>("h00")) @[BinaryBuffer.scala 50:25]
        when _T_460 : @[BinaryBuffer.scala 52:9]
          rPos <= UInt<1>("h01") @[BinaryBuffer.scala 53:14]
          wPos <= UInt<1>("h00") @[BinaryBuffer.scala 54:14]
          skip @[BinaryBuffer.scala 52:9]
        skip @[BinaryBuffer.scala 49:18]
      skip @[BinaryBuffer.scala 37:5]
    node _T_464 = eq(io.pop, UInt<1>("h00")) @[BinaryBuffer.scala 58:20]
    node _T_465 = and(io.reset, _T_464) @[BinaryBuffer.scala 58:17]
    node _T_467 = eq(io.push, UInt<1>("h00")) @[BinaryBuffer.scala 58:33]
    node _T_468 = and(_T_465, _T_467) @[BinaryBuffer.scala 58:30]
    when _T_468 : @[BinaryBuffer.scala 58:44]
      wPos <= UInt<1>("h00") @[BinaryBuffer.scala 59:9]
      rPos <= UInt<1>("h00") @[BinaryBuffer.scala 60:9]
      skip @[BinaryBuffer.scala 58:44]
    io.out <= catMem[rPos] @[BinaryBuffer.scala 63:9]
    
  module XNOR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<32>, flip in2 : UInt<32>[2], out : UInt<32>[2]}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_17 = xor(io.in1, io.in2[0]) @[XNOR.scala 18:27]
    node _T_18 = not(_T_17) @[XNOR.scala 18:18]
    io.out[0] <= _T_18 @[XNOR.scala 18:15]
    node _T_19 = xor(io.in1, io.in2[1]) @[XNOR.scala 18:27]
    node _T_20 = not(_T_19) @[XNOR.scala 18:18]
    io.out[1] <= _T_20 @[XNOR.scala 18:15]
    
  module MeanBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>[2], flip cntInverse65536 : UInt<16>, flip reset : UInt<1>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg acc : UInt<32>, clock @[MeanBuffer.scala 19:16]
    reg result : UInt<32>, clock @[MeanBuffer.scala 20:17]
    io.out <= result @[MeanBuffer.scala 21:9]
    node _T_15 = gt(io.in[0], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_17 = sub(asSInt(UInt<1>("h00")), io.in[0]) @[MeanBuffer.scala 17:42]
    node _T_18 = tail(_T_17, 1) @[MeanBuffer.scala 17:42]
    node _T_19 = asSInt(_T_18) @[MeanBuffer.scala 17:42]
    node _T_20 = mux(_T_15, io.in[0], _T_19) @[MeanBuffer.scala 17:25]
    node _T_21 = asUInt(_T_20) @[MeanBuffer.scala 17:53]
    node _T_23 = gt(io.in[1], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_25 = sub(asSInt(UInt<1>("h00")), io.in[1]) @[MeanBuffer.scala 17:42]
    node _T_26 = tail(_T_25, 1) @[MeanBuffer.scala 17:42]
    node _T_27 = asSInt(_T_26) @[MeanBuffer.scala 17:42]
    node _T_28 = mux(_T_23, io.in[1], _T_27) @[MeanBuffer.scala 17:25]
    node _T_29 = asUInt(_T_28) @[MeanBuffer.scala 17:53]
    node _T_30 = add(_T_21, _T_29) @[ArraySum.scala 13:14]
    node absSum = tail(_T_30, 1) @[ArraySum.scala 13:14]
    node _T_32 = eq(io.reset, UInt<1>("h00")) @[MeanBuffer.scala 24:8]
    when _T_32 : @[MeanBuffer.scala 24:21]
      node _T_33 = add(acc, absSum) @[MeanBuffer.scala 27:16]
      node _T_34 = tail(_T_33, 1) @[MeanBuffer.scala 27:16]
      acc <= _T_34 @[MeanBuffer.scala 27:9]
      node _T_35 = add(acc, absSum) @[MeanBuffer.scala 28:20]
      node _T_36 = tail(_T_35, 1) @[MeanBuffer.scala 28:20]
      node _T_37 = mul(_T_36, io.cntInverse65536) @[MeanBuffer.scala 28:29]
      node _T_38 = shr(_T_37, 16) @[MeanBuffer.scala 28:50]
      result <= _T_38 @[MeanBuffer.scala 28:12]
      skip @[MeanBuffer.scala 24:21]
    node _T_40 = eq(_T_32, UInt<1>("h00")) @[MeanBuffer.scala 24:21]
    when _T_40 : @[MeanBuffer.scala 29:5]
      acc <= absSum @[MeanBuffer.scala 32:9]
      node _T_41 = mul(absSum, io.cntInverse65536) @[MeanBuffer.scala 33:23]
      node _T_42 = shr(_T_41, 16) @[MeanBuffer.scala 33:44]
      result <= _T_42 @[MeanBuffer.scala 33:12]
      skip @[MeanBuffer.scala 29:5]
    
  module DelayedOutput : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip input : UInt<32>, flip update : UInt<1>, output : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg reg : UInt<32>, clock @[DelayedOutput.scala 17:14]
    io.output <= reg @[DelayedOutput.scala 18:12]
    when io.reset : @[DelayedOutput.scala 19:18]
      reg <= UInt<32>("h01") @[DelayedOutput.scala 20:8]
      node _T_9 = eq(reset, UInt<1>("h00")) @[DelayedOutput.scala 21:11]
      when _T_9 : @[DelayedOutput.scala 21:11]
        printf(clock, UInt<1>(1), "Delay reset! %d\n", reg) @[DelayedOutput.scala 21:11]
        skip @[DelayedOutput.scala 21:11]
      skip @[DelayedOutput.scala 19:18]
    node _T_11 = eq(io.reset, UInt<1>("h00")) @[DelayedOutput.scala 19:18]
    node _T_12 = and(_T_11, io.update) @[DelayedOutput.scala 22:24]
    when _T_12 : @[DelayedOutput.scala 22:24]
      node _T_14 = eq(reset, UInt<1>("h00")) @[DelayedOutput.scala 23:11]
      when _T_14 : @[DelayedOutput.scala 23:11]
        printf(clock, UInt<1>(1), "Delay Update! %d\n", io.input) @[DelayedOutput.scala 23:11]
        skip @[DelayedOutput.scala 23:11]
      reg <= io.input @[DelayedOutput.scala 24:8]
      skip @[DelayedOutput.scala 22:24]
    
  module MaxBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip en : UInt<1>, flip in : SInt<32>[2], flip offset : UInt<4>, out : UInt<4>, flip maxLen : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg idxReg : UInt<4>, clock @[MaxBuffer.scala 19:17]
    reg dataReg : SInt<32>, clock @[MaxBuffer.scala 20:18]
    io.out <= idxReg @[MaxBuffer.scala 22:9]
    node _T_17 = add(UInt<1>("h00"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_18 = tail(_T_17, 1) @[MaxBuffer.scala 33:56]
    node _T_20 = add(UInt<1>("h01"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_21 = tail(_T_20, 1) @[MaxBuffer.scala 33:56]
    node _T_22 = gt(io.in[0], io.in[1]) @[MaxBuffer.scala 28:28]
    node _T_23 = geq(_T_21, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_24 = or(_T_22, _T_23) @[MaxBuffer.scala 28:43]
    node _T_25 = mux(_T_24, _T_18, _T_21) @[MaxBuffer.scala 29:13]
    node _T_26 = mux(_T_24, io.in[0], io.in[1]) @[MaxBuffer.scala 29:47]
    node cmp2 = gt(dataReg, _T_26) @[MaxBuffer.scala 35:20]
    when io.en : @[MaxBuffer.scala 37:15]
      node _T_28 = eq(io.reset, UInt<1>("h00")) @[MaxBuffer.scala 38:10]
      when _T_28 : @[MaxBuffer.scala 38:23]
        node _T_29 = mux(cmp2, dataReg, _T_26) @[MaxBuffer.scala 39:21]
        dataReg <= _T_29 @[MaxBuffer.scala 39:15]
        node _T_30 = mux(cmp2, idxReg, _T_25) @[MaxBuffer.scala 40:19]
        idxReg <= _T_30 @[MaxBuffer.scala 40:14]
        skip @[MaxBuffer.scala 38:23]
      node _T_32 = eq(_T_28, UInt<1>("h00")) @[MaxBuffer.scala 38:23]
      when _T_32 : @[MaxBuffer.scala 41:7]
        dataReg <= _T_26 @[MaxBuffer.scala 42:15]
        idxReg <= _T_25 @[MaxBuffer.scala 43:13]
        skip @[MaxBuffer.scala 41:7]
      skip @[MaxBuffer.scala 37:15]
    
  module Accumulator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<10>, out : SInt<10>, flip sel : UInt<6>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<10>[48], clock @[Accumulator.scala 20:24]
    node _T_62 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_63 = and(io.en, _T_62) @[Accumulator.scala 23:14]
    when _T_63 : @[Accumulator.scala 23:30]
      node _T_65 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_65 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_66 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_67 = tail(_T_66, 1) @[Accumulator.scala 25:16]
      node _T_68 = asSInt(_T_67) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_68 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_69 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_69 : @[Accumulator.scala 30:26]
      node _T_71 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_71 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_73 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_183 @[Accumulator.scala 33:21]
      node _T_185 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_187 = mux(_T_185, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_187 @[Accumulator.scala 33:21]
      node _T_189 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_191 = mux(_T_189, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_191 @[Accumulator.scala 33:21]
      node _T_193 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_195 = mux(_T_193, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_195 @[Accumulator.scala 33:21]
      node _T_197 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_199 = mux(_T_197, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_199 @[Accumulator.scala 33:21]
      node _T_201 = eq(UInt<6>("h020"), io.sel) @[Accumulator.scala 33:30]
      node _T_203 = mux(_T_201, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[32] <= _T_203 @[Accumulator.scala 33:21]
      node _T_205 = eq(UInt<6>("h021"), io.sel) @[Accumulator.scala 33:30]
      node _T_207 = mux(_T_205, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[33] <= _T_207 @[Accumulator.scala 33:21]
      node _T_209 = eq(UInt<6>("h022"), io.sel) @[Accumulator.scala 33:30]
      node _T_211 = mux(_T_209, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[34] <= _T_211 @[Accumulator.scala 33:21]
      node _T_213 = eq(UInt<6>("h023"), io.sel) @[Accumulator.scala 33:30]
      node _T_215 = mux(_T_213, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[35] <= _T_215 @[Accumulator.scala 33:21]
      node _T_217 = eq(UInt<6>("h024"), io.sel) @[Accumulator.scala 33:30]
      node _T_219 = mux(_T_217, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[36] <= _T_219 @[Accumulator.scala 33:21]
      node _T_221 = eq(UInt<6>("h025"), io.sel) @[Accumulator.scala 33:30]
      node _T_223 = mux(_T_221, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[37] <= _T_223 @[Accumulator.scala 33:21]
      node _T_225 = eq(UInt<6>("h026"), io.sel) @[Accumulator.scala 33:30]
      node _T_227 = mux(_T_225, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[38] <= _T_227 @[Accumulator.scala 33:21]
      node _T_229 = eq(UInt<6>("h027"), io.sel) @[Accumulator.scala 33:30]
      node _T_231 = mux(_T_229, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[39] <= _T_231 @[Accumulator.scala 33:21]
      node _T_233 = eq(UInt<6>("h028"), io.sel) @[Accumulator.scala 33:30]
      node _T_235 = mux(_T_233, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[40] <= _T_235 @[Accumulator.scala 33:21]
      node _T_237 = eq(UInt<6>("h029"), io.sel) @[Accumulator.scala 33:30]
      node _T_239 = mux(_T_237, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[41] <= _T_239 @[Accumulator.scala 33:21]
      node _T_241 = eq(UInt<6>("h02a"), io.sel) @[Accumulator.scala 33:30]
      node _T_243 = mux(_T_241, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[42] <= _T_243 @[Accumulator.scala 33:21]
      node _T_245 = eq(UInt<6>("h02b"), io.sel) @[Accumulator.scala 33:30]
      node _T_247 = mux(_T_245, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[43] <= _T_247 @[Accumulator.scala 33:21]
      node _T_249 = eq(UInt<6>("h02c"), io.sel) @[Accumulator.scala 33:30]
      node _T_251 = mux(_T_249, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[44] <= _T_251 @[Accumulator.scala 33:21]
      node _T_253 = eq(UInt<6>("h02d"), io.sel) @[Accumulator.scala 33:30]
      node _T_255 = mux(_T_253, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[45] <= _T_255 @[Accumulator.scala 33:21]
      node _T_257 = eq(UInt<6>("h02e"), io.sel) @[Accumulator.scala 33:30]
      node _T_259 = mux(_T_257, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[46] <= _T_259 @[Accumulator.scala 33:21]
      node _T_261 = eq(UInt<6>("h02f"), io.sel) @[Accumulator.scala 33:30]
      node _T_263 = mux(_T_261, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[47] <= _T_263 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<10>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<10>, out : SInt<10>, flip sel : UInt<6>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<10>[48], clock @[Accumulator.scala 20:24]
    node _T_62 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_63 = and(io.en, _T_62) @[Accumulator.scala 23:14]
    when _T_63 : @[Accumulator.scala 23:30]
      node _T_65 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_65 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_66 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_67 = tail(_T_66, 1) @[Accumulator.scala 25:16]
      node _T_68 = asSInt(_T_67) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_68 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_69 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_69 : @[Accumulator.scala 30:26]
      node _T_71 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_71 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_73 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_183 @[Accumulator.scala 33:21]
      node _T_185 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_187 = mux(_T_185, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_187 @[Accumulator.scala 33:21]
      node _T_189 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_191 = mux(_T_189, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_191 @[Accumulator.scala 33:21]
      node _T_193 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_195 = mux(_T_193, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_195 @[Accumulator.scala 33:21]
      node _T_197 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_199 = mux(_T_197, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_199 @[Accumulator.scala 33:21]
      node _T_201 = eq(UInt<6>("h020"), io.sel) @[Accumulator.scala 33:30]
      node _T_203 = mux(_T_201, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[32] <= _T_203 @[Accumulator.scala 33:21]
      node _T_205 = eq(UInt<6>("h021"), io.sel) @[Accumulator.scala 33:30]
      node _T_207 = mux(_T_205, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[33] <= _T_207 @[Accumulator.scala 33:21]
      node _T_209 = eq(UInt<6>("h022"), io.sel) @[Accumulator.scala 33:30]
      node _T_211 = mux(_T_209, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[34] <= _T_211 @[Accumulator.scala 33:21]
      node _T_213 = eq(UInt<6>("h023"), io.sel) @[Accumulator.scala 33:30]
      node _T_215 = mux(_T_213, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[35] <= _T_215 @[Accumulator.scala 33:21]
      node _T_217 = eq(UInt<6>("h024"), io.sel) @[Accumulator.scala 33:30]
      node _T_219 = mux(_T_217, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[36] <= _T_219 @[Accumulator.scala 33:21]
      node _T_221 = eq(UInt<6>("h025"), io.sel) @[Accumulator.scala 33:30]
      node _T_223 = mux(_T_221, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[37] <= _T_223 @[Accumulator.scala 33:21]
      node _T_225 = eq(UInt<6>("h026"), io.sel) @[Accumulator.scala 33:30]
      node _T_227 = mux(_T_225, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[38] <= _T_227 @[Accumulator.scala 33:21]
      node _T_229 = eq(UInt<6>("h027"), io.sel) @[Accumulator.scala 33:30]
      node _T_231 = mux(_T_229, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[39] <= _T_231 @[Accumulator.scala 33:21]
      node _T_233 = eq(UInt<6>("h028"), io.sel) @[Accumulator.scala 33:30]
      node _T_235 = mux(_T_233, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[40] <= _T_235 @[Accumulator.scala 33:21]
      node _T_237 = eq(UInt<6>("h029"), io.sel) @[Accumulator.scala 33:30]
      node _T_239 = mux(_T_237, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[41] <= _T_239 @[Accumulator.scala 33:21]
      node _T_241 = eq(UInt<6>("h02a"), io.sel) @[Accumulator.scala 33:30]
      node _T_243 = mux(_T_241, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[42] <= _T_243 @[Accumulator.scala 33:21]
      node _T_245 = eq(UInt<6>("h02b"), io.sel) @[Accumulator.scala 33:30]
      node _T_247 = mux(_T_245, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[43] <= _T_247 @[Accumulator.scala 33:21]
      node _T_249 = eq(UInt<6>("h02c"), io.sel) @[Accumulator.scala 33:30]
      node _T_251 = mux(_T_249, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[44] <= _T_251 @[Accumulator.scala 33:21]
      node _T_253 = eq(UInt<6>("h02d"), io.sel) @[Accumulator.scala 33:30]
      node _T_255 = mux(_T_253, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[45] <= _T_255 @[Accumulator.scala 33:21]
      node _T_257 = eq(UInt<6>("h02e"), io.sel) @[Accumulator.scala 33:30]
      node _T_259 = mux(_T_257, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[46] <= _T_259 @[Accumulator.scala 33:21]
      node _T_261 = eq(UInt<6>("h02f"), io.sel) @[Accumulator.scala 33:30]
      node _T_263 = mux(_T_261, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[47] <= _T_263 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<10>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module XNORNetInference : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<64>, flip inputPush : UInt<1>, flip inputBufferPush : UInt<1>, flip inputBufferPop : UInt<1>, flip inputBufferReset : UInt<1>, flip memAddr : UInt<9>, memOut : UInt<64>, flip memWen : UInt<1>, flip memIn : UInt<64>, flip memWAddr : UInt<9>, flip accEn : UInt<1>, flip accSel : UInt<6>, flip accReset : UInt<1>, flip maxReset : UInt<1>, flip maxEn : UInt<1>, flip maxOffset : UInt<4>, flip featureNumInverse65536 : UInt<16>, flip actualFeatureNum : UInt<16>, flip meanReset : UInt<1>, flip meanUpdate : UInt<1>, flip meanBufferReset : UInt<1>, result : UInt<4>, mean : UInt<32>, xnorInput : UInt<32>, xnorWeight1 : UInt<32>, maa : SInt<16>, mab : SInt<16>, mam : UInt<32>, mac : SInt<16>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst mem of AggregateMem @[XNORNetInference.scala 24:17]
    mem.io is invalid
    mem.clock <= clock
    mem.reset <= reset
    mem.io.addr <= io.memAddr @[XNORNetInference.scala 72:14]
    io.memOut <= mem.io.out @[XNORNetInference.scala 73:12]
    mem.io.ren <= UInt<1>("h01") @[XNORNetInference.scala 74:13]
    mem.io.wen <= io.memWen @[XNORNetInference.scala 75:13]
    mem.io.in <= io.memIn @[XNORNetInference.scala 76:12]
    mem.io.waddr <= io.memWAddr @[XNORNetInference.scala 77:15]
    wire inputWire : UInt<2> @[XNORNetInference.scala 79:21]
    inputWire is invalid @[XNORNetInference.scala 79:21]
    inst binaryBuffer of BinaryBuffer @[XNORNetInference.scala 81:26]
    binaryBuffer.io is invalid
    binaryBuffer.clock <= clock
    binaryBuffer.reset <= reset
    binaryBuffer.io.in <= inputWire @[XNORNetInference.scala 86:21]
    binaryBuffer.io.push <= io.inputBufferPush @[XNORNetInference.scala 87:23]
    binaryBuffer.io.pop <= io.inputBufferPop @[XNORNetInference.scala 88:22]
    binaryBuffer.io.reset <= io.inputBufferReset @[XNORNetInference.scala 89:24]
    binaryBuffer.io.fastpush <= io.inputPush @[XNORNetInference.scala 90:27]
    binaryBuffer.io.fastin <= io.input @[XNORNetInference.scala 91:25]
    inst xnor of XNOR @[XNORNetInference.scala 95:18]
    xnor.io is invalid
    xnor.clock <= clock
    xnor.reset <= reset
    xnor.io.in1 <= binaryBuffer.io.out @[XNORNetInference.scala 98:14]
    node _T_33 = bits(mem.io.out, 63, 0) @[XNORNetInference.scala 100:26]
    wire _T_42 : UInt<32>[2] @[XNORNetInference.scala 100:47]
    _T_42 is invalid @[XNORNetInference.scala 100:47]
    wire _T_51 : UInt<64>
    _T_51 is invalid
    _T_51 <= _T_33
    node _T_52 = bits(_T_51, 31, 0) @[XNORNetInference.scala 100:47]
    _T_42[0] <= _T_52 @[XNORNetInference.scala 100:47]
    node _T_53 = bits(_T_51, 63, 32) @[XNORNetInference.scala 100:47]
    _T_42[1] <= _T_53 @[XNORNetInference.scala 100:47]
    xnor.io.in2[0] <= _T_42[0] @[XNORNetInference.scala 100:14]
    xnor.io.in2[1] <= _T_42[1] @[XNORNetInference.scala 100:14]
    inst meanBuffer of MeanBuffer @[XNORNetInference.scala 105:24]
    meanBuffer.io is invalid
    meanBuffer.clock <= clock
    meanBuffer.reset <= reset
    inst mean of DelayedOutput @[XNORNetInference.scala 112:18]
    mean.io is invalid
    mean.clock <= clock
    mean.reset <= reset
    mean.io.update <= io.meanUpdate @[XNORNetInference.scala 113:17]
    mean.io.reset <= io.meanReset @[XNORNetInference.scala 114:16]
    mean.io.input <= meanBuffer.io.out @[XNORNetInference.scala 115:16]
    io.mean <= mean.io.output @[XNORNetInference.scala 117:10]
    inst maxModule of MaxBuffer @[XNORNetInference.scala 121:23]
    maxModule.io is invalid
    maxModule.clock <= clock
    maxModule.reset <= reset
    maxModule.io.en <= io.maxEn @[XNORNetInference.scala 125:18]
    maxModule.io.reset <= io.maxReset @[XNORNetInference.scala 126:21]
    maxModule.io.offset <= io.maxOffset @[XNORNetInference.scala 127:22]
    maxModule.io.maxLen <= io.actualFeatureNum @[XNORNetInference.scala 128:22]
    io.result <= maxModule.io.out @[XNORNetInference.scala 129:12]
    inst Accumulator of Accumulator @[XNORNetInference.scala 134:21]
    Accumulator.io is invalid
    Accumulator.clock <= clock
    Accumulator.reset <= reset
    node _T_54 = bits(xnor.io.out[1], 3, 0) @[BitSum.scala 31:51]
    node _T_55 = bits(xnor.io.out[1], 7, 4) @[BitSum.scala 31:51]
    node _T_56 = bits(xnor.io.out[1], 11, 8) @[BitSum.scala 31:51]
    node _T_57 = bits(xnor.io.out[1], 15, 12) @[BitSum.scala 31:51]
    node _T_58 = bits(xnor.io.out[1], 19, 16) @[BitSum.scala 31:51]
    node _T_59 = bits(xnor.io.out[1], 23, 20) @[BitSum.scala 31:51]
    node _T_60 = bits(xnor.io.out[1], 27, 24) @[BitSum.scala 31:51]
    node _T_61 = bits(xnor.io.out[1], 31, 28) @[BitSum.scala 31:51]
    reg _T_64 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_67 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_70 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_73 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_76 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_79 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_82 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_85 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_88 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_91 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_94 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_97 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_100 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_103 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_106 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_109 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_112 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_112 is invalid @[BitSum.scala 11:24]
    _T_112[0] <= _T_64 @[BitSum.scala 11:24]
    _T_112[1] <= _T_67 @[BitSum.scala 11:24]
    _T_112[2] <= _T_70 @[BitSum.scala 11:24]
    _T_112[3] <= _T_73 @[BitSum.scala 11:24]
    _T_112[4] <= _T_76 @[BitSum.scala 11:24]
    _T_112[5] <= _T_79 @[BitSum.scala 11:24]
    _T_112[6] <= _T_82 @[BitSum.scala 11:24]
    _T_112[7] <= _T_85 @[BitSum.scala 11:24]
    _T_112[8] <= _T_88 @[BitSum.scala 11:24]
    _T_112[9] <= _T_91 @[BitSum.scala 11:24]
    _T_112[10] <= _T_94 @[BitSum.scala 11:24]
    _T_112[11] <= _T_97 @[BitSum.scala 11:24]
    _T_112[12] <= _T_100 @[BitSum.scala 11:24]
    _T_112[13] <= _T_103 @[BitSum.scala 11:24]
    _T_112[14] <= _T_106 @[BitSum.scala 11:24]
    _T_112[15] <= _T_109 @[BitSum.scala 11:24]
    reg _T_134 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_137 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_140 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_143 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_146 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_149 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_152 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_155 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_158 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_161 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_164 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_167 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_170 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_173 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_176 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_179 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_182 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_182 is invalid @[BitSum.scala 11:24]
    _T_182[0] <= _T_134 @[BitSum.scala 11:24]
    _T_182[1] <= _T_137 @[BitSum.scala 11:24]
    _T_182[2] <= _T_140 @[BitSum.scala 11:24]
    _T_182[3] <= _T_143 @[BitSum.scala 11:24]
    _T_182[4] <= _T_146 @[BitSum.scala 11:24]
    _T_182[5] <= _T_149 @[BitSum.scala 11:24]
    _T_182[6] <= _T_152 @[BitSum.scala 11:24]
    _T_182[7] <= _T_155 @[BitSum.scala 11:24]
    _T_182[8] <= _T_158 @[BitSum.scala 11:24]
    _T_182[9] <= _T_161 @[BitSum.scala 11:24]
    _T_182[10] <= _T_164 @[BitSum.scala 11:24]
    _T_182[11] <= _T_167 @[BitSum.scala 11:24]
    _T_182[12] <= _T_170 @[BitSum.scala 11:24]
    _T_182[13] <= _T_173 @[BitSum.scala 11:24]
    _T_182[14] <= _T_176 @[BitSum.scala 11:24]
    _T_182[15] <= _T_179 @[BitSum.scala 11:24]
    reg _T_204 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_207 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_210 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_213 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_216 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_219 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_222 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_225 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_228 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_231 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_234 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_237 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_240 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_243 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_246 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_249 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_252 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_252 is invalid @[BitSum.scala 11:24]
    _T_252[0] <= _T_204 @[BitSum.scala 11:24]
    _T_252[1] <= _T_207 @[BitSum.scala 11:24]
    _T_252[2] <= _T_210 @[BitSum.scala 11:24]
    _T_252[3] <= _T_213 @[BitSum.scala 11:24]
    _T_252[4] <= _T_216 @[BitSum.scala 11:24]
    _T_252[5] <= _T_219 @[BitSum.scala 11:24]
    _T_252[6] <= _T_222 @[BitSum.scala 11:24]
    _T_252[7] <= _T_225 @[BitSum.scala 11:24]
    _T_252[8] <= _T_228 @[BitSum.scala 11:24]
    _T_252[9] <= _T_231 @[BitSum.scala 11:24]
    _T_252[10] <= _T_234 @[BitSum.scala 11:24]
    _T_252[11] <= _T_237 @[BitSum.scala 11:24]
    _T_252[12] <= _T_240 @[BitSum.scala 11:24]
    _T_252[13] <= _T_243 @[BitSum.scala 11:24]
    _T_252[14] <= _T_246 @[BitSum.scala 11:24]
    _T_252[15] <= _T_249 @[BitSum.scala 11:24]
    reg _T_274 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_277 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_280 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_283 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_286 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_289 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_292 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_295 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_298 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_301 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_304 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_307 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_310 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_313 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_316 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_319 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_322 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_322 is invalid @[BitSum.scala 11:24]
    _T_322[0] <= _T_274 @[BitSum.scala 11:24]
    _T_322[1] <= _T_277 @[BitSum.scala 11:24]
    _T_322[2] <= _T_280 @[BitSum.scala 11:24]
    _T_322[3] <= _T_283 @[BitSum.scala 11:24]
    _T_322[4] <= _T_286 @[BitSum.scala 11:24]
    _T_322[5] <= _T_289 @[BitSum.scala 11:24]
    _T_322[6] <= _T_292 @[BitSum.scala 11:24]
    _T_322[7] <= _T_295 @[BitSum.scala 11:24]
    _T_322[8] <= _T_298 @[BitSum.scala 11:24]
    _T_322[9] <= _T_301 @[BitSum.scala 11:24]
    _T_322[10] <= _T_304 @[BitSum.scala 11:24]
    _T_322[11] <= _T_307 @[BitSum.scala 11:24]
    _T_322[12] <= _T_310 @[BitSum.scala 11:24]
    _T_322[13] <= _T_313 @[BitSum.scala 11:24]
    _T_322[14] <= _T_316 @[BitSum.scala 11:24]
    _T_322[15] <= _T_319 @[BitSum.scala 11:24]
    reg _T_344 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_347 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_350 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_353 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_356 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_359 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_362 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_365 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_368 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_371 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_374 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_377 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_380 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_383 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_386 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_389 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_392 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_392 is invalid @[BitSum.scala 11:24]
    _T_392[0] <= _T_344 @[BitSum.scala 11:24]
    _T_392[1] <= _T_347 @[BitSum.scala 11:24]
    _T_392[2] <= _T_350 @[BitSum.scala 11:24]
    _T_392[3] <= _T_353 @[BitSum.scala 11:24]
    _T_392[4] <= _T_356 @[BitSum.scala 11:24]
    _T_392[5] <= _T_359 @[BitSum.scala 11:24]
    _T_392[6] <= _T_362 @[BitSum.scala 11:24]
    _T_392[7] <= _T_365 @[BitSum.scala 11:24]
    _T_392[8] <= _T_368 @[BitSum.scala 11:24]
    _T_392[9] <= _T_371 @[BitSum.scala 11:24]
    _T_392[10] <= _T_374 @[BitSum.scala 11:24]
    _T_392[11] <= _T_377 @[BitSum.scala 11:24]
    _T_392[12] <= _T_380 @[BitSum.scala 11:24]
    _T_392[13] <= _T_383 @[BitSum.scala 11:24]
    _T_392[14] <= _T_386 @[BitSum.scala 11:24]
    _T_392[15] <= _T_389 @[BitSum.scala 11:24]
    reg _T_414 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_417 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_420 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_423 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_426 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_429 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_432 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_435 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_438 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_441 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_444 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_447 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_450 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_453 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_456 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_459 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_462 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_462 is invalid @[BitSum.scala 11:24]
    _T_462[0] <= _T_414 @[BitSum.scala 11:24]
    _T_462[1] <= _T_417 @[BitSum.scala 11:24]
    _T_462[2] <= _T_420 @[BitSum.scala 11:24]
    _T_462[3] <= _T_423 @[BitSum.scala 11:24]
    _T_462[4] <= _T_426 @[BitSum.scala 11:24]
    _T_462[5] <= _T_429 @[BitSum.scala 11:24]
    _T_462[6] <= _T_432 @[BitSum.scala 11:24]
    _T_462[7] <= _T_435 @[BitSum.scala 11:24]
    _T_462[8] <= _T_438 @[BitSum.scala 11:24]
    _T_462[9] <= _T_441 @[BitSum.scala 11:24]
    _T_462[10] <= _T_444 @[BitSum.scala 11:24]
    _T_462[11] <= _T_447 @[BitSum.scala 11:24]
    _T_462[12] <= _T_450 @[BitSum.scala 11:24]
    _T_462[13] <= _T_453 @[BitSum.scala 11:24]
    _T_462[14] <= _T_456 @[BitSum.scala 11:24]
    _T_462[15] <= _T_459 @[BitSum.scala 11:24]
    reg _T_484 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_487 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_490 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_493 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_496 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_499 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_502 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_505 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_508 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_511 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_514 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_517 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_520 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_523 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_526 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_529 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_532 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_532 is invalid @[BitSum.scala 11:24]
    _T_532[0] <= _T_484 @[BitSum.scala 11:24]
    _T_532[1] <= _T_487 @[BitSum.scala 11:24]
    _T_532[2] <= _T_490 @[BitSum.scala 11:24]
    _T_532[3] <= _T_493 @[BitSum.scala 11:24]
    _T_532[4] <= _T_496 @[BitSum.scala 11:24]
    _T_532[5] <= _T_499 @[BitSum.scala 11:24]
    _T_532[6] <= _T_502 @[BitSum.scala 11:24]
    _T_532[7] <= _T_505 @[BitSum.scala 11:24]
    _T_532[8] <= _T_508 @[BitSum.scala 11:24]
    _T_532[9] <= _T_511 @[BitSum.scala 11:24]
    _T_532[10] <= _T_514 @[BitSum.scala 11:24]
    _T_532[11] <= _T_517 @[BitSum.scala 11:24]
    _T_532[12] <= _T_520 @[BitSum.scala 11:24]
    _T_532[13] <= _T_523 @[BitSum.scala 11:24]
    _T_532[14] <= _T_526 @[BitSum.scala 11:24]
    _T_532[15] <= _T_529 @[BitSum.scala 11:24]
    reg _T_554 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_557 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_560 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_563 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_566 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_569 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_572 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_575 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_578 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_581 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_584 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_587 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_590 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_593 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_596 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_599 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_602 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_602 is invalid @[BitSum.scala 11:24]
    _T_602[0] <= _T_554 @[BitSum.scala 11:24]
    _T_602[1] <= _T_557 @[BitSum.scala 11:24]
    _T_602[2] <= _T_560 @[BitSum.scala 11:24]
    _T_602[3] <= _T_563 @[BitSum.scala 11:24]
    _T_602[4] <= _T_566 @[BitSum.scala 11:24]
    _T_602[5] <= _T_569 @[BitSum.scala 11:24]
    _T_602[6] <= _T_572 @[BitSum.scala 11:24]
    _T_602[7] <= _T_575 @[BitSum.scala 11:24]
    _T_602[8] <= _T_578 @[BitSum.scala 11:24]
    _T_602[9] <= _T_581 @[BitSum.scala 11:24]
    _T_602[10] <= _T_584 @[BitSum.scala 11:24]
    _T_602[11] <= _T_587 @[BitSum.scala 11:24]
    _T_602[12] <= _T_590 @[BitSum.scala 11:24]
    _T_602[13] <= _T_593 @[BitSum.scala 11:24]
    _T_602[14] <= _T_596 @[BitSum.scala 11:24]
    _T_602[15] <= _T_599 @[BitSum.scala 11:24]
    node _T_622 = add(_T_112[_T_54], _T_182[_T_55]) @[BitSum.scala 18:14]
    node _T_623 = tail(_T_622, 1) @[BitSum.scala 18:14]
    node _T_624 = asSInt(_T_623) @[BitSum.scala 18:14]
    node _T_625 = add(_T_252[_T_56], _T_322[_T_57]) @[BitSum.scala 18:14]
    node _T_626 = tail(_T_625, 1) @[BitSum.scala 18:14]
    node _T_627 = asSInt(_T_626) @[BitSum.scala 18:14]
    node _T_628 = add(_T_392[_T_58], _T_462[_T_59]) @[BitSum.scala 18:14]
    node _T_629 = tail(_T_628, 1) @[BitSum.scala 18:14]
    node _T_630 = asSInt(_T_629) @[BitSum.scala 18:14]
    node _T_631 = add(_T_532[_T_60], _T_602[_T_61]) @[BitSum.scala 18:14]
    node _T_632 = tail(_T_631, 1) @[BitSum.scala 18:14]
    node _T_633 = asSInt(_T_632) @[BitSum.scala 18:14]
    node _T_634 = add(_T_624, _T_627) @[BitSum.scala 18:14]
    node _T_635 = tail(_T_634, 1) @[BitSum.scala 18:14]
    node _T_636 = asSInt(_T_635) @[BitSum.scala 18:14]
    node _T_637 = add(_T_630, _T_633) @[BitSum.scala 18:14]
    node _T_638 = tail(_T_637, 1) @[BitSum.scala 18:14]
    node _T_639 = asSInt(_T_638) @[BitSum.scala 18:14]
    node _T_640 = add(_T_636, _T_639) @[BitSum.scala 18:14]
    node _T_641 = tail(_T_640, 1) @[BitSum.scala 18:14]
    node _T_642 = asSInt(_T_641) @[BitSum.scala 18:14]
    Accumulator.io.in <= _T_642 @[XNORNetInference.scala 137:15]
    Accumulator.io.sel <= io.accSel @[XNORNetInference.scala 141:16]
    Accumulator.io.reset <= io.accReset @[XNORNetInference.scala 142:18]
    Accumulator.io.en <= io.accEn @[XNORNetInference.scala 143:14]
    inst MulAdd of MulAdd @[XNORNetInference.scala 146:24]
    MulAdd.io is invalid
    MulAdd.clock <= clock
    MulAdd.reset <= reset
    node _T_643 = bits(mem.io.out, 63, 32) @[XNORNetInference.scala 152:28]
    node _T_644 = bits(_T_643, 31, 16) @[XNORNetInference.scala 154:26]
    node _T_645 = asSInt(_T_644) @[XNORNetInference.scala 154:99]
    MulAdd.io.a <= _T_645 @[XNORNetInference.scala 154:17]
    node _T_646 = bits(_T_643, 15, 0) @[XNORNetInference.scala 155:26]
    node _T_647 = asSInt(_T_646) @[XNORNetInference.scala 155:69]
    MulAdd.io.c <= _T_647 @[XNORNetInference.scala 155:17]
    MulAdd.io.m <= mean.io.output @[XNORNetInference.scala 156:16]
    MulAdd.io.b <= Accumulator.io.out @[XNORNetInference.scala 157:16]
    meanBuffer.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 159:24]
    maxModule.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 160:23]
    node _T_648 = bits(MulAdd.io.r, 31, 31) @[XNORNetInference.scala 161:18]
    node signs_0 = not(_T_648) @[XNORNetInference.scala 161:5]
    inst Accumulator_1 of Accumulator_1 @[XNORNetInference.scala 134:21]
    Accumulator_1.io is invalid
    Accumulator_1.clock <= clock
    Accumulator_1.reset <= reset
    node _T_649 = bits(xnor.io.out[0], 3, 0) @[BitSum.scala 31:51]
    node _T_650 = bits(xnor.io.out[0], 7, 4) @[BitSum.scala 31:51]
    node _T_651 = bits(xnor.io.out[0], 11, 8) @[BitSum.scala 31:51]
    node _T_652 = bits(xnor.io.out[0], 15, 12) @[BitSum.scala 31:51]
    node _T_653 = bits(xnor.io.out[0], 19, 16) @[BitSum.scala 31:51]
    node _T_654 = bits(xnor.io.out[0], 23, 20) @[BitSum.scala 31:51]
    node _T_655 = bits(xnor.io.out[0], 27, 24) @[BitSum.scala 31:51]
    node _T_656 = bits(xnor.io.out[0], 31, 28) @[BitSum.scala 31:51]
    reg _T_659 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_662 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_665 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_668 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_671 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_674 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_677 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_680 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_683 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_686 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_689 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_692 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_695 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_698 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_701 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_704 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_707 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_707 is invalid @[BitSum.scala 11:24]
    _T_707[0] <= _T_659 @[BitSum.scala 11:24]
    _T_707[1] <= _T_662 @[BitSum.scala 11:24]
    _T_707[2] <= _T_665 @[BitSum.scala 11:24]
    _T_707[3] <= _T_668 @[BitSum.scala 11:24]
    _T_707[4] <= _T_671 @[BitSum.scala 11:24]
    _T_707[5] <= _T_674 @[BitSum.scala 11:24]
    _T_707[6] <= _T_677 @[BitSum.scala 11:24]
    _T_707[7] <= _T_680 @[BitSum.scala 11:24]
    _T_707[8] <= _T_683 @[BitSum.scala 11:24]
    _T_707[9] <= _T_686 @[BitSum.scala 11:24]
    _T_707[10] <= _T_689 @[BitSum.scala 11:24]
    _T_707[11] <= _T_692 @[BitSum.scala 11:24]
    _T_707[12] <= _T_695 @[BitSum.scala 11:24]
    _T_707[13] <= _T_698 @[BitSum.scala 11:24]
    _T_707[14] <= _T_701 @[BitSum.scala 11:24]
    _T_707[15] <= _T_704 @[BitSum.scala 11:24]
    reg _T_729 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_732 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_735 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_738 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_741 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_744 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_747 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_750 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_753 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_756 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_759 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_762 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_765 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_768 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_771 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_774 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_777 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_777 is invalid @[BitSum.scala 11:24]
    _T_777[0] <= _T_729 @[BitSum.scala 11:24]
    _T_777[1] <= _T_732 @[BitSum.scala 11:24]
    _T_777[2] <= _T_735 @[BitSum.scala 11:24]
    _T_777[3] <= _T_738 @[BitSum.scala 11:24]
    _T_777[4] <= _T_741 @[BitSum.scala 11:24]
    _T_777[5] <= _T_744 @[BitSum.scala 11:24]
    _T_777[6] <= _T_747 @[BitSum.scala 11:24]
    _T_777[7] <= _T_750 @[BitSum.scala 11:24]
    _T_777[8] <= _T_753 @[BitSum.scala 11:24]
    _T_777[9] <= _T_756 @[BitSum.scala 11:24]
    _T_777[10] <= _T_759 @[BitSum.scala 11:24]
    _T_777[11] <= _T_762 @[BitSum.scala 11:24]
    _T_777[12] <= _T_765 @[BitSum.scala 11:24]
    _T_777[13] <= _T_768 @[BitSum.scala 11:24]
    _T_777[14] <= _T_771 @[BitSum.scala 11:24]
    _T_777[15] <= _T_774 @[BitSum.scala 11:24]
    reg _T_799 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_802 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_805 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_808 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_811 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_814 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_817 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_820 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_823 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_826 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_829 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_832 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_835 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_838 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_841 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_844 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_847 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_847 is invalid @[BitSum.scala 11:24]
    _T_847[0] <= _T_799 @[BitSum.scala 11:24]
    _T_847[1] <= _T_802 @[BitSum.scala 11:24]
    _T_847[2] <= _T_805 @[BitSum.scala 11:24]
    _T_847[3] <= _T_808 @[BitSum.scala 11:24]
    _T_847[4] <= _T_811 @[BitSum.scala 11:24]
    _T_847[5] <= _T_814 @[BitSum.scala 11:24]
    _T_847[6] <= _T_817 @[BitSum.scala 11:24]
    _T_847[7] <= _T_820 @[BitSum.scala 11:24]
    _T_847[8] <= _T_823 @[BitSum.scala 11:24]
    _T_847[9] <= _T_826 @[BitSum.scala 11:24]
    _T_847[10] <= _T_829 @[BitSum.scala 11:24]
    _T_847[11] <= _T_832 @[BitSum.scala 11:24]
    _T_847[12] <= _T_835 @[BitSum.scala 11:24]
    _T_847[13] <= _T_838 @[BitSum.scala 11:24]
    _T_847[14] <= _T_841 @[BitSum.scala 11:24]
    _T_847[15] <= _T_844 @[BitSum.scala 11:24]
    reg _T_869 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_872 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_875 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_878 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_881 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_884 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_887 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_890 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_893 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_896 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_899 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_902 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_905 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_908 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_911 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_914 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_917 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_917 is invalid @[BitSum.scala 11:24]
    _T_917[0] <= _T_869 @[BitSum.scala 11:24]
    _T_917[1] <= _T_872 @[BitSum.scala 11:24]
    _T_917[2] <= _T_875 @[BitSum.scala 11:24]
    _T_917[3] <= _T_878 @[BitSum.scala 11:24]
    _T_917[4] <= _T_881 @[BitSum.scala 11:24]
    _T_917[5] <= _T_884 @[BitSum.scala 11:24]
    _T_917[6] <= _T_887 @[BitSum.scala 11:24]
    _T_917[7] <= _T_890 @[BitSum.scala 11:24]
    _T_917[8] <= _T_893 @[BitSum.scala 11:24]
    _T_917[9] <= _T_896 @[BitSum.scala 11:24]
    _T_917[10] <= _T_899 @[BitSum.scala 11:24]
    _T_917[11] <= _T_902 @[BitSum.scala 11:24]
    _T_917[12] <= _T_905 @[BitSum.scala 11:24]
    _T_917[13] <= _T_908 @[BitSum.scala 11:24]
    _T_917[14] <= _T_911 @[BitSum.scala 11:24]
    _T_917[15] <= _T_914 @[BitSum.scala 11:24]
    reg _T_939 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_942 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_945 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_948 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_951 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_954 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_957 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_960 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_963 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_966 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_969 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_972 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_975 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_978 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_981 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_984 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_987 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_987 is invalid @[BitSum.scala 11:24]
    _T_987[0] <= _T_939 @[BitSum.scala 11:24]
    _T_987[1] <= _T_942 @[BitSum.scala 11:24]
    _T_987[2] <= _T_945 @[BitSum.scala 11:24]
    _T_987[3] <= _T_948 @[BitSum.scala 11:24]
    _T_987[4] <= _T_951 @[BitSum.scala 11:24]
    _T_987[5] <= _T_954 @[BitSum.scala 11:24]
    _T_987[6] <= _T_957 @[BitSum.scala 11:24]
    _T_987[7] <= _T_960 @[BitSum.scala 11:24]
    _T_987[8] <= _T_963 @[BitSum.scala 11:24]
    _T_987[9] <= _T_966 @[BitSum.scala 11:24]
    _T_987[10] <= _T_969 @[BitSum.scala 11:24]
    _T_987[11] <= _T_972 @[BitSum.scala 11:24]
    _T_987[12] <= _T_975 @[BitSum.scala 11:24]
    _T_987[13] <= _T_978 @[BitSum.scala 11:24]
    _T_987[14] <= _T_981 @[BitSum.scala 11:24]
    _T_987[15] <= _T_984 @[BitSum.scala 11:24]
    reg _T_1009 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1012 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1015 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1018 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1021 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1024 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1027 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1030 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1033 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1036 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1039 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1042 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1045 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1048 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1051 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1054 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1057 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1057 is invalid @[BitSum.scala 11:24]
    _T_1057[0] <= _T_1009 @[BitSum.scala 11:24]
    _T_1057[1] <= _T_1012 @[BitSum.scala 11:24]
    _T_1057[2] <= _T_1015 @[BitSum.scala 11:24]
    _T_1057[3] <= _T_1018 @[BitSum.scala 11:24]
    _T_1057[4] <= _T_1021 @[BitSum.scala 11:24]
    _T_1057[5] <= _T_1024 @[BitSum.scala 11:24]
    _T_1057[6] <= _T_1027 @[BitSum.scala 11:24]
    _T_1057[7] <= _T_1030 @[BitSum.scala 11:24]
    _T_1057[8] <= _T_1033 @[BitSum.scala 11:24]
    _T_1057[9] <= _T_1036 @[BitSum.scala 11:24]
    _T_1057[10] <= _T_1039 @[BitSum.scala 11:24]
    _T_1057[11] <= _T_1042 @[BitSum.scala 11:24]
    _T_1057[12] <= _T_1045 @[BitSum.scala 11:24]
    _T_1057[13] <= _T_1048 @[BitSum.scala 11:24]
    _T_1057[14] <= _T_1051 @[BitSum.scala 11:24]
    _T_1057[15] <= _T_1054 @[BitSum.scala 11:24]
    reg _T_1079 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1082 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1085 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1088 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1091 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1094 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1097 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1100 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1103 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1106 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1109 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1112 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1115 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1118 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1121 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1124 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1127 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1127 is invalid @[BitSum.scala 11:24]
    _T_1127[0] <= _T_1079 @[BitSum.scala 11:24]
    _T_1127[1] <= _T_1082 @[BitSum.scala 11:24]
    _T_1127[2] <= _T_1085 @[BitSum.scala 11:24]
    _T_1127[3] <= _T_1088 @[BitSum.scala 11:24]
    _T_1127[4] <= _T_1091 @[BitSum.scala 11:24]
    _T_1127[5] <= _T_1094 @[BitSum.scala 11:24]
    _T_1127[6] <= _T_1097 @[BitSum.scala 11:24]
    _T_1127[7] <= _T_1100 @[BitSum.scala 11:24]
    _T_1127[8] <= _T_1103 @[BitSum.scala 11:24]
    _T_1127[9] <= _T_1106 @[BitSum.scala 11:24]
    _T_1127[10] <= _T_1109 @[BitSum.scala 11:24]
    _T_1127[11] <= _T_1112 @[BitSum.scala 11:24]
    _T_1127[12] <= _T_1115 @[BitSum.scala 11:24]
    _T_1127[13] <= _T_1118 @[BitSum.scala 11:24]
    _T_1127[14] <= _T_1121 @[BitSum.scala 11:24]
    _T_1127[15] <= _T_1124 @[BitSum.scala 11:24]
    reg _T_1149 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1152 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1155 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1158 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1161 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1164 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1167 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1170 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1173 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1176 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1179 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1182 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1185 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1188 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1191 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1194 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1197 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1197 is invalid @[BitSum.scala 11:24]
    _T_1197[0] <= _T_1149 @[BitSum.scala 11:24]
    _T_1197[1] <= _T_1152 @[BitSum.scala 11:24]
    _T_1197[2] <= _T_1155 @[BitSum.scala 11:24]
    _T_1197[3] <= _T_1158 @[BitSum.scala 11:24]
    _T_1197[4] <= _T_1161 @[BitSum.scala 11:24]
    _T_1197[5] <= _T_1164 @[BitSum.scala 11:24]
    _T_1197[6] <= _T_1167 @[BitSum.scala 11:24]
    _T_1197[7] <= _T_1170 @[BitSum.scala 11:24]
    _T_1197[8] <= _T_1173 @[BitSum.scala 11:24]
    _T_1197[9] <= _T_1176 @[BitSum.scala 11:24]
    _T_1197[10] <= _T_1179 @[BitSum.scala 11:24]
    _T_1197[11] <= _T_1182 @[BitSum.scala 11:24]
    _T_1197[12] <= _T_1185 @[BitSum.scala 11:24]
    _T_1197[13] <= _T_1188 @[BitSum.scala 11:24]
    _T_1197[14] <= _T_1191 @[BitSum.scala 11:24]
    _T_1197[15] <= _T_1194 @[BitSum.scala 11:24]
    node _T_1217 = add(_T_707[_T_649], _T_777[_T_650]) @[BitSum.scala 18:14]
    node _T_1218 = tail(_T_1217, 1) @[BitSum.scala 18:14]
    node _T_1219 = asSInt(_T_1218) @[BitSum.scala 18:14]
    node _T_1220 = add(_T_847[_T_651], _T_917[_T_652]) @[BitSum.scala 18:14]
    node _T_1221 = tail(_T_1220, 1) @[BitSum.scala 18:14]
    node _T_1222 = asSInt(_T_1221) @[BitSum.scala 18:14]
    node _T_1223 = add(_T_987[_T_653], _T_1057[_T_654]) @[BitSum.scala 18:14]
    node _T_1224 = tail(_T_1223, 1) @[BitSum.scala 18:14]
    node _T_1225 = asSInt(_T_1224) @[BitSum.scala 18:14]
    node _T_1226 = add(_T_1127[_T_655], _T_1197[_T_656]) @[BitSum.scala 18:14]
    node _T_1227 = tail(_T_1226, 1) @[BitSum.scala 18:14]
    node _T_1228 = asSInt(_T_1227) @[BitSum.scala 18:14]
    node _T_1229 = add(_T_1219, _T_1222) @[BitSum.scala 18:14]
    node _T_1230 = tail(_T_1229, 1) @[BitSum.scala 18:14]
    node _T_1231 = asSInt(_T_1230) @[BitSum.scala 18:14]
    node _T_1232 = add(_T_1225, _T_1228) @[BitSum.scala 18:14]
    node _T_1233 = tail(_T_1232, 1) @[BitSum.scala 18:14]
    node _T_1234 = asSInt(_T_1233) @[BitSum.scala 18:14]
    node _T_1235 = add(_T_1231, _T_1234) @[BitSum.scala 18:14]
    node _T_1236 = tail(_T_1235, 1) @[BitSum.scala 18:14]
    node _T_1237 = asSInt(_T_1236) @[BitSum.scala 18:14]
    Accumulator_1.io.in <= _T_1237 @[XNORNetInference.scala 137:15]
    Accumulator_1.io.sel <= io.accSel @[XNORNetInference.scala 141:16]
    Accumulator_1.io.reset <= io.accReset @[XNORNetInference.scala 142:18]
    Accumulator_1.io.en <= io.accEn @[XNORNetInference.scala 143:14]
    inst MulAdd_1 of MulAdd_1 @[XNORNetInference.scala 146:24]
    MulAdd_1.io is invalid
    MulAdd_1.clock <= clock
    MulAdd_1.reset <= reset
    node _T_1238 = bits(mem.io.out, 31, 0) @[XNORNetInference.scala 152:28]
    node _T_1239 = bits(_T_1238, 31, 16) @[XNORNetInference.scala 154:26]
    node _T_1240 = asSInt(_T_1239) @[XNORNetInference.scala 154:99]
    MulAdd_1.io.a <= _T_1240 @[XNORNetInference.scala 154:17]
    node _T_1241 = bits(_T_1238, 15, 0) @[XNORNetInference.scala 155:26]
    node _T_1242 = asSInt(_T_1241) @[XNORNetInference.scala 155:69]
    MulAdd_1.io.c <= _T_1242 @[XNORNetInference.scala 155:17]
    MulAdd_1.io.m <= mean.io.output @[XNORNetInference.scala 156:16]
    MulAdd_1.io.b <= Accumulator_1.io.out @[XNORNetInference.scala 157:16]
    meanBuffer.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 159:24]
    maxModule.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 160:23]
    node _T_1243 = bits(MulAdd_1.io.r, 31, 31) @[XNORNetInference.scala 161:18]
    node signs_1 = not(_T_1243) @[XNORNetInference.scala 161:5]
    node _T_1244 = cat(signs_0, signs_1) @[Cat.scala 30:58]
    inputWire <= _T_1244 @[XNORNetInference.scala 165:12]
    meanBuffer.io.reset <= io.meanBufferReset @[XNORNetInference.scala 167:22]
    meanBuffer.io.cntInverse65536 <= io.featureNumInverse65536 @[XNORNetInference.scala 168:32]
    
  module LayerParamShifter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip shift : UInt<1>, currentLayer : UInt<4>, currentFeatureCnt : UInt<16>, actualFeatureCnt : UInt<16>, currentFeatureCnt65536 : UInt<16>, currentInputRound : UInt<16>, currentTotalRound : UInt<16>, currentAccWidth : UInt<16>, lastLayer : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg currentLayer : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[LayerParamShifter.scala 11:29]
    reg featureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 14:17]
    reg featureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0a"))) @[LayerParamShifter.scala 14:17]
    reg actualFeatureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 17:17]
    reg actualFeatureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0a"))) @[LayerParamShifter.scala 17:17]
    reg featureCnts65536_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h02aa"))) @[LayerParamShifter.scala 20:17]
    reg featureCnts65536_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h01999"))) @[LayerParamShifter.scala 20:17]
    reg accWidth_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h030"))) @[LayerParamShifter.scala 23:17]
    reg accWidth_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h05"))) @[LayerParamShifter.scala 23:17]
    reg inputRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h08"))) @[LayerParamShifter.scala 27:17]
    reg inputRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 27:17]
    reg totalRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0180"))) @[LayerParamShifter.scala 32:17]
    reg totalRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0f"))) @[LayerParamShifter.scala 32:17]
    io.currentLayer <= currentLayer @[LayerParamShifter.scala 46:18]
    io.currentFeatureCnt <= featureCnts_0 @[LayerParamShifter.scala 47:23]
    io.actualFeatureCnt <= actualFeatureCnts_0 @[LayerParamShifter.scala 48:22]
    io.currentFeatureCnt65536 <= featureCnts65536_0 @[LayerParamShifter.scala 49:28]
    io.currentInputRound <= inputRound_0 @[LayerParamShifter.scala 50:23]
    io.currentTotalRound <= totalRound_0 @[LayerParamShifter.scala 51:23]
    io.currentAccWidth <= accWidth_0 @[LayerParamShifter.scala 52:21]
    node _T_38 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 53:30]
    io.lastLayer <= _T_38 @[LayerParamShifter.scala 53:15]
    when io.shift : @[LayerParamShifter.scala 55:18]
      featureCnts_0 <= featureCnts_1 @[LayerParamShifter.scala 57:22]
      actualFeatureCnts_0 <= actualFeatureCnts_1 @[LayerParamShifter.scala 58:28]
      featureCnts65536_0 <= featureCnts65536_1 @[LayerParamShifter.scala 59:27]
      accWidth_0 <= accWidth_1 @[LayerParamShifter.scala 60:18]
      inputRound_0 <= inputRound_1 @[LayerParamShifter.scala 61:20]
      totalRound_0 <= totalRound_1 @[LayerParamShifter.scala 62:20]
      node _T_40 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:24]
      when _T_40 : @[LayerParamShifter.scala 63:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 64:22]
        skip @[LayerParamShifter.scala 63:56]
      node _T_43 = eq(_T_40, UInt<1>("h00")) @[LayerParamShifter.scala 63:56]
      when _T_43 : @[LayerParamShifter.scala 65:9]
        node _T_45 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 66:35]
        node _T_46 = tail(_T_45, 1) @[LayerParamShifter.scala 66:35]
        currentLayer <= _T_46 @[LayerParamShifter.scala 66:21]
        skip @[LayerParamShifter.scala 65:9]
      featureCnts_1 <= featureCnts_0 @[LayerParamShifter.scala 57:22]
      actualFeatureCnts_1 <= actualFeatureCnts_0 @[LayerParamShifter.scala 58:28]
      featureCnts65536_1 <= featureCnts65536_0 @[LayerParamShifter.scala 59:27]
      accWidth_1 <= accWidth_0 @[LayerParamShifter.scala 60:18]
      inputRound_1 <= inputRound_0 @[LayerParamShifter.scala 61:20]
      totalRound_1 <= totalRound_0 @[LayerParamShifter.scala 62:20]
      node _T_48 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:24]
      when _T_48 : @[LayerParamShifter.scala 63:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 64:22]
        skip @[LayerParamShifter.scala 63:56]
      node _T_51 = eq(_T_48, UInt<1>("h00")) @[LayerParamShifter.scala 63:56]
      when _T_51 : @[LayerParamShifter.scala 65:9]
        node _T_53 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 66:35]
        node _T_54 = tail(_T_53, 1) @[LayerParamShifter.scala 66:35]
        currentLayer <= _T_54 @[LayerParamShifter.scala 66:21]
        skip @[LayerParamShifter.scala 65:9]
      skip @[LayerParamShifter.scala 55:18]
    
  module IglooScheduler : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip en : UInt<1>, flip inputOffset : UInt<9>, flip memOffset : UInt<9>, finished : UInt<1>, result : UInt<4>, flip memWen : UInt<1>, flip memWAddr : UInt<9>, flip memIn : UInt<64>, state : UInt<16>, mean : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst hw of XNORNetInference @[IglooScheduler.scala 53:18]
    hw.io is invalid
    hw.clock <= clock
    hw.reset <= reset
    reg inputPushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 94:27]
    reg inputBufferPushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 95:33]
    reg inputBufferPopReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 96:32]
    reg inputBufferResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 97:34]
    reg accEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 98:23]
    reg accResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 99:26]
    reg maxEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 100:23]
    reg maxResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 101:26]
    reg meanResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 102:27]
    reg meanUpdateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 103:28]
    reg meanBufferResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 104:33]
    hw.io.inputPush <= inputPushReg @[IglooScheduler.scala 106:18]
    hw.io.inputBufferPush <= inputBufferPushReg @[IglooScheduler.scala 107:24]
    hw.io.inputBufferPop <= inputBufferPopReg @[IglooScheduler.scala 108:23]
    hw.io.inputBufferReset <= inputBufferResetReg @[IglooScheduler.scala 109:25]
    hw.io.accEn <= accEnReg @[IglooScheduler.scala 110:14]
    hw.io.accReset <= accResetReg @[IglooScheduler.scala 111:17]
    hw.io.maxEn <= maxEnReg @[IglooScheduler.scala 112:14]
    hw.io.maxReset <= maxResetReg @[IglooScheduler.scala 113:17]
    hw.io.meanReset <= meanResetReg @[IglooScheduler.scala 114:18]
    hw.io.meanUpdate <= meanUpdateReg @[IglooScheduler.scala 115:19]
    hw.io.meanBufferReset <= meanBufferResetReg @[IglooScheduler.scala 116:24]
    hw.io.memWen <= io.memWen @[IglooScheduler.scala 118:15]
    hw.io.memIn <= io.memIn @[IglooScheduler.scala 119:14]
    hw.io.memWAddr <= io.memWAddr @[IglooScheduler.scala 120:17]
    io.result <= hw.io.result @[IglooScheduler.scala 123:12]
    inst layerParams of LayerParamShifter @[IglooScheduler.scala 125:25]
    layerParams.io is invalid
    layerParams.clock <= clock
    layerParams.reset <= reset
    maxEnReg <= layerParams.io.lastLayer @[IglooScheduler.scala 127:11]
    hw.io.actualFeatureNum <= layerParams.io.actualFeatureCnt @[IglooScheduler.scala 128:25]
    hw.io.featureNumInverse65536 <= layerParams.io.currentFeatureCnt65536 @[IglooScheduler.scala 129:31]
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[IglooScheduler.scala 132:20]
    reg substate : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IglooScheduler.scala 133:23]
    io.state <= state @[IglooScheduler.scala 134:11]
    io.mean <= hw.io.mean @[IglooScheduler.scala 135:10]
    reg maxOffsetReg : UInt<4>, clock @[IglooScheduler.scala 150:23]
    hw.io.maxOffset <= maxOffsetReg @[IglooScheduler.scala 151:18]
    reg memOffset : UInt<9>, clock @[IglooScheduler.scala 154:20]
    hw.io.memAddr <= memOffset @[IglooScheduler.scala 155:17]
    hw.io.input <= hw.io.memOut @[IglooScheduler.scala 156:14]
    node acc = rem(substate, layerParams.io.currentAccWidth) @[IglooScheduler.scala 159:19]
    hw.io.accSel <= acc @[IglooScheduler.scala 160:15]
    node _T_41 = eq(state, UInt<8>("h01")) @[IglooScheduler.scala 138:25]
    io.finished <= _T_41 @[IglooScheduler.scala 162:14]
    layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
    when io.en : @[IglooScheduler.scala 167:15]
      node _T_44 = eq(state, UInt<8>("h00")) @[IglooScheduler.scala 138:25]
      when _T_44 : @[IglooScheduler.scala 169:21]
        memOffset <= io.inputOffset @[IglooScheduler.scala 170:16]
        inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        inputBufferPopReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        inputBufferResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        meanResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        state <= UInt<8>("h02") @[IglooScheduler.scala 140:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
        skip @[IglooScheduler.scala 169:21]
      node _T_52 = eq(state, UInt<8>("h02")) @[IglooScheduler.scala 138:25]
      when _T_52 : @[IglooScheduler.scala 181:23]
        inputBufferResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        inputPushReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        meanResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        node _T_57 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 186:27]
        node _T_58 = tail(_T_57, 1) @[IglooScheduler.scala 186:27]
        memOffset <= _T_58 @[IglooScheduler.scala 186:16]
        state <= UInt<8>("h03") @[IglooScheduler.scala 140:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
        skip @[IglooScheduler.scala 181:23]
      node _T_62 = eq(state, UInt<8>("h03")) @[IglooScheduler.scala 138:25]
      when _T_62 : @[IglooScheduler.scala 189:26]
        node _T_64 = lt(substate, UInt<2>("h02")) @[IglooScheduler.scala 191:21]
        when _T_64 : @[IglooScheduler.scala 191:50]
          node _T_66 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 193:29]
          node _T_67 = tail(_T_66, 1) @[IglooScheduler.scala 193:29]
          memOffset <= _T_67 @[IglooScheduler.scala 193:18]
          node _T_69 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 142:30]
          node _T_70 = tail(_T_69, 1) @[IglooScheduler.scala 142:30]
          substate <= _T_70 @[IglooScheduler.scala 142:20]
          skip @[IglooScheduler.scala 191:50]
        node _T_72 = eq(substate, UInt<2>("h02")) @[IglooScheduler.scala 195:27]
        node _T_74 = eq(_T_64, UInt<1>("h00")) @[IglooScheduler.scala 191:50]
        node _T_75 = and(_T_74, _T_72) @[IglooScheduler.scala 195:58]
        when _T_75 : @[IglooScheduler.scala 195:58]
          memOffset <= io.memOffset @[IglooScheduler.scala 196:19]
          state <= UInt<8>("h04") @[IglooScheduler.scala 140:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
          skip @[IglooScheduler.scala 195:58]
        skip @[IglooScheduler.scala 189:26]
      node _T_79 = eq(state, UInt<8>("h04")) @[IglooScheduler.scala 138:25]
      when _T_79 : @[IglooScheduler.scala 200:28]
        inputPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        accResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        hw.io.accSel <= UInt<1>("h00") @[IglooScheduler.scala 207:20]
        node _T_85 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 209:27]
        node _T_86 = tail(_T_85, 1) @[IglooScheduler.scala 209:27]
        memOffset <= _T_86 @[IglooScheduler.scala 209:16]
        state <= UInt<8>("h05") @[IglooScheduler.scala 140:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
        skip @[IglooScheduler.scala 200:28]
      node _T_90 = eq(state, UInt<8>("h05")) @[IglooScheduler.scala 138:25]
      when _T_90 : @[IglooScheduler.scala 214:20]
        layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        accResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        meanUpdateReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        node _T_95 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 223:27]
        node _T_96 = tail(_T_95, 1) @[IglooScheduler.scala 223:27]
        memOffset <= _T_96 @[IglooScheduler.scala 223:16]
        node _T_98 = sub(layerParams.io.currentAccWidth, UInt<2>("h02")) @[IglooScheduler.scala 225:48]
        node _T_99 = asUInt(_T_98) @[IglooScheduler.scala 225:48]
        node _T_100 = tail(_T_99, 1) @[IglooScheduler.scala 225:48]
        node _T_101 = eq(acc, _T_100) @[IglooScheduler.scala 225:15]
        when _T_101 : @[IglooScheduler.scala 225:53]
          inputBufferPopReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          skip @[IglooScheduler.scala 225:53]
        node _T_104 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 228:54]
        node _T_105 = asUInt(_T_104) @[IglooScheduler.scala 228:54]
        node _T_106 = tail(_T_105, 1) @[IglooScheduler.scala 228:54]
        node _T_107 = eq(acc, _T_106) @[IglooScheduler.scala 228:21]
        node _T_109 = eq(_T_101, UInt<1>("h00")) @[IglooScheduler.scala 225:53]
        node _T_110 = and(_T_109, _T_107) @[IglooScheduler.scala 228:59]
        when _T_110 : @[IglooScheduler.scala 228:59]
          inputBufferPopReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 228:59]
        node _T_113 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 232:53]
        node _T_114 = asUInt(_T_113) @[IglooScheduler.scala 232:53]
        node _T_115 = tail(_T_114, 1) @[IglooScheduler.scala 232:53]
        node _T_116 = lt(substate, _T_115) @[IglooScheduler.scala 232:20]
        when _T_116 : @[IglooScheduler.scala 232:58]
          node _T_118 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 142:30]
          node _T_119 = tail(_T_118, 1) @[IglooScheduler.scala 142:30]
          substate <= _T_119 @[IglooScheduler.scala 142:20]
          accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 232:58]
        node _T_123 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 237:61]
        node _T_124 = asUInt(_T_123) @[IglooScheduler.scala 237:61]
        node _T_125 = tail(_T_124, 1) @[IglooScheduler.scala 237:61]
        node _T_126 = eq(substate, _T_125) @[IglooScheduler.scala 237:26]
        node _T_128 = eq(_T_116, UInt<1>("h00")) @[IglooScheduler.scala 232:58]
        node _T_129 = and(_T_128, _T_126) @[IglooScheduler.scala 237:66]
        when _T_129 : @[IglooScheduler.scala 237:66]
          inputBufferPushReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          state <= UInt<8>("h06") @[IglooScheduler.scala 140:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
          maxResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          meanBufferResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          maxOffsetReg <= UInt<1>("h00") @[IglooScheduler.scala 248:21]
          accEnReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 237:66]
        skip @[IglooScheduler.scala 214:20]
      node _T_138 = eq(state, UInt<8>("h06")) @[IglooScheduler.scala 138:25]
      when _T_138 : @[IglooScheduler.scala 253:18]
        node _T_140 = eq(reset, UInt<1>("h00")) @[IglooScheduler.scala 254:13]
        when _T_140 : @[IglooScheduler.scala 254:13]
          printf(clock, UInt<1>(1), "bn abmc: %d %d %d %d\n", hw.io.maa, hw.io.mab, hw.io.mam, hw.io.mac) @[IglooScheduler.scala 254:13]
          skip @[IglooScheduler.scala 254:13]
        node _T_142 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 257:27]
        node _T_143 = tail(_T_142, 1) @[IglooScheduler.scala 257:27]
        memOffset <= _T_143 @[IglooScheduler.scala 257:16]
        maxResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        meanBufferResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        node _T_147 = add(maxOffsetReg, UInt<2>("h02")) @[IglooScheduler.scala 262:33]
        node _T_148 = tail(_T_147, 1) @[IglooScheduler.scala 262:33]
        maxOffsetReg <= _T_148 @[IglooScheduler.scala 262:19]
        node _T_150 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 142:30]
        node _T_151 = tail(_T_150, 1) @[IglooScheduler.scala 142:30]
        substate <= _T_151 @[IglooScheduler.scala 142:20]
        node _T_153 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 264:54]
        node _T_154 = asUInt(_T_153) @[IglooScheduler.scala 264:54]
        node _T_155 = tail(_T_154, 1) @[IglooScheduler.scala 264:54]
        node _T_156 = eq(substate, _T_155) @[IglooScheduler.scala 264:20]
        when _T_156 : @[IglooScheduler.scala 264:59]
          when layerParams.io.lastLayer : @[IglooScheduler.scala 267:40]
            maxEnReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
            state <= UInt<8>("h01") @[IglooScheduler.scala 140:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
            skip @[IglooScheduler.scala 267:40]
          node _T_161 = eq(layerParams.io.lastLayer, UInt<1>("h00")) @[IglooScheduler.scala 267:40]
          when _T_161 : @[IglooScheduler.scala 271:11]
            layerParams.io.shift <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            meanUpdateReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
            accResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            state <= UInt<8>("h05") @[IglooScheduler.scala 140:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
            skip @[IglooScheduler.scala 271:11]
          skip @[IglooScheduler.scala 264:59]
        node _T_170 = eq(_T_156, UInt<1>("h00")) @[IglooScheduler.scala 264:59]
        when _T_170 : @[IglooScheduler.scala 286:9]
          accResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          accEnReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 286:9]
        skip @[IglooScheduler.scala 253:18]
      skip @[IglooScheduler.scala 167:15]
    
