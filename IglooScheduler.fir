;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-05-30 21:57:15.424, builtAtMillis: 1496181435424
circuit IglooScheduler : 
  module Memo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module AggregateMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<8>, flip waddr : UInt<8>, flip in : UInt<128>, out : UInt<128>, flip wen : UInt<1>, flip ren : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst Memo of Memo @[AggregateMem.scala 11:11]
    Memo.io is invalid
    Memo.clock <= clock
    Memo.reset <= reset
    inst Memo_1 of Memo_1 @[AggregateMem.scala 11:11]
    Memo_1.io is invalid
    Memo_1.clock <= clock
    Memo_1.reset <= reset
    inst Memo_2 of Memo_2 @[AggregateMem.scala 11:11]
    Memo_2.io is invalid
    Memo_2.clock <= clock
    Memo_2.reset <= reset
    inst Memo_3 of Memo_3 @[AggregateMem.scala 11:11]
    Memo_3.io is invalid
    Memo_3.clock <= clock
    Memo_3.reset <= reset
    inst Memo_4 of Memo_4 @[AggregateMem.scala 11:11]
    Memo_4.io is invalid
    Memo_4.clock <= clock
    Memo_4.reset <= reset
    inst Memo_5 of Memo_5 @[AggregateMem.scala 11:11]
    Memo_5.io is invalid
    Memo_5.clock <= clock
    Memo_5.reset <= reset
    inst Memo_6 of Memo_6 @[AggregateMem.scala 11:11]
    Memo_6.io is invalid
    Memo_6.clock <= clock
    Memo_6.reset <= reset
    inst Memo_7 of Memo_7 @[AggregateMem.scala 11:11]
    Memo_7.io is invalid
    Memo_7.clock <= clock
    Memo_7.reset <= reset
    Memo.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_1.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_1.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_1.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_1.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_2.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_2.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_2.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_2.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_3.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_3.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_3.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_3.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_4.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_4.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_4.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_4.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_5.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_5.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_5.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_5.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_6.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_6.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_6.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_6.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_7.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_7.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_7.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_7.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    node _T_9 = bits(io.in, 15, 0) @[AggregateMem.scala 40:88]
    node _T_10 = cat(UInt<2>("h00"), _T_9) @[Cat.scala 30:58]
    Memo.io.wrData <= _T_10 @[AggregateMem.scala 40:23]
    node _T_12 = bits(io.in, 31, 16) @[AggregateMem.scala 40:88]
    node _T_13 = cat(UInt<2>("h00"), _T_12) @[Cat.scala 30:58]
    Memo_1.io.wrData <= _T_13 @[AggregateMem.scala 40:23]
    node _T_15 = bits(io.in, 47, 32) @[AggregateMem.scala 40:88]
    node _T_16 = cat(UInt<2>("h00"), _T_15) @[Cat.scala 30:58]
    Memo_2.io.wrData <= _T_16 @[AggregateMem.scala 40:23]
    node _T_18 = bits(io.in, 63, 48) @[AggregateMem.scala 40:88]
    node _T_19 = cat(UInt<2>("h00"), _T_18) @[Cat.scala 30:58]
    Memo_3.io.wrData <= _T_19 @[AggregateMem.scala 40:23]
    node _T_21 = bits(io.in, 79, 64) @[AggregateMem.scala 40:88]
    node _T_22 = cat(UInt<2>("h00"), _T_21) @[Cat.scala 30:58]
    Memo_4.io.wrData <= _T_22 @[AggregateMem.scala 40:23]
    node _T_24 = bits(io.in, 95, 80) @[AggregateMem.scala 40:88]
    node _T_25 = cat(UInt<2>("h00"), _T_24) @[Cat.scala 30:58]
    Memo_5.io.wrData <= _T_25 @[AggregateMem.scala 40:23]
    node _T_27 = bits(io.in, 111, 96) @[AggregateMem.scala 40:88]
    node _T_28 = cat(UInt<2>("h00"), _T_27) @[Cat.scala 30:58]
    Memo_6.io.wrData <= _T_28 @[AggregateMem.scala 40:23]
    node _T_30 = bits(io.in, 127, 112) @[AggregateMem.scala 40:88]
    node _T_31 = cat(UInt<2>("h00"), _T_30) @[Cat.scala 30:58]
    Memo_7.io.wrData <= _T_31 @[AggregateMem.scala 40:23]
    node _T_32 = bits(Memo_7.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_33 = bits(Memo_6.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_34 = bits(Memo_5.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_35 = bits(Memo_4.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_36 = bits(Memo_3.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_37 = bits(Memo_2.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_38 = bits(Memo_1.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_39 = bits(Memo.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_40 = cat(_T_38, _T_39) @[Cat.scala 30:58]
    node _T_41 = cat(_T_36, _T_37) @[Cat.scala 30:58]
    node _T_42 = cat(_T_41, _T_40) @[Cat.scala 30:58]
    node _T_43 = cat(_T_34, _T_35) @[Cat.scala 30:58]
    node _T_44 = cat(_T_32, _T_33) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_42) @[Cat.scala 30:58]
    io.out <= _T_46 @[AggregateMem.scala 42:9]
    
  module BinaryBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip in : UInt<4>, flip fastin : UInt<128>, flip push : UInt<1>, flip fastpush : UInt<1>, out : UInt<32>, flip pop : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg wPos : UInt<6>, clock @[BinaryBuffer.scala 26:15]
    reg rPos : UInt<3>, clock @[BinaryBuffer.scala 27:15]
    reg mem : UInt<4>[64], clock @[BinaryBuffer.scala 29:14]
    node _T_80 = cat(mem[6], mem[7]) @[Cat.scala 30:58]
    node _T_81 = cat(mem[4], mem[5]) @[Cat.scala 30:58]
    node _T_82 = cat(_T_81, _T_80) @[Cat.scala 30:58]
    node _T_83 = cat(mem[2], mem[3]) @[Cat.scala 30:58]
    node _T_84 = cat(mem[0], mem[1]) @[Cat.scala 30:58]
    node _T_85 = cat(_T_84, _T_83) @[Cat.scala 30:58]
    node _T_86 = cat(_T_85, _T_82) @[Cat.scala 30:58]
    node _T_87 = cat(mem[14], mem[15]) @[Cat.scala 30:58]
    node _T_88 = cat(mem[12], mem[13]) @[Cat.scala 30:58]
    node _T_89 = cat(_T_88, _T_87) @[Cat.scala 30:58]
    node _T_90 = cat(mem[10], mem[11]) @[Cat.scala 30:58]
    node _T_91 = cat(mem[8], mem[9]) @[Cat.scala 30:58]
    node _T_92 = cat(_T_91, _T_90) @[Cat.scala 30:58]
    node _T_93 = cat(_T_92, _T_89) @[Cat.scala 30:58]
    node _T_94 = cat(mem[22], mem[23]) @[Cat.scala 30:58]
    node _T_95 = cat(mem[20], mem[21]) @[Cat.scala 30:58]
    node _T_96 = cat(_T_95, _T_94) @[Cat.scala 30:58]
    node _T_97 = cat(mem[18], mem[19]) @[Cat.scala 30:58]
    node _T_98 = cat(mem[16], mem[17]) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, _T_97) @[Cat.scala 30:58]
    node _T_100 = cat(_T_99, _T_96) @[Cat.scala 30:58]
    node _T_101 = cat(mem[30], mem[31]) @[Cat.scala 30:58]
    node _T_102 = cat(mem[28], mem[29]) @[Cat.scala 30:58]
    node _T_103 = cat(_T_102, _T_101) @[Cat.scala 30:58]
    node _T_104 = cat(mem[26], mem[27]) @[Cat.scala 30:58]
    node _T_105 = cat(mem[24], mem[25]) @[Cat.scala 30:58]
    node _T_106 = cat(_T_105, _T_104) @[Cat.scala 30:58]
    node _T_107 = cat(_T_106, _T_103) @[Cat.scala 30:58]
    node _T_108 = cat(mem[38], mem[39]) @[Cat.scala 30:58]
    node _T_109 = cat(mem[36], mem[37]) @[Cat.scala 30:58]
    node _T_110 = cat(_T_109, _T_108) @[Cat.scala 30:58]
    node _T_111 = cat(mem[34], mem[35]) @[Cat.scala 30:58]
    node _T_112 = cat(mem[32], mem[33]) @[Cat.scala 30:58]
    node _T_113 = cat(_T_112, _T_111) @[Cat.scala 30:58]
    node _T_114 = cat(_T_113, _T_110) @[Cat.scala 30:58]
    node _T_115 = cat(mem[46], mem[47]) @[Cat.scala 30:58]
    node _T_116 = cat(mem[44], mem[45]) @[Cat.scala 30:58]
    node _T_117 = cat(_T_116, _T_115) @[Cat.scala 30:58]
    node _T_118 = cat(mem[42], mem[43]) @[Cat.scala 30:58]
    node _T_119 = cat(mem[40], mem[41]) @[Cat.scala 30:58]
    node _T_120 = cat(_T_119, _T_118) @[Cat.scala 30:58]
    node _T_121 = cat(_T_120, _T_117) @[Cat.scala 30:58]
    node _T_122 = cat(mem[54], mem[55]) @[Cat.scala 30:58]
    node _T_123 = cat(mem[52], mem[53]) @[Cat.scala 30:58]
    node _T_124 = cat(_T_123, _T_122) @[Cat.scala 30:58]
    node _T_125 = cat(mem[50], mem[51]) @[Cat.scala 30:58]
    node _T_126 = cat(mem[48], mem[49]) @[Cat.scala 30:58]
    node _T_127 = cat(_T_126, _T_125) @[Cat.scala 30:58]
    node _T_128 = cat(_T_127, _T_124) @[Cat.scala 30:58]
    node _T_129 = cat(mem[62], mem[63]) @[Cat.scala 30:58]
    node _T_130 = cat(mem[60], mem[61]) @[Cat.scala 30:58]
    node _T_131 = cat(_T_130, _T_129) @[Cat.scala 30:58]
    node _T_132 = cat(mem[58], mem[59]) @[Cat.scala 30:58]
    node _T_133 = cat(mem[56], mem[57]) @[Cat.scala 30:58]
    node _T_134 = cat(_T_133, _T_132) @[Cat.scala 30:58]
    node _T_135 = cat(_T_134, _T_131) @[Cat.scala 30:58]
    wire catMem : UInt<32>[8] @[BinaryBuffer.scala 30:17]
    catMem is invalid @[BinaryBuffer.scala 30:17]
    catMem[0] <= _T_86 @[BinaryBuffer.scala 30:17]
    catMem[1] <= _T_93 @[BinaryBuffer.scala 30:17]
    catMem[2] <= _T_100 @[BinaryBuffer.scala 30:17]
    catMem[3] <= _T_107 @[BinaryBuffer.scala 30:17]
    catMem[4] <= _T_114 @[BinaryBuffer.scala 30:17]
    catMem[5] <= _T_121 @[BinaryBuffer.scala 30:17]
    catMem[6] <= _T_128 @[BinaryBuffer.scala 30:17]
    catMem[7] <= _T_135 @[BinaryBuffer.scala 30:17]
    node _T_149 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 32:23]
    node _T_150 = and(io.fastpush, _T_149) @[BinaryBuffer.scala 32:20]
    when _T_150 : @[BinaryBuffer.scala 32:35]
      node _T_152 = add(wPos, UInt<1>("h00")) @[BinaryBuffer.scala 34:15]
      node _T_153 = tail(_T_152, 1) @[BinaryBuffer.scala 34:15]
      node _T_155 = bits(io.fastin, 127, 124) @[BinaryBuffer.scala 34:31]
      mem[_T_153] <= _T_155 @[BinaryBuffer.scala 34:20]
      node _T_157 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 34:15]
      node _T_158 = tail(_T_157, 1) @[BinaryBuffer.scala 34:15]
      node _T_160 = bits(io.fastin, 123, 120) @[BinaryBuffer.scala 34:31]
      mem[_T_158] <= _T_160 @[BinaryBuffer.scala 34:20]
      node _T_162 = add(wPos, UInt<2>("h02")) @[BinaryBuffer.scala 34:15]
      node _T_163 = tail(_T_162, 1) @[BinaryBuffer.scala 34:15]
      node _T_165 = bits(io.fastin, 119, 116) @[BinaryBuffer.scala 34:31]
      mem[_T_163] <= _T_165 @[BinaryBuffer.scala 34:20]
      node _T_167 = add(wPos, UInt<2>("h03")) @[BinaryBuffer.scala 34:15]
      node _T_168 = tail(_T_167, 1) @[BinaryBuffer.scala 34:15]
      node _T_170 = bits(io.fastin, 115, 112) @[BinaryBuffer.scala 34:31]
      mem[_T_168] <= _T_170 @[BinaryBuffer.scala 34:20]
      node _T_172 = add(wPos, UInt<3>("h04")) @[BinaryBuffer.scala 34:15]
      node _T_173 = tail(_T_172, 1) @[BinaryBuffer.scala 34:15]
      node _T_175 = bits(io.fastin, 111, 108) @[BinaryBuffer.scala 34:31]
      mem[_T_173] <= _T_175 @[BinaryBuffer.scala 34:20]
      node _T_177 = add(wPos, UInt<3>("h05")) @[BinaryBuffer.scala 34:15]
      node _T_178 = tail(_T_177, 1) @[BinaryBuffer.scala 34:15]
      node _T_180 = bits(io.fastin, 107, 104) @[BinaryBuffer.scala 34:31]
      mem[_T_178] <= _T_180 @[BinaryBuffer.scala 34:20]
      node _T_182 = add(wPos, UInt<3>("h06")) @[BinaryBuffer.scala 34:15]
      node _T_183 = tail(_T_182, 1) @[BinaryBuffer.scala 34:15]
      node _T_185 = bits(io.fastin, 103, 100) @[BinaryBuffer.scala 34:31]
      mem[_T_183] <= _T_185 @[BinaryBuffer.scala 34:20]
      node _T_187 = add(wPos, UInt<3>("h07")) @[BinaryBuffer.scala 34:15]
      node _T_188 = tail(_T_187, 1) @[BinaryBuffer.scala 34:15]
      node _T_190 = bits(io.fastin, 99, 96) @[BinaryBuffer.scala 34:31]
      mem[_T_188] <= _T_190 @[BinaryBuffer.scala 34:20]
      node _T_192 = add(wPos, UInt<4>("h08")) @[BinaryBuffer.scala 34:15]
      node _T_193 = tail(_T_192, 1) @[BinaryBuffer.scala 34:15]
      node _T_195 = bits(io.fastin, 95, 92) @[BinaryBuffer.scala 34:31]
      mem[_T_193] <= _T_195 @[BinaryBuffer.scala 34:20]
      node _T_197 = add(wPos, UInt<4>("h09")) @[BinaryBuffer.scala 34:15]
      node _T_198 = tail(_T_197, 1) @[BinaryBuffer.scala 34:15]
      node _T_200 = bits(io.fastin, 91, 88) @[BinaryBuffer.scala 34:31]
      mem[_T_198] <= _T_200 @[BinaryBuffer.scala 34:20]
      node _T_202 = add(wPos, UInt<4>("h0a")) @[BinaryBuffer.scala 34:15]
      node _T_203 = tail(_T_202, 1) @[BinaryBuffer.scala 34:15]
      node _T_205 = bits(io.fastin, 87, 84) @[BinaryBuffer.scala 34:31]
      mem[_T_203] <= _T_205 @[BinaryBuffer.scala 34:20]
      node _T_207 = add(wPos, UInt<4>("h0b")) @[BinaryBuffer.scala 34:15]
      node _T_208 = tail(_T_207, 1) @[BinaryBuffer.scala 34:15]
      node _T_210 = bits(io.fastin, 83, 80) @[BinaryBuffer.scala 34:31]
      mem[_T_208] <= _T_210 @[BinaryBuffer.scala 34:20]
      node _T_212 = add(wPos, UInt<4>("h0c")) @[BinaryBuffer.scala 34:15]
      node _T_213 = tail(_T_212, 1) @[BinaryBuffer.scala 34:15]
      node _T_215 = bits(io.fastin, 79, 76) @[BinaryBuffer.scala 34:31]
      mem[_T_213] <= _T_215 @[BinaryBuffer.scala 34:20]
      node _T_217 = add(wPos, UInt<4>("h0d")) @[BinaryBuffer.scala 34:15]
      node _T_218 = tail(_T_217, 1) @[BinaryBuffer.scala 34:15]
      node _T_220 = bits(io.fastin, 75, 72) @[BinaryBuffer.scala 34:31]
      mem[_T_218] <= _T_220 @[BinaryBuffer.scala 34:20]
      node _T_222 = add(wPos, UInt<4>("h0e")) @[BinaryBuffer.scala 34:15]
      node _T_223 = tail(_T_222, 1) @[BinaryBuffer.scala 34:15]
      node _T_225 = bits(io.fastin, 71, 68) @[BinaryBuffer.scala 34:31]
      mem[_T_223] <= _T_225 @[BinaryBuffer.scala 34:20]
      node _T_227 = add(wPos, UInt<4>("h0f")) @[BinaryBuffer.scala 34:15]
      node _T_228 = tail(_T_227, 1) @[BinaryBuffer.scala 34:15]
      node _T_230 = bits(io.fastin, 67, 64) @[BinaryBuffer.scala 34:31]
      mem[_T_228] <= _T_230 @[BinaryBuffer.scala 34:20]
      node _T_232 = add(wPos, UInt<5>("h010")) @[BinaryBuffer.scala 34:15]
      node _T_233 = tail(_T_232, 1) @[BinaryBuffer.scala 34:15]
      node _T_235 = bits(io.fastin, 63, 60) @[BinaryBuffer.scala 34:31]
      mem[_T_233] <= _T_235 @[BinaryBuffer.scala 34:20]
      node _T_237 = add(wPos, UInt<5>("h011")) @[BinaryBuffer.scala 34:15]
      node _T_238 = tail(_T_237, 1) @[BinaryBuffer.scala 34:15]
      node _T_240 = bits(io.fastin, 59, 56) @[BinaryBuffer.scala 34:31]
      mem[_T_238] <= _T_240 @[BinaryBuffer.scala 34:20]
      node _T_242 = add(wPos, UInt<5>("h012")) @[BinaryBuffer.scala 34:15]
      node _T_243 = tail(_T_242, 1) @[BinaryBuffer.scala 34:15]
      node _T_245 = bits(io.fastin, 55, 52) @[BinaryBuffer.scala 34:31]
      mem[_T_243] <= _T_245 @[BinaryBuffer.scala 34:20]
      node _T_247 = add(wPos, UInt<5>("h013")) @[BinaryBuffer.scala 34:15]
      node _T_248 = tail(_T_247, 1) @[BinaryBuffer.scala 34:15]
      node _T_250 = bits(io.fastin, 51, 48) @[BinaryBuffer.scala 34:31]
      mem[_T_248] <= _T_250 @[BinaryBuffer.scala 34:20]
      node _T_252 = add(wPos, UInt<5>("h014")) @[BinaryBuffer.scala 34:15]
      node _T_253 = tail(_T_252, 1) @[BinaryBuffer.scala 34:15]
      node _T_255 = bits(io.fastin, 47, 44) @[BinaryBuffer.scala 34:31]
      mem[_T_253] <= _T_255 @[BinaryBuffer.scala 34:20]
      node _T_257 = add(wPos, UInt<5>("h015")) @[BinaryBuffer.scala 34:15]
      node _T_258 = tail(_T_257, 1) @[BinaryBuffer.scala 34:15]
      node _T_260 = bits(io.fastin, 43, 40) @[BinaryBuffer.scala 34:31]
      mem[_T_258] <= _T_260 @[BinaryBuffer.scala 34:20]
      node _T_262 = add(wPos, UInt<5>("h016")) @[BinaryBuffer.scala 34:15]
      node _T_263 = tail(_T_262, 1) @[BinaryBuffer.scala 34:15]
      node _T_265 = bits(io.fastin, 39, 36) @[BinaryBuffer.scala 34:31]
      mem[_T_263] <= _T_265 @[BinaryBuffer.scala 34:20]
      node _T_267 = add(wPos, UInt<5>("h017")) @[BinaryBuffer.scala 34:15]
      node _T_268 = tail(_T_267, 1) @[BinaryBuffer.scala 34:15]
      node _T_270 = bits(io.fastin, 35, 32) @[BinaryBuffer.scala 34:31]
      mem[_T_268] <= _T_270 @[BinaryBuffer.scala 34:20]
      node _T_272 = add(wPos, UInt<5>("h018")) @[BinaryBuffer.scala 34:15]
      node _T_273 = tail(_T_272, 1) @[BinaryBuffer.scala 34:15]
      node _T_275 = bits(io.fastin, 31, 28) @[BinaryBuffer.scala 34:31]
      mem[_T_273] <= _T_275 @[BinaryBuffer.scala 34:20]
      node _T_277 = add(wPos, UInt<5>("h019")) @[BinaryBuffer.scala 34:15]
      node _T_278 = tail(_T_277, 1) @[BinaryBuffer.scala 34:15]
      node _T_280 = bits(io.fastin, 27, 24) @[BinaryBuffer.scala 34:31]
      mem[_T_278] <= _T_280 @[BinaryBuffer.scala 34:20]
      node _T_282 = add(wPos, UInt<5>("h01a")) @[BinaryBuffer.scala 34:15]
      node _T_283 = tail(_T_282, 1) @[BinaryBuffer.scala 34:15]
      node _T_285 = bits(io.fastin, 23, 20) @[BinaryBuffer.scala 34:31]
      mem[_T_283] <= _T_285 @[BinaryBuffer.scala 34:20]
      node _T_287 = add(wPos, UInt<5>("h01b")) @[BinaryBuffer.scala 34:15]
      node _T_288 = tail(_T_287, 1) @[BinaryBuffer.scala 34:15]
      node _T_290 = bits(io.fastin, 19, 16) @[BinaryBuffer.scala 34:31]
      mem[_T_288] <= _T_290 @[BinaryBuffer.scala 34:20]
      node _T_292 = add(wPos, UInt<5>("h01c")) @[BinaryBuffer.scala 34:15]
      node _T_293 = tail(_T_292, 1) @[BinaryBuffer.scala 34:15]
      node _T_295 = bits(io.fastin, 15, 12) @[BinaryBuffer.scala 34:31]
      mem[_T_293] <= _T_295 @[BinaryBuffer.scala 34:20]
      node _T_297 = add(wPos, UInt<5>("h01d")) @[BinaryBuffer.scala 34:15]
      node _T_298 = tail(_T_297, 1) @[BinaryBuffer.scala 34:15]
      node _T_300 = bits(io.fastin, 11, 8) @[BinaryBuffer.scala 34:31]
      mem[_T_298] <= _T_300 @[BinaryBuffer.scala 34:20]
      node _T_302 = add(wPos, UInt<5>("h01e")) @[BinaryBuffer.scala 34:15]
      node _T_303 = tail(_T_302, 1) @[BinaryBuffer.scala 34:15]
      node _T_305 = bits(io.fastin, 7, 4) @[BinaryBuffer.scala 34:31]
      mem[_T_303] <= _T_305 @[BinaryBuffer.scala 34:20]
      node _T_307 = add(wPos, UInt<5>("h01f")) @[BinaryBuffer.scala 34:15]
      node _T_308 = tail(_T_307, 1) @[BinaryBuffer.scala 34:15]
      node _T_310 = bits(io.fastin, 3, 0) @[BinaryBuffer.scala 34:31]
      mem[_T_308] <= _T_310 @[BinaryBuffer.scala 34:20]
      node _T_312 = add(wPos, UInt<6>("h020")) @[BinaryBuffer.scala 36:15]
      node _T_313 = tail(_T_312, 1) @[BinaryBuffer.scala 36:15]
      wPos <= _T_313 @[BinaryBuffer.scala 36:9]
      skip @[BinaryBuffer.scala 32:35]
    node _T_315 = eq(_T_150, UInt<1>("h00")) @[BinaryBuffer.scala 32:35]
    when _T_315 : @[BinaryBuffer.scala 37:5]
      when io.push : @[BinaryBuffer.scala 38:19]
        node _T_317 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 39:12]
        when _T_317 : @[BinaryBuffer.scala 39:25]
          mem[wPos] <= io.in @[BinaryBuffer.scala 40:19]
          node _T_320 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 41:22]
          node _T_321 = tail(_T_320, 1) @[BinaryBuffer.scala 41:22]
          wPos <= _T_321 @[BinaryBuffer.scala 41:14]
          skip @[BinaryBuffer.scala 39:25]
        node _T_323 = eq(_T_317, UInt<1>("h00")) @[BinaryBuffer.scala 39:25]
        when _T_323 : @[BinaryBuffer.scala 42:9]
          mem[0] <= io.in @[BinaryBuffer.scala 43:16]
          wPos <= UInt<1>("h01") @[BinaryBuffer.scala 44:14]
          rPos <= UInt<1>("h00") @[BinaryBuffer.scala 45:14]
          skip @[BinaryBuffer.scala 42:9]
        skip @[BinaryBuffer.scala 38:19]
      when io.pop : @[BinaryBuffer.scala 49:18]
        node _T_327 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 50:12]
        when _T_327 : @[BinaryBuffer.scala 50:25]
          node _T_329 = add(rPos, UInt<1>("h01")) @[BinaryBuffer.scala 51:22]
          node _T_330 = tail(_T_329, 1) @[BinaryBuffer.scala 51:22]
          rPos <= _T_330 @[BinaryBuffer.scala 51:14]
          skip @[BinaryBuffer.scala 50:25]
        node _T_332 = eq(_T_327, UInt<1>("h00")) @[BinaryBuffer.scala 50:25]
        when _T_332 : @[BinaryBuffer.scala 52:9]
          rPos <= UInt<1>("h01") @[BinaryBuffer.scala 53:14]
          wPos <= UInt<1>("h00") @[BinaryBuffer.scala 54:14]
          skip @[BinaryBuffer.scala 52:9]
        skip @[BinaryBuffer.scala 49:18]
      skip @[BinaryBuffer.scala 37:5]
    node _T_336 = eq(io.pop, UInt<1>("h00")) @[BinaryBuffer.scala 58:20]
    node _T_337 = and(io.reset, _T_336) @[BinaryBuffer.scala 58:17]
    node _T_339 = eq(io.push, UInt<1>("h00")) @[BinaryBuffer.scala 58:33]
    node _T_340 = and(_T_337, _T_339) @[BinaryBuffer.scala 58:30]
    when _T_340 : @[BinaryBuffer.scala 58:44]
      wPos <= UInt<1>("h00") @[BinaryBuffer.scala 59:9]
      rPos <= UInt<1>("h00") @[BinaryBuffer.scala 60:9]
      skip @[BinaryBuffer.scala 58:44]
    io.out <= catMem[rPos] @[BinaryBuffer.scala 63:9]
    
  module XNOR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<32>, flip in2 : UInt<32>[4], out : UInt<32>[4]}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_21 = xor(io.in1, io.in2[0]) @[XNOR.scala 18:27]
    node _T_22 = not(_T_21) @[XNOR.scala 18:18]
    io.out[0] <= _T_22 @[XNOR.scala 18:15]
    node _T_23 = xor(io.in1, io.in2[1]) @[XNOR.scala 18:27]
    node _T_24 = not(_T_23) @[XNOR.scala 18:18]
    io.out[1] <= _T_24 @[XNOR.scala 18:15]
    node _T_25 = xor(io.in1, io.in2[2]) @[XNOR.scala 18:27]
    node _T_26 = not(_T_25) @[XNOR.scala 18:18]
    io.out[2] <= _T_26 @[XNOR.scala 18:15]
    node _T_27 = xor(io.in1, io.in2[3]) @[XNOR.scala 18:27]
    node _T_28 = not(_T_27) @[XNOR.scala 18:18]
    io.out[3] <= _T_28 @[XNOR.scala 18:15]
    
  module MeanBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>[4], flip cntInverse65536 : UInt<16>, flip reset : UInt<1>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg acc : UInt<32>, clock @[MeanBuffer.scala 19:16]
    reg result : UInt<32>, clock @[MeanBuffer.scala 20:17]
    io.out <= result @[MeanBuffer.scala 21:9]
    node _T_17 = gt(io.in[0], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_19 = sub(asSInt(UInt<1>("h00")), io.in[0]) @[MeanBuffer.scala 17:42]
    node _T_20 = tail(_T_19, 1) @[MeanBuffer.scala 17:42]
    node _T_21 = asSInt(_T_20) @[MeanBuffer.scala 17:42]
    node _T_22 = mux(_T_17, io.in[0], _T_21) @[MeanBuffer.scala 17:25]
    node _T_23 = asUInt(_T_22) @[MeanBuffer.scala 17:53]
    node _T_25 = gt(io.in[1], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_27 = sub(asSInt(UInt<1>("h00")), io.in[1]) @[MeanBuffer.scala 17:42]
    node _T_28 = tail(_T_27, 1) @[MeanBuffer.scala 17:42]
    node _T_29 = asSInt(_T_28) @[MeanBuffer.scala 17:42]
    node _T_30 = mux(_T_25, io.in[1], _T_29) @[MeanBuffer.scala 17:25]
    node _T_31 = asUInt(_T_30) @[MeanBuffer.scala 17:53]
    node _T_33 = gt(io.in[2], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_35 = sub(asSInt(UInt<1>("h00")), io.in[2]) @[MeanBuffer.scala 17:42]
    node _T_36 = tail(_T_35, 1) @[MeanBuffer.scala 17:42]
    node _T_37 = asSInt(_T_36) @[MeanBuffer.scala 17:42]
    node _T_38 = mux(_T_33, io.in[2], _T_37) @[MeanBuffer.scala 17:25]
    node _T_39 = asUInt(_T_38) @[MeanBuffer.scala 17:53]
    node _T_41 = gt(io.in[3], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_43 = sub(asSInt(UInt<1>("h00")), io.in[3]) @[MeanBuffer.scala 17:42]
    node _T_44 = tail(_T_43, 1) @[MeanBuffer.scala 17:42]
    node _T_45 = asSInt(_T_44) @[MeanBuffer.scala 17:42]
    node _T_46 = mux(_T_41, io.in[3], _T_45) @[MeanBuffer.scala 17:25]
    node _T_47 = asUInt(_T_46) @[MeanBuffer.scala 17:53]
    node _T_48 = add(_T_23, _T_31) @[ArraySum.scala 13:14]
    node _T_49 = tail(_T_48, 1) @[ArraySum.scala 13:14]
    node _T_50 = add(_T_39, _T_47) @[ArraySum.scala 13:14]
    node _T_51 = tail(_T_50, 1) @[ArraySum.scala 13:14]
    node _T_52 = add(_T_49, _T_51) @[ArraySum.scala 13:14]
    node absSum = tail(_T_52, 1) @[ArraySum.scala 13:14]
    node _T_54 = eq(io.reset, UInt<1>("h00")) @[MeanBuffer.scala 24:8]
    when _T_54 : @[MeanBuffer.scala 24:21]
      node _T_55 = add(acc, absSum) @[MeanBuffer.scala 27:16]
      node _T_56 = tail(_T_55, 1) @[MeanBuffer.scala 27:16]
      acc <= _T_56 @[MeanBuffer.scala 27:9]
      node _T_57 = add(acc, absSum) @[MeanBuffer.scala 28:20]
      node _T_58 = tail(_T_57, 1) @[MeanBuffer.scala 28:20]
      node _T_59 = mul(_T_58, io.cntInverse65536) @[MeanBuffer.scala 28:29]
      node _T_60 = shr(_T_59, 16) @[MeanBuffer.scala 28:50]
      result <= _T_60 @[MeanBuffer.scala 28:12]
      skip @[MeanBuffer.scala 24:21]
    node _T_62 = eq(_T_54, UInt<1>("h00")) @[MeanBuffer.scala 24:21]
    when _T_62 : @[MeanBuffer.scala 29:5]
      acc <= absSum @[MeanBuffer.scala 32:9]
      node _T_63 = mul(absSum, io.cntInverse65536) @[MeanBuffer.scala 33:23]
      node _T_64 = shr(_T_63, 16) @[MeanBuffer.scala 33:44]
      result <= _T_64 @[MeanBuffer.scala 33:12]
      skip @[MeanBuffer.scala 29:5]
    
  module DelayedOutput : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip input : UInt<32>, flip update : UInt<1>, output : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg reg : UInt<32>, clock @[DelayedOutput.scala 17:14]
    io.output <= reg @[DelayedOutput.scala 18:12]
    when io.reset : @[DelayedOutput.scala 19:18]
      reg <= UInt<32>("h01") @[DelayedOutput.scala 20:8]
      node _T_9 = eq(reset, UInt<1>("h00")) @[DelayedOutput.scala 21:11]
      when _T_9 : @[DelayedOutput.scala 21:11]
        printf(clock, UInt<1>(1), "Delay reset! %d\n", reg) @[DelayedOutput.scala 21:11]
        skip @[DelayedOutput.scala 21:11]
      skip @[DelayedOutput.scala 19:18]
    node _T_11 = eq(io.reset, UInt<1>("h00")) @[DelayedOutput.scala 19:18]
    node _T_12 = and(_T_11, io.update) @[DelayedOutput.scala 22:24]
    when _T_12 : @[DelayedOutput.scala 22:24]
      node _T_14 = eq(reset, UInt<1>("h00")) @[DelayedOutput.scala 23:11]
      when _T_14 : @[DelayedOutput.scala 23:11]
        printf(clock, UInt<1>(1), "Delay Update! %d\n", io.input) @[DelayedOutput.scala 23:11]
        skip @[DelayedOutput.scala 23:11]
      reg <= io.input @[DelayedOutput.scala 24:8]
      skip @[DelayedOutput.scala 22:24]
    
  module MaxBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip en : UInt<1>, flip in : SInt<32>[4], flip offset : UInt<4>, out : UInt<4>, flip maxLen : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg idxReg : UInt<4>, clock @[MaxBuffer.scala 19:17]
    reg dataReg : SInt<32>, clock @[MaxBuffer.scala 20:18]
    io.out <= idxReg @[MaxBuffer.scala 22:9]
    node _T_19 = add(UInt<1>("h00"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_20 = tail(_T_19, 1) @[MaxBuffer.scala 33:56]
    node _T_22 = add(UInt<1>("h01"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_23 = tail(_T_22, 1) @[MaxBuffer.scala 33:56]
    node _T_25 = add(UInt<2>("h02"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_26 = tail(_T_25, 1) @[MaxBuffer.scala 33:56]
    node _T_28 = add(UInt<2>("h03"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_29 = tail(_T_28, 1) @[MaxBuffer.scala 33:56]
    node _T_30 = gt(io.in[0], io.in[1]) @[MaxBuffer.scala 28:28]
    node _T_31 = geq(_T_23, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_32 = or(_T_30, _T_31) @[MaxBuffer.scala 28:43]
    node _T_33 = mux(_T_32, _T_20, _T_23) @[MaxBuffer.scala 29:13]
    node _T_34 = mux(_T_32, io.in[0], io.in[1]) @[MaxBuffer.scala 29:47]
    node _T_35 = gt(io.in[2], io.in[3]) @[MaxBuffer.scala 28:28]
    node _T_36 = geq(_T_29, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_37 = or(_T_35, _T_36) @[MaxBuffer.scala 28:43]
    node _T_38 = mux(_T_37, _T_26, _T_29) @[MaxBuffer.scala 29:13]
    node _T_39 = mux(_T_37, io.in[2], io.in[3]) @[MaxBuffer.scala 29:47]
    node _T_40 = gt(_T_34, _T_39) @[MaxBuffer.scala 28:28]
    node _T_41 = geq(_T_38, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_42 = or(_T_40, _T_41) @[MaxBuffer.scala 28:43]
    node _T_43 = mux(_T_42, _T_33, _T_38) @[MaxBuffer.scala 29:13]
    node _T_44 = mux(_T_42, _T_34, _T_39) @[MaxBuffer.scala 29:47]
    node cmp2 = gt(dataReg, _T_44) @[MaxBuffer.scala 35:20]
    when io.en : @[MaxBuffer.scala 37:15]
      node _T_46 = eq(io.reset, UInt<1>("h00")) @[MaxBuffer.scala 38:10]
      when _T_46 : @[MaxBuffer.scala 38:23]
        node _T_47 = mux(cmp2, dataReg, _T_44) @[MaxBuffer.scala 39:21]
        dataReg <= _T_47 @[MaxBuffer.scala 39:15]
        node _T_48 = mux(cmp2, idxReg, _T_43) @[MaxBuffer.scala 40:19]
        idxReg <= _T_48 @[MaxBuffer.scala 40:14]
        skip @[MaxBuffer.scala 38:23]
      node _T_50 = eq(_T_46, UInt<1>("h00")) @[MaxBuffer.scala 38:23]
      when _T_50 : @[MaxBuffer.scala 41:7]
        dataReg <= _T_44 @[MaxBuffer.scala 42:15]
        idxReg <= _T_43 @[MaxBuffer.scala 43:13]
        skip @[MaxBuffer.scala 41:7]
      skip @[MaxBuffer.scala 37:15]
    
  module Accumulator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<10>, out : SInt<10>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<10>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<10>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<10>, out : SInt<10>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<10>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<10>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<10>, out : SInt<10>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<10>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<10>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<10>, out : SInt<10>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<10>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<10>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module XNORNetInference : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<128>, flip inputPush : UInt<1>, flip inputBufferPush : UInt<1>, flip inputBufferPop : UInt<1>, flip inputBufferReset : UInt<1>, flip memAddr : UInt<8>, memOut : UInt<128>, flip memWen : UInt<1>, flip memIn : UInt<128>, flip memWAddr : UInt<8>, flip accEn : UInt<1>, flip accSel : UInt<5>, flip accReset : UInt<1>, flip maxReset : UInt<1>, flip maxEn : UInt<1>, flip maxOffset : UInt<4>, flip featureNumInverse65536 : UInt<16>, flip actualFeatureNum : UInt<16>, flip meanReset : UInt<1>, flip meanUpdate : UInt<1>, flip meanBufferReset : UInt<1>, result : UInt<4>, mean : UInt<32>, xnorInput : UInt<32>, xnorWeight1 : UInt<32>, maa : SInt<16>, mab : SInt<16>, mam : UInt<32>, mac : SInt<16>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst mem of AggregateMem @[XNORNetInference.scala 24:17]
    mem.io is invalid
    mem.clock <= clock
    mem.reset <= reset
    mem.io.addr <= io.memAddr @[XNORNetInference.scala 72:14]
    io.memOut <= mem.io.out @[XNORNetInference.scala 73:12]
    mem.io.ren <= UInt<1>("h01") @[XNORNetInference.scala 74:13]
    mem.io.wen <= io.memWen @[XNORNetInference.scala 75:13]
    mem.io.in <= io.memIn @[XNORNetInference.scala 76:12]
    mem.io.waddr <= io.memWAddr @[XNORNetInference.scala 77:15]
    wire inputWire : UInt<4> @[XNORNetInference.scala 79:21]
    inputWire is invalid @[XNORNetInference.scala 79:21]
    inst binaryBuffer of BinaryBuffer @[XNORNetInference.scala 81:26]
    binaryBuffer.io is invalid
    binaryBuffer.clock <= clock
    binaryBuffer.reset <= reset
    binaryBuffer.io.in <= inputWire @[XNORNetInference.scala 86:21]
    binaryBuffer.io.push <= io.inputBufferPush @[XNORNetInference.scala 87:23]
    binaryBuffer.io.pop <= io.inputBufferPop @[XNORNetInference.scala 88:22]
    binaryBuffer.io.reset <= io.inputBufferReset @[XNORNetInference.scala 89:24]
    binaryBuffer.io.fastpush <= io.inputPush @[XNORNetInference.scala 90:27]
    binaryBuffer.io.fastin <= io.input @[XNORNetInference.scala 91:25]
    inst xnor of XNOR @[XNORNetInference.scala 95:18]
    xnor.io is invalid
    xnor.clock <= clock
    xnor.reset <= reset
    xnor.io.in1 <= binaryBuffer.io.out @[XNORNetInference.scala 98:14]
    node _T_33 = bits(mem.io.out, 127, 0) @[XNORNetInference.scala 100:26]
    wire _T_44 : UInt<32>[4] @[XNORNetInference.scala 100:47]
    _T_44 is invalid @[XNORNetInference.scala 100:47]
    wire _T_57 : UInt<128>
    _T_57 is invalid
    _T_57 <= _T_33
    node _T_58 = bits(_T_57, 31, 0) @[XNORNetInference.scala 100:47]
    _T_44[0] <= _T_58 @[XNORNetInference.scala 100:47]
    node _T_59 = bits(_T_57, 63, 32) @[XNORNetInference.scala 100:47]
    _T_44[1] <= _T_59 @[XNORNetInference.scala 100:47]
    node _T_60 = bits(_T_57, 95, 64) @[XNORNetInference.scala 100:47]
    _T_44[2] <= _T_60 @[XNORNetInference.scala 100:47]
    node _T_61 = bits(_T_57, 127, 96) @[XNORNetInference.scala 100:47]
    _T_44[3] <= _T_61 @[XNORNetInference.scala 100:47]
    xnor.io.in2[0] <= _T_44[0] @[XNORNetInference.scala 100:14]
    xnor.io.in2[1] <= _T_44[1] @[XNORNetInference.scala 100:14]
    xnor.io.in2[2] <= _T_44[2] @[XNORNetInference.scala 100:14]
    xnor.io.in2[3] <= _T_44[3] @[XNORNetInference.scala 100:14]
    inst meanBuffer of MeanBuffer @[XNORNetInference.scala 105:24]
    meanBuffer.io is invalid
    meanBuffer.clock <= clock
    meanBuffer.reset <= reset
    inst mean of DelayedOutput @[XNORNetInference.scala 112:18]
    mean.io is invalid
    mean.clock <= clock
    mean.reset <= reset
    mean.io.update <= io.meanUpdate @[XNORNetInference.scala 113:17]
    mean.io.reset <= io.meanReset @[XNORNetInference.scala 114:16]
    mean.io.input <= meanBuffer.io.out @[XNORNetInference.scala 115:16]
    io.mean <= mean.io.output @[XNORNetInference.scala 117:10]
    inst maxModule of MaxBuffer @[XNORNetInference.scala 121:23]
    maxModule.io is invalid
    maxModule.clock <= clock
    maxModule.reset <= reset
    maxModule.io.en <= io.maxEn @[XNORNetInference.scala 125:18]
    maxModule.io.reset <= io.maxReset @[XNORNetInference.scala 126:21]
    maxModule.io.offset <= io.maxOffset @[XNORNetInference.scala 127:22]
    maxModule.io.maxLen <= io.actualFeatureNum @[XNORNetInference.scala 128:22]
    io.result <= maxModule.io.out @[XNORNetInference.scala 129:12]
    inst Accumulator of Accumulator @[XNORNetInference.scala 134:21]
    Accumulator.io is invalid
    Accumulator.clock <= clock
    Accumulator.reset <= reset
    node _T_62 = bits(xnor.io.out[3], 3, 0) @[BitSum.scala 31:51]
    node _T_63 = bits(xnor.io.out[3], 7, 4) @[BitSum.scala 31:51]
    node _T_64 = bits(xnor.io.out[3], 11, 8) @[BitSum.scala 31:51]
    node _T_65 = bits(xnor.io.out[3], 15, 12) @[BitSum.scala 31:51]
    node _T_66 = bits(xnor.io.out[3], 19, 16) @[BitSum.scala 31:51]
    node _T_67 = bits(xnor.io.out[3], 23, 20) @[BitSum.scala 31:51]
    node _T_68 = bits(xnor.io.out[3], 27, 24) @[BitSum.scala 31:51]
    node _T_69 = bits(xnor.io.out[3], 31, 28) @[BitSum.scala 31:51]
    reg _T_72 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_75 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_78 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_81 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_84 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_87 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_90 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_93 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_96 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_99 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_102 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_105 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_108 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_111 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_114 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_117 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_120 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_120 is invalid @[BitSum.scala 11:24]
    _T_120[0] <= _T_72 @[BitSum.scala 11:24]
    _T_120[1] <= _T_75 @[BitSum.scala 11:24]
    _T_120[2] <= _T_78 @[BitSum.scala 11:24]
    _T_120[3] <= _T_81 @[BitSum.scala 11:24]
    _T_120[4] <= _T_84 @[BitSum.scala 11:24]
    _T_120[5] <= _T_87 @[BitSum.scala 11:24]
    _T_120[6] <= _T_90 @[BitSum.scala 11:24]
    _T_120[7] <= _T_93 @[BitSum.scala 11:24]
    _T_120[8] <= _T_96 @[BitSum.scala 11:24]
    _T_120[9] <= _T_99 @[BitSum.scala 11:24]
    _T_120[10] <= _T_102 @[BitSum.scala 11:24]
    _T_120[11] <= _T_105 @[BitSum.scala 11:24]
    _T_120[12] <= _T_108 @[BitSum.scala 11:24]
    _T_120[13] <= _T_111 @[BitSum.scala 11:24]
    _T_120[14] <= _T_114 @[BitSum.scala 11:24]
    _T_120[15] <= _T_117 @[BitSum.scala 11:24]
    reg _T_142 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_145 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_148 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_151 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_154 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_157 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_160 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_163 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_166 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_169 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_172 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_175 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_178 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_181 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_184 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_187 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_190 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_190 is invalid @[BitSum.scala 11:24]
    _T_190[0] <= _T_142 @[BitSum.scala 11:24]
    _T_190[1] <= _T_145 @[BitSum.scala 11:24]
    _T_190[2] <= _T_148 @[BitSum.scala 11:24]
    _T_190[3] <= _T_151 @[BitSum.scala 11:24]
    _T_190[4] <= _T_154 @[BitSum.scala 11:24]
    _T_190[5] <= _T_157 @[BitSum.scala 11:24]
    _T_190[6] <= _T_160 @[BitSum.scala 11:24]
    _T_190[7] <= _T_163 @[BitSum.scala 11:24]
    _T_190[8] <= _T_166 @[BitSum.scala 11:24]
    _T_190[9] <= _T_169 @[BitSum.scala 11:24]
    _T_190[10] <= _T_172 @[BitSum.scala 11:24]
    _T_190[11] <= _T_175 @[BitSum.scala 11:24]
    _T_190[12] <= _T_178 @[BitSum.scala 11:24]
    _T_190[13] <= _T_181 @[BitSum.scala 11:24]
    _T_190[14] <= _T_184 @[BitSum.scala 11:24]
    _T_190[15] <= _T_187 @[BitSum.scala 11:24]
    reg _T_212 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_215 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_218 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_221 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_224 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_227 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_230 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_233 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_236 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_239 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_242 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_245 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_248 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_251 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_254 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_257 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_260 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_260 is invalid @[BitSum.scala 11:24]
    _T_260[0] <= _T_212 @[BitSum.scala 11:24]
    _T_260[1] <= _T_215 @[BitSum.scala 11:24]
    _T_260[2] <= _T_218 @[BitSum.scala 11:24]
    _T_260[3] <= _T_221 @[BitSum.scala 11:24]
    _T_260[4] <= _T_224 @[BitSum.scala 11:24]
    _T_260[5] <= _T_227 @[BitSum.scala 11:24]
    _T_260[6] <= _T_230 @[BitSum.scala 11:24]
    _T_260[7] <= _T_233 @[BitSum.scala 11:24]
    _T_260[8] <= _T_236 @[BitSum.scala 11:24]
    _T_260[9] <= _T_239 @[BitSum.scala 11:24]
    _T_260[10] <= _T_242 @[BitSum.scala 11:24]
    _T_260[11] <= _T_245 @[BitSum.scala 11:24]
    _T_260[12] <= _T_248 @[BitSum.scala 11:24]
    _T_260[13] <= _T_251 @[BitSum.scala 11:24]
    _T_260[14] <= _T_254 @[BitSum.scala 11:24]
    _T_260[15] <= _T_257 @[BitSum.scala 11:24]
    reg _T_282 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_285 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_288 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_291 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_294 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_297 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_300 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_312 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_315 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_318 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_321 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_324 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_327 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_330 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_330 is invalid @[BitSum.scala 11:24]
    _T_330[0] <= _T_282 @[BitSum.scala 11:24]
    _T_330[1] <= _T_285 @[BitSum.scala 11:24]
    _T_330[2] <= _T_288 @[BitSum.scala 11:24]
    _T_330[3] <= _T_291 @[BitSum.scala 11:24]
    _T_330[4] <= _T_294 @[BitSum.scala 11:24]
    _T_330[5] <= _T_297 @[BitSum.scala 11:24]
    _T_330[6] <= _T_300 @[BitSum.scala 11:24]
    _T_330[7] <= _T_303 @[BitSum.scala 11:24]
    _T_330[8] <= _T_306 @[BitSum.scala 11:24]
    _T_330[9] <= _T_309 @[BitSum.scala 11:24]
    _T_330[10] <= _T_312 @[BitSum.scala 11:24]
    _T_330[11] <= _T_315 @[BitSum.scala 11:24]
    _T_330[12] <= _T_318 @[BitSum.scala 11:24]
    _T_330[13] <= _T_321 @[BitSum.scala 11:24]
    _T_330[14] <= _T_324 @[BitSum.scala 11:24]
    _T_330[15] <= _T_327 @[BitSum.scala 11:24]
    reg _T_352 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_355 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_358 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_361 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_364 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_367 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_370 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_382 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_385 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_388 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_391 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_394 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_397 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_400 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_400 is invalid @[BitSum.scala 11:24]
    _T_400[0] <= _T_352 @[BitSum.scala 11:24]
    _T_400[1] <= _T_355 @[BitSum.scala 11:24]
    _T_400[2] <= _T_358 @[BitSum.scala 11:24]
    _T_400[3] <= _T_361 @[BitSum.scala 11:24]
    _T_400[4] <= _T_364 @[BitSum.scala 11:24]
    _T_400[5] <= _T_367 @[BitSum.scala 11:24]
    _T_400[6] <= _T_370 @[BitSum.scala 11:24]
    _T_400[7] <= _T_373 @[BitSum.scala 11:24]
    _T_400[8] <= _T_376 @[BitSum.scala 11:24]
    _T_400[9] <= _T_379 @[BitSum.scala 11:24]
    _T_400[10] <= _T_382 @[BitSum.scala 11:24]
    _T_400[11] <= _T_385 @[BitSum.scala 11:24]
    _T_400[12] <= _T_388 @[BitSum.scala 11:24]
    _T_400[13] <= _T_391 @[BitSum.scala 11:24]
    _T_400[14] <= _T_394 @[BitSum.scala 11:24]
    _T_400[15] <= _T_397 @[BitSum.scala 11:24]
    reg _T_422 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_425 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_428 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_431 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_434 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_437 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_440 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_443 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_446 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_449 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_452 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_455 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_458 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_461 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_464 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_467 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_470 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_470 is invalid @[BitSum.scala 11:24]
    _T_470[0] <= _T_422 @[BitSum.scala 11:24]
    _T_470[1] <= _T_425 @[BitSum.scala 11:24]
    _T_470[2] <= _T_428 @[BitSum.scala 11:24]
    _T_470[3] <= _T_431 @[BitSum.scala 11:24]
    _T_470[4] <= _T_434 @[BitSum.scala 11:24]
    _T_470[5] <= _T_437 @[BitSum.scala 11:24]
    _T_470[6] <= _T_440 @[BitSum.scala 11:24]
    _T_470[7] <= _T_443 @[BitSum.scala 11:24]
    _T_470[8] <= _T_446 @[BitSum.scala 11:24]
    _T_470[9] <= _T_449 @[BitSum.scala 11:24]
    _T_470[10] <= _T_452 @[BitSum.scala 11:24]
    _T_470[11] <= _T_455 @[BitSum.scala 11:24]
    _T_470[12] <= _T_458 @[BitSum.scala 11:24]
    _T_470[13] <= _T_461 @[BitSum.scala 11:24]
    _T_470[14] <= _T_464 @[BitSum.scala 11:24]
    _T_470[15] <= _T_467 @[BitSum.scala 11:24]
    reg _T_492 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_495 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_498 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_501 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_504 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_507 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_510 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_513 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_516 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_519 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_522 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_525 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_528 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_531 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_534 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_537 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_540 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_540 is invalid @[BitSum.scala 11:24]
    _T_540[0] <= _T_492 @[BitSum.scala 11:24]
    _T_540[1] <= _T_495 @[BitSum.scala 11:24]
    _T_540[2] <= _T_498 @[BitSum.scala 11:24]
    _T_540[3] <= _T_501 @[BitSum.scala 11:24]
    _T_540[4] <= _T_504 @[BitSum.scala 11:24]
    _T_540[5] <= _T_507 @[BitSum.scala 11:24]
    _T_540[6] <= _T_510 @[BitSum.scala 11:24]
    _T_540[7] <= _T_513 @[BitSum.scala 11:24]
    _T_540[8] <= _T_516 @[BitSum.scala 11:24]
    _T_540[9] <= _T_519 @[BitSum.scala 11:24]
    _T_540[10] <= _T_522 @[BitSum.scala 11:24]
    _T_540[11] <= _T_525 @[BitSum.scala 11:24]
    _T_540[12] <= _T_528 @[BitSum.scala 11:24]
    _T_540[13] <= _T_531 @[BitSum.scala 11:24]
    _T_540[14] <= _T_534 @[BitSum.scala 11:24]
    _T_540[15] <= _T_537 @[BitSum.scala 11:24]
    reg _T_562 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_565 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_568 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_571 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_574 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_577 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_580 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_583 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_586 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_589 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_592 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_595 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_598 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_601 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_604 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_607 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_610 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_610 is invalid @[BitSum.scala 11:24]
    _T_610[0] <= _T_562 @[BitSum.scala 11:24]
    _T_610[1] <= _T_565 @[BitSum.scala 11:24]
    _T_610[2] <= _T_568 @[BitSum.scala 11:24]
    _T_610[3] <= _T_571 @[BitSum.scala 11:24]
    _T_610[4] <= _T_574 @[BitSum.scala 11:24]
    _T_610[5] <= _T_577 @[BitSum.scala 11:24]
    _T_610[6] <= _T_580 @[BitSum.scala 11:24]
    _T_610[7] <= _T_583 @[BitSum.scala 11:24]
    _T_610[8] <= _T_586 @[BitSum.scala 11:24]
    _T_610[9] <= _T_589 @[BitSum.scala 11:24]
    _T_610[10] <= _T_592 @[BitSum.scala 11:24]
    _T_610[11] <= _T_595 @[BitSum.scala 11:24]
    _T_610[12] <= _T_598 @[BitSum.scala 11:24]
    _T_610[13] <= _T_601 @[BitSum.scala 11:24]
    _T_610[14] <= _T_604 @[BitSum.scala 11:24]
    _T_610[15] <= _T_607 @[BitSum.scala 11:24]
    node _T_630 = add(_T_120[_T_62], _T_190[_T_63]) @[BitSum.scala 18:14]
    node _T_631 = tail(_T_630, 1) @[BitSum.scala 18:14]
    node _T_632 = asSInt(_T_631) @[BitSum.scala 18:14]
    node _T_633 = add(_T_260[_T_64], _T_330[_T_65]) @[BitSum.scala 18:14]
    node _T_634 = tail(_T_633, 1) @[BitSum.scala 18:14]
    node _T_635 = asSInt(_T_634) @[BitSum.scala 18:14]
    node _T_636 = add(_T_400[_T_66], _T_470[_T_67]) @[BitSum.scala 18:14]
    node _T_637 = tail(_T_636, 1) @[BitSum.scala 18:14]
    node _T_638 = asSInt(_T_637) @[BitSum.scala 18:14]
    node _T_639 = add(_T_540[_T_68], _T_610[_T_69]) @[BitSum.scala 18:14]
    node _T_640 = tail(_T_639, 1) @[BitSum.scala 18:14]
    node _T_641 = asSInt(_T_640) @[BitSum.scala 18:14]
    node _T_642 = add(_T_632, _T_635) @[BitSum.scala 18:14]
    node _T_643 = tail(_T_642, 1) @[BitSum.scala 18:14]
    node _T_644 = asSInt(_T_643) @[BitSum.scala 18:14]
    node _T_645 = add(_T_638, _T_641) @[BitSum.scala 18:14]
    node _T_646 = tail(_T_645, 1) @[BitSum.scala 18:14]
    node _T_647 = asSInt(_T_646) @[BitSum.scala 18:14]
    node _T_648 = add(_T_644, _T_647) @[BitSum.scala 18:14]
    node _T_649 = tail(_T_648, 1) @[BitSum.scala 18:14]
    node _T_650 = asSInt(_T_649) @[BitSum.scala 18:14]
    Accumulator.io.in <= _T_650 @[XNORNetInference.scala 137:15]
    Accumulator.io.sel <= io.accSel @[XNORNetInference.scala 141:16]
    Accumulator.io.reset <= io.accReset @[XNORNetInference.scala 142:18]
    Accumulator.io.en <= io.accEn @[XNORNetInference.scala 143:14]
    inst MulAdd of MulAdd @[XNORNetInference.scala 146:24]
    MulAdd.io is invalid
    MulAdd.clock <= clock
    MulAdd.reset <= reset
    node _T_651 = bits(mem.io.out, 127, 96) @[XNORNetInference.scala 152:28]
    node _T_652 = bits(_T_651, 31, 16) @[XNORNetInference.scala 154:26]
    node _T_653 = asSInt(_T_652) @[XNORNetInference.scala 154:99]
    MulAdd.io.a <= _T_653 @[XNORNetInference.scala 154:17]
    node _T_654 = bits(_T_651, 15, 0) @[XNORNetInference.scala 155:26]
    node _T_655 = asSInt(_T_654) @[XNORNetInference.scala 155:69]
    MulAdd.io.c <= _T_655 @[XNORNetInference.scala 155:17]
    MulAdd.io.m <= mean.io.output @[XNORNetInference.scala 156:16]
    MulAdd.io.b <= Accumulator.io.out @[XNORNetInference.scala 157:16]
    meanBuffer.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 159:24]
    maxModule.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 160:23]
    node _T_656 = bits(MulAdd.io.r, 31, 31) @[XNORNetInference.scala 161:18]
    node signs_0 = not(_T_656) @[XNORNetInference.scala 161:5]
    inst Accumulator_1 of Accumulator_1 @[XNORNetInference.scala 134:21]
    Accumulator_1.io is invalid
    Accumulator_1.clock <= clock
    Accumulator_1.reset <= reset
    node _T_657 = bits(xnor.io.out[2], 3, 0) @[BitSum.scala 31:51]
    node _T_658 = bits(xnor.io.out[2], 7, 4) @[BitSum.scala 31:51]
    node _T_659 = bits(xnor.io.out[2], 11, 8) @[BitSum.scala 31:51]
    node _T_660 = bits(xnor.io.out[2], 15, 12) @[BitSum.scala 31:51]
    node _T_661 = bits(xnor.io.out[2], 19, 16) @[BitSum.scala 31:51]
    node _T_662 = bits(xnor.io.out[2], 23, 20) @[BitSum.scala 31:51]
    node _T_663 = bits(xnor.io.out[2], 27, 24) @[BitSum.scala 31:51]
    node _T_664 = bits(xnor.io.out[2], 31, 28) @[BitSum.scala 31:51]
    reg _T_667 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_670 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_673 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_676 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_679 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_682 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_685 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_688 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_691 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_694 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_697 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_700 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_703 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_706 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_709 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_712 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_715 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_715 is invalid @[BitSum.scala 11:24]
    _T_715[0] <= _T_667 @[BitSum.scala 11:24]
    _T_715[1] <= _T_670 @[BitSum.scala 11:24]
    _T_715[2] <= _T_673 @[BitSum.scala 11:24]
    _T_715[3] <= _T_676 @[BitSum.scala 11:24]
    _T_715[4] <= _T_679 @[BitSum.scala 11:24]
    _T_715[5] <= _T_682 @[BitSum.scala 11:24]
    _T_715[6] <= _T_685 @[BitSum.scala 11:24]
    _T_715[7] <= _T_688 @[BitSum.scala 11:24]
    _T_715[8] <= _T_691 @[BitSum.scala 11:24]
    _T_715[9] <= _T_694 @[BitSum.scala 11:24]
    _T_715[10] <= _T_697 @[BitSum.scala 11:24]
    _T_715[11] <= _T_700 @[BitSum.scala 11:24]
    _T_715[12] <= _T_703 @[BitSum.scala 11:24]
    _T_715[13] <= _T_706 @[BitSum.scala 11:24]
    _T_715[14] <= _T_709 @[BitSum.scala 11:24]
    _T_715[15] <= _T_712 @[BitSum.scala 11:24]
    reg _T_737 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_740 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_743 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_746 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_749 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_752 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_755 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_758 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_761 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_764 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_767 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_770 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_773 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_776 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_779 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_782 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_785 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_785 is invalid @[BitSum.scala 11:24]
    _T_785[0] <= _T_737 @[BitSum.scala 11:24]
    _T_785[1] <= _T_740 @[BitSum.scala 11:24]
    _T_785[2] <= _T_743 @[BitSum.scala 11:24]
    _T_785[3] <= _T_746 @[BitSum.scala 11:24]
    _T_785[4] <= _T_749 @[BitSum.scala 11:24]
    _T_785[5] <= _T_752 @[BitSum.scala 11:24]
    _T_785[6] <= _T_755 @[BitSum.scala 11:24]
    _T_785[7] <= _T_758 @[BitSum.scala 11:24]
    _T_785[8] <= _T_761 @[BitSum.scala 11:24]
    _T_785[9] <= _T_764 @[BitSum.scala 11:24]
    _T_785[10] <= _T_767 @[BitSum.scala 11:24]
    _T_785[11] <= _T_770 @[BitSum.scala 11:24]
    _T_785[12] <= _T_773 @[BitSum.scala 11:24]
    _T_785[13] <= _T_776 @[BitSum.scala 11:24]
    _T_785[14] <= _T_779 @[BitSum.scala 11:24]
    _T_785[15] <= _T_782 @[BitSum.scala 11:24]
    reg _T_807 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_810 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_813 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_816 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_819 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_822 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_825 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_828 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_831 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_834 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_837 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_840 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_843 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_846 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_849 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_852 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_855 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_855 is invalid @[BitSum.scala 11:24]
    _T_855[0] <= _T_807 @[BitSum.scala 11:24]
    _T_855[1] <= _T_810 @[BitSum.scala 11:24]
    _T_855[2] <= _T_813 @[BitSum.scala 11:24]
    _T_855[3] <= _T_816 @[BitSum.scala 11:24]
    _T_855[4] <= _T_819 @[BitSum.scala 11:24]
    _T_855[5] <= _T_822 @[BitSum.scala 11:24]
    _T_855[6] <= _T_825 @[BitSum.scala 11:24]
    _T_855[7] <= _T_828 @[BitSum.scala 11:24]
    _T_855[8] <= _T_831 @[BitSum.scala 11:24]
    _T_855[9] <= _T_834 @[BitSum.scala 11:24]
    _T_855[10] <= _T_837 @[BitSum.scala 11:24]
    _T_855[11] <= _T_840 @[BitSum.scala 11:24]
    _T_855[12] <= _T_843 @[BitSum.scala 11:24]
    _T_855[13] <= _T_846 @[BitSum.scala 11:24]
    _T_855[14] <= _T_849 @[BitSum.scala 11:24]
    _T_855[15] <= _T_852 @[BitSum.scala 11:24]
    reg _T_877 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_880 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_883 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_886 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_889 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_892 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_895 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_898 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_901 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_904 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_907 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_910 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_913 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_916 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_919 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_922 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_925 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_925 is invalid @[BitSum.scala 11:24]
    _T_925[0] <= _T_877 @[BitSum.scala 11:24]
    _T_925[1] <= _T_880 @[BitSum.scala 11:24]
    _T_925[2] <= _T_883 @[BitSum.scala 11:24]
    _T_925[3] <= _T_886 @[BitSum.scala 11:24]
    _T_925[4] <= _T_889 @[BitSum.scala 11:24]
    _T_925[5] <= _T_892 @[BitSum.scala 11:24]
    _T_925[6] <= _T_895 @[BitSum.scala 11:24]
    _T_925[7] <= _T_898 @[BitSum.scala 11:24]
    _T_925[8] <= _T_901 @[BitSum.scala 11:24]
    _T_925[9] <= _T_904 @[BitSum.scala 11:24]
    _T_925[10] <= _T_907 @[BitSum.scala 11:24]
    _T_925[11] <= _T_910 @[BitSum.scala 11:24]
    _T_925[12] <= _T_913 @[BitSum.scala 11:24]
    _T_925[13] <= _T_916 @[BitSum.scala 11:24]
    _T_925[14] <= _T_919 @[BitSum.scala 11:24]
    _T_925[15] <= _T_922 @[BitSum.scala 11:24]
    reg _T_947 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_950 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_953 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_956 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_959 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_962 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_965 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_968 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_971 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_974 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_977 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_980 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_983 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_986 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_989 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_992 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_995 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_995 is invalid @[BitSum.scala 11:24]
    _T_995[0] <= _T_947 @[BitSum.scala 11:24]
    _T_995[1] <= _T_950 @[BitSum.scala 11:24]
    _T_995[2] <= _T_953 @[BitSum.scala 11:24]
    _T_995[3] <= _T_956 @[BitSum.scala 11:24]
    _T_995[4] <= _T_959 @[BitSum.scala 11:24]
    _T_995[5] <= _T_962 @[BitSum.scala 11:24]
    _T_995[6] <= _T_965 @[BitSum.scala 11:24]
    _T_995[7] <= _T_968 @[BitSum.scala 11:24]
    _T_995[8] <= _T_971 @[BitSum.scala 11:24]
    _T_995[9] <= _T_974 @[BitSum.scala 11:24]
    _T_995[10] <= _T_977 @[BitSum.scala 11:24]
    _T_995[11] <= _T_980 @[BitSum.scala 11:24]
    _T_995[12] <= _T_983 @[BitSum.scala 11:24]
    _T_995[13] <= _T_986 @[BitSum.scala 11:24]
    _T_995[14] <= _T_989 @[BitSum.scala 11:24]
    _T_995[15] <= _T_992 @[BitSum.scala 11:24]
    reg _T_1017 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1020 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1023 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1026 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1029 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1032 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1035 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1038 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1041 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1044 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1047 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1050 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1053 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1056 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1059 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1062 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1065 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1065 is invalid @[BitSum.scala 11:24]
    _T_1065[0] <= _T_1017 @[BitSum.scala 11:24]
    _T_1065[1] <= _T_1020 @[BitSum.scala 11:24]
    _T_1065[2] <= _T_1023 @[BitSum.scala 11:24]
    _T_1065[3] <= _T_1026 @[BitSum.scala 11:24]
    _T_1065[4] <= _T_1029 @[BitSum.scala 11:24]
    _T_1065[5] <= _T_1032 @[BitSum.scala 11:24]
    _T_1065[6] <= _T_1035 @[BitSum.scala 11:24]
    _T_1065[7] <= _T_1038 @[BitSum.scala 11:24]
    _T_1065[8] <= _T_1041 @[BitSum.scala 11:24]
    _T_1065[9] <= _T_1044 @[BitSum.scala 11:24]
    _T_1065[10] <= _T_1047 @[BitSum.scala 11:24]
    _T_1065[11] <= _T_1050 @[BitSum.scala 11:24]
    _T_1065[12] <= _T_1053 @[BitSum.scala 11:24]
    _T_1065[13] <= _T_1056 @[BitSum.scala 11:24]
    _T_1065[14] <= _T_1059 @[BitSum.scala 11:24]
    _T_1065[15] <= _T_1062 @[BitSum.scala 11:24]
    reg _T_1087 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1090 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1093 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1096 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1099 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1102 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1105 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1108 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1111 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1114 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1117 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1120 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1123 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1126 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1129 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1132 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1135 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1135 is invalid @[BitSum.scala 11:24]
    _T_1135[0] <= _T_1087 @[BitSum.scala 11:24]
    _T_1135[1] <= _T_1090 @[BitSum.scala 11:24]
    _T_1135[2] <= _T_1093 @[BitSum.scala 11:24]
    _T_1135[3] <= _T_1096 @[BitSum.scala 11:24]
    _T_1135[4] <= _T_1099 @[BitSum.scala 11:24]
    _T_1135[5] <= _T_1102 @[BitSum.scala 11:24]
    _T_1135[6] <= _T_1105 @[BitSum.scala 11:24]
    _T_1135[7] <= _T_1108 @[BitSum.scala 11:24]
    _T_1135[8] <= _T_1111 @[BitSum.scala 11:24]
    _T_1135[9] <= _T_1114 @[BitSum.scala 11:24]
    _T_1135[10] <= _T_1117 @[BitSum.scala 11:24]
    _T_1135[11] <= _T_1120 @[BitSum.scala 11:24]
    _T_1135[12] <= _T_1123 @[BitSum.scala 11:24]
    _T_1135[13] <= _T_1126 @[BitSum.scala 11:24]
    _T_1135[14] <= _T_1129 @[BitSum.scala 11:24]
    _T_1135[15] <= _T_1132 @[BitSum.scala 11:24]
    reg _T_1157 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1160 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1163 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1166 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1169 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1172 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1175 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1178 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1181 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1184 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1187 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1190 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1193 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1196 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1199 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1202 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1205 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1205 is invalid @[BitSum.scala 11:24]
    _T_1205[0] <= _T_1157 @[BitSum.scala 11:24]
    _T_1205[1] <= _T_1160 @[BitSum.scala 11:24]
    _T_1205[2] <= _T_1163 @[BitSum.scala 11:24]
    _T_1205[3] <= _T_1166 @[BitSum.scala 11:24]
    _T_1205[4] <= _T_1169 @[BitSum.scala 11:24]
    _T_1205[5] <= _T_1172 @[BitSum.scala 11:24]
    _T_1205[6] <= _T_1175 @[BitSum.scala 11:24]
    _T_1205[7] <= _T_1178 @[BitSum.scala 11:24]
    _T_1205[8] <= _T_1181 @[BitSum.scala 11:24]
    _T_1205[9] <= _T_1184 @[BitSum.scala 11:24]
    _T_1205[10] <= _T_1187 @[BitSum.scala 11:24]
    _T_1205[11] <= _T_1190 @[BitSum.scala 11:24]
    _T_1205[12] <= _T_1193 @[BitSum.scala 11:24]
    _T_1205[13] <= _T_1196 @[BitSum.scala 11:24]
    _T_1205[14] <= _T_1199 @[BitSum.scala 11:24]
    _T_1205[15] <= _T_1202 @[BitSum.scala 11:24]
    node _T_1225 = add(_T_715[_T_657], _T_785[_T_658]) @[BitSum.scala 18:14]
    node _T_1226 = tail(_T_1225, 1) @[BitSum.scala 18:14]
    node _T_1227 = asSInt(_T_1226) @[BitSum.scala 18:14]
    node _T_1228 = add(_T_855[_T_659], _T_925[_T_660]) @[BitSum.scala 18:14]
    node _T_1229 = tail(_T_1228, 1) @[BitSum.scala 18:14]
    node _T_1230 = asSInt(_T_1229) @[BitSum.scala 18:14]
    node _T_1231 = add(_T_995[_T_661], _T_1065[_T_662]) @[BitSum.scala 18:14]
    node _T_1232 = tail(_T_1231, 1) @[BitSum.scala 18:14]
    node _T_1233 = asSInt(_T_1232) @[BitSum.scala 18:14]
    node _T_1234 = add(_T_1135[_T_663], _T_1205[_T_664]) @[BitSum.scala 18:14]
    node _T_1235 = tail(_T_1234, 1) @[BitSum.scala 18:14]
    node _T_1236 = asSInt(_T_1235) @[BitSum.scala 18:14]
    node _T_1237 = add(_T_1227, _T_1230) @[BitSum.scala 18:14]
    node _T_1238 = tail(_T_1237, 1) @[BitSum.scala 18:14]
    node _T_1239 = asSInt(_T_1238) @[BitSum.scala 18:14]
    node _T_1240 = add(_T_1233, _T_1236) @[BitSum.scala 18:14]
    node _T_1241 = tail(_T_1240, 1) @[BitSum.scala 18:14]
    node _T_1242 = asSInt(_T_1241) @[BitSum.scala 18:14]
    node _T_1243 = add(_T_1239, _T_1242) @[BitSum.scala 18:14]
    node _T_1244 = tail(_T_1243, 1) @[BitSum.scala 18:14]
    node _T_1245 = asSInt(_T_1244) @[BitSum.scala 18:14]
    Accumulator_1.io.in <= _T_1245 @[XNORNetInference.scala 137:15]
    Accumulator_1.io.sel <= io.accSel @[XNORNetInference.scala 141:16]
    Accumulator_1.io.reset <= io.accReset @[XNORNetInference.scala 142:18]
    Accumulator_1.io.en <= io.accEn @[XNORNetInference.scala 143:14]
    inst MulAdd_1 of MulAdd_1 @[XNORNetInference.scala 146:24]
    MulAdd_1.io is invalid
    MulAdd_1.clock <= clock
    MulAdd_1.reset <= reset
    node _T_1246 = bits(mem.io.out, 95, 64) @[XNORNetInference.scala 152:28]
    node _T_1247 = bits(_T_1246, 31, 16) @[XNORNetInference.scala 154:26]
    node _T_1248 = asSInt(_T_1247) @[XNORNetInference.scala 154:99]
    MulAdd_1.io.a <= _T_1248 @[XNORNetInference.scala 154:17]
    node _T_1249 = bits(_T_1246, 15, 0) @[XNORNetInference.scala 155:26]
    node _T_1250 = asSInt(_T_1249) @[XNORNetInference.scala 155:69]
    MulAdd_1.io.c <= _T_1250 @[XNORNetInference.scala 155:17]
    MulAdd_1.io.m <= mean.io.output @[XNORNetInference.scala 156:16]
    MulAdd_1.io.b <= Accumulator_1.io.out @[XNORNetInference.scala 157:16]
    meanBuffer.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 159:24]
    maxModule.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 160:23]
    node _T_1251 = bits(MulAdd_1.io.r, 31, 31) @[XNORNetInference.scala 161:18]
    node signs_1 = not(_T_1251) @[XNORNetInference.scala 161:5]
    inst Accumulator_2 of Accumulator_2 @[XNORNetInference.scala 134:21]
    Accumulator_2.io is invalid
    Accumulator_2.clock <= clock
    Accumulator_2.reset <= reset
    node _T_1252 = bits(xnor.io.out[1], 3, 0) @[BitSum.scala 31:51]
    node _T_1253 = bits(xnor.io.out[1], 7, 4) @[BitSum.scala 31:51]
    node _T_1254 = bits(xnor.io.out[1], 11, 8) @[BitSum.scala 31:51]
    node _T_1255 = bits(xnor.io.out[1], 15, 12) @[BitSum.scala 31:51]
    node _T_1256 = bits(xnor.io.out[1], 19, 16) @[BitSum.scala 31:51]
    node _T_1257 = bits(xnor.io.out[1], 23, 20) @[BitSum.scala 31:51]
    node _T_1258 = bits(xnor.io.out[1], 27, 24) @[BitSum.scala 31:51]
    node _T_1259 = bits(xnor.io.out[1], 31, 28) @[BitSum.scala 31:51]
    reg _T_1262 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1265 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1268 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1271 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1274 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1277 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1280 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1283 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1286 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1289 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1292 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1295 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1298 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1301 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1304 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1307 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1310 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1310 is invalid @[BitSum.scala 11:24]
    _T_1310[0] <= _T_1262 @[BitSum.scala 11:24]
    _T_1310[1] <= _T_1265 @[BitSum.scala 11:24]
    _T_1310[2] <= _T_1268 @[BitSum.scala 11:24]
    _T_1310[3] <= _T_1271 @[BitSum.scala 11:24]
    _T_1310[4] <= _T_1274 @[BitSum.scala 11:24]
    _T_1310[5] <= _T_1277 @[BitSum.scala 11:24]
    _T_1310[6] <= _T_1280 @[BitSum.scala 11:24]
    _T_1310[7] <= _T_1283 @[BitSum.scala 11:24]
    _T_1310[8] <= _T_1286 @[BitSum.scala 11:24]
    _T_1310[9] <= _T_1289 @[BitSum.scala 11:24]
    _T_1310[10] <= _T_1292 @[BitSum.scala 11:24]
    _T_1310[11] <= _T_1295 @[BitSum.scala 11:24]
    _T_1310[12] <= _T_1298 @[BitSum.scala 11:24]
    _T_1310[13] <= _T_1301 @[BitSum.scala 11:24]
    _T_1310[14] <= _T_1304 @[BitSum.scala 11:24]
    _T_1310[15] <= _T_1307 @[BitSum.scala 11:24]
    reg _T_1332 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1335 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1338 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1341 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1344 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1347 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1350 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1353 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1356 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1359 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1362 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1365 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1368 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1371 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1374 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1377 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1380 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1380 is invalid @[BitSum.scala 11:24]
    _T_1380[0] <= _T_1332 @[BitSum.scala 11:24]
    _T_1380[1] <= _T_1335 @[BitSum.scala 11:24]
    _T_1380[2] <= _T_1338 @[BitSum.scala 11:24]
    _T_1380[3] <= _T_1341 @[BitSum.scala 11:24]
    _T_1380[4] <= _T_1344 @[BitSum.scala 11:24]
    _T_1380[5] <= _T_1347 @[BitSum.scala 11:24]
    _T_1380[6] <= _T_1350 @[BitSum.scala 11:24]
    _T_1380[7] <= _T_1353 @[BitSum.scala 11:24]
    _T_1380[8] <= _T_1356 @[BitSum.scala 11:24]
    _T_1380[9] <= _T_1359 @[BitSum.scala 11:24]
    _T_1380[10] <= _T_1362 @[BitSum.scala 11:24]
    _T_1380[11] <= _T_1365 @[BitSum.scala 11:24]
    _T_1380[12] <= _T_1368 @[BitSum.scala 11:24]
    _T_1380[13] <= _T_1371 @[BitSum.scala 11:24]
    _T_1380[14] <= _T_1374 @[BitSum.scala 11:24]
    _T_1380[15] <= _T_1377 @[BitSum.scala 11:24]
    reg _T_1402 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1405 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1408 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1411 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1414 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1417 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1420 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1423 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1426 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1429 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1432 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1435 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1438 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1441 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1444 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1447 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1450 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1450 is invalid @[BitSum.scala 11:24]
    _T_1450[0] <= _T_1402 @[BitSum.scala 11:24]
    _T_1450[1] <= _T_1405 @[BitSum.scala 11:24]
    _T_1450[2] <= _T_1408 @[BitSum.scala 11:24]
    _T_1450[3] <= _T_1411 @[BitSum.scala 11:24]
    _T_1450[4] <= _T_1414 @[BitSum.scala 11:24]
    _T_1450[5] <= _T_1417 @[BitSum.scala 11:24]
    _T_1450[6] <= _T_1420 @[BitSum.scala 11:24]
    _T_1450[7] <= _T_1423 @[BitSum.scala 11:24]
    _T_1450[8] <= _T_1426 @[BitSum.scala 11:24]
    _T_1450[9] <= _T_1429 @[BitSum.scala 11:24]
    _T_1450[10] <= _T_1432 @[BitSum.scala 11:24]
    _T_1450[11] <= _T_1435 @[BitSum.scala 11:24]
    _T_1450[12] <= _T_1438 @[BitSum.scala 11:24]
    _T_1450[13] <= _T_1441 @[BitSum.scala 11:24]
    _T_1450[14] <= _T_1444 @[BitSum.scala 11:24]
    _T_1450[15] <= _T_1447 @[BitSum.scala 11:24]
    reg _T_1472 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1475 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1478 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1481 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1484 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1487 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1490 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1493 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1496 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1499 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1502 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1505 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1508 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1511 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1514 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1517 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1520 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1520 is invalid @[BitSum.scala 11:24]
    _T_1520[0] <= _T_1472 @[BitSum.scala 11:24]
    _T_1520[1] <= _T_1475 @[BitSum.scala 11:24]
    _T_1520[2] <= _T_1478 @[BitSum.scala 11:24]
    _T_1520[3] <= _T_1481 @[BitSum.scala 11:24]
    _T_1520[4] <= _T_1484 @[BitSum.scala 11:24]
    _T_1520[5] <= _T_1487 @[BitSum.scala 11:24]
    _T_1520[6] <= _T_1490 @[BitSum.scala 11:24]
    _T_1520[7] <= _T_1493 @[BitSum.scala 11:24]
    _T_1520[8] <= _T_1496 @[BitSum.scala 11:24]
    _T_1520[9] <= _T_1499 @[BitSum.scala 11:24]
    _T_1520[10] <= _T_1502 @[BitSum.scala 11:24]
    _T_1520[11] <= _T_1505 @[BitSum.scala 11:24]
    _T_1520[12] <= _T_1508 @[BitSum.scala 11:24]
    _T_1520[13] <= _T_1511 @[BitSum.scala 11:24]
    _T_1520[14] <= _T_1514 @[BitSum.scala 11:24]
    _T_1520[15] <= _T_1517 @[BitSum.scala 11:24]
    reg _T_1542 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1545 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1548 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1551 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1554 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1557 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1560 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1563 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1566 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1569 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1572 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1575 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1578 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1581 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1584 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1587 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1590 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1590 is invalid @[BitSum.scala 11:24]
    _T_1590[0] <= _T_1542 @[BitSum.scala 11:24]
    _T_1590[1] <= _T_1545 @[BitSum.scala 11:24]
    _T_1590[2] <= _T_1548 @[BitSum.scala 11:24]
    _T_1590[3] <= _T_1551 @[BitSum.scala 11:24]
    _T_1590[4] <= _T_1554 @[BitSum.scala 11:24]
    _T_1590[5] <= _T_1557 @[BitSum.scala 11:24]
    _T_1590[6] <= _T_1560 @[BitSum.scala 11:24]
    _T_1590[7] <= _T_1563 @[BitSum.scala 11:24]
    _T_1590[8] <= _T_1566 @[BitSum.scala 11:24]
    _T_1590[9] <= _T_1569 @[BitSum.scala 11:24]
    _T_1590[10] <= _T_1572 @[BitSum.scala 11:24]
    _T_1590[11] <= _T_1575 @[BitSum.scala 11:24]
    _T_1590[12] <= _T_1578 @[BitSum.scala 11:24]
    _T_1590[13] <= _T_1581 @[BitSum.scala 11:24]
    _T_1590[14] <= _T_1584 @[BitSum.scala 11:24]
    _T_1590[15] <= _T_1587 @[BitSum.scala 11:24]
    reg _T_1612 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1615 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1618 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1621 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1624 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1627 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1630 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1633 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1636 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1639 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1642 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1645 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1648 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1651 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1654 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1657 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1660 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1660 is invalid @[BitSum.scala 11:24]
    _T_1660[0] <= _T_1612 @[BitSum.scala 11:24]
    _T_1660[1] <= _T_1615 @[BitSum.scala 11:24]
    _T_1660[2] <= _T_1618 @[BitSum.scala 11:24]
    _T_1660[3] <= _T_1621 @[BitSum.scala 11:24]
    _T_1660[4] <= _T_1624 @[BitSum.scala 11:24]
    _T_1660[5] <= _T_1627 @[BitSum.scala 11:24]
    _T_1660[6] <= _T_1630 @[BitSum.scala 11:24]
    _T_1660[7] <= _T_1633 @[BitSum.scala 11:24]
    _T_1660[8] <= _T_1636 @[BitSum.scala 11:24]
    _T_1660[9] <= _T_1639 @[BitSum.scala 11:24]
    _T_1660[10] <= _T_1642 @[BitSum.scala 11:24]
    _T_1660[11] <= _T_1645 @[BitSum.scala 11:24]
    _T_1660[12] <= _T_1648 @[BitSum.scala 11:24]
    _T_1660[13] <= _T_1651 @[BitSum.scala 11:24]
    _T_1660[14] <= _T_1654 @[BitSum.scala 11:24]
    _T_1660[15] <= _T_1657 @[BitSum.scala 11:24]
    reg _T_1682 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1685 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1688 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1691 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1694 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1697 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1700 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1703 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1706 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1709 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1712 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1715 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1718 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1721 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1724 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1727 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1730 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1730 is invalid @[BitSum.scala 11:24]
    _T_1730[0] <= _T_1682 @[BitSum.scala 11:24]
    _T_1730[1] <= _T_1685 @[BitSum.scala 11:24]
    _T_1730[2] <= _T_1688 @[BitSum.scala 11:24]
    _T_1730[3] <= _T_1691 @[BitSum.scala 11:24]
    _T_1730[4] <= _T_1694 @[BitSum.scala 11:24]
    _T_1730[5] <= _T_1697 @[BitSum.scala 11:24]
    _T_1730[6] <= _T_1700 @[BitSum.scala 11:24]
    _T_1730[7] <= _T_1703 @[BitSum.scala 11:24]
    _T_1730[8] <= _T_1706 @[BitSum.scala 11:24]
    _T_1730[9] <= _T_1709 @[BitSum.scala 11:24]
    _T_1730[10] <= _T_1712 @[BitSum.scala 11:24]
    _T_1730[11] <= _T_1715 @[BitSum.scala 11:24]
    _T_1730[12] <= _T_1718 @[BitSum.scala 11:24]
    _T_1730[13] <= _T_1721 @[BitSum.scala 11:24]
    _T_1730[14] <= _T_1724 @[BitSum.scala 11:24]
    _T_1730[15] <= _T_1727 @[BitSum.scala 11:24]
    reg _T_1752 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1755 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1758 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1761 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1764 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1767 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1770 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1773 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1776 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1779 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1782 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1785 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1788 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1791 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1794 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1797 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1800 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1800 is invalid @[BitSum.scala 11:24]
    _T_1800[0] <= _T_1752 @[BitSum.scala 11:24]
    _T_1800[1] <= _T_1755 @[BitSum.scala 11:24]
    _T_1800[2] <= _T_1758 @[BitSum.scala 11:24]
    _T_1800[3] <= _T_1761 @[BitSum.scala 11:24]
    _T_1800[4] <= _T_1764 @[BitSum.scala 11:24]
    _T_1800[5] <= _T_1767 @[BitSum.scala 11:24]
    _T_1800[6] <= _T_1770 @[BitSum.scala 11:24]
    _T_1800[7] <= _T_1773 @[BitSum.scala 11:24]
    _T_1800[8] <= _T_1776 @[BitSum.scala 11:24]
    _T_1800[9] <= _T_1779 @[BitSum.scala 11:24]
    _T_1800[10] <= _T_1782 @[BitSum.scala 11:24]
    _T_1800[11] <= _T_1785 @[BitSum.scala 11:24]
    _T_1800[12] <= _T_1788 @[BitSum.scala 11:24]
    _T_1800[13] <= _T_1791 @[BitSum.scala 11:24]
    _T_1800[14] <= _T_1794 @[BitSum.scala 11:24]
    _T_1800[15] <= _T_1797 @[BitSum.scala 11:24]
    node _T_1820 = add(_T_1310[_T_1252], _T_1380[_T_1253]) @[BitSum.scala 18:14]
    node _T_1821 = tail(_T_1820, 1) @[BitSum.scala 18:14]
    node _T_1822 = asSInt(_T_1821) @[BitSum.scala 18:14]
    node _T_1823 = add(_T_1450[_T_1254], _T_1520[_T_1255]) @[BitSum.scala 18:14]
    node _T_1824 = tail(_T_1823, 1) @[BitSum.scala 18:14]
    node _T_1825 = asSInt(_T_1824) @[BitSum.scala 18:14]
    node _T_1826 = add(_T_1590[_T_1256], _T_1660[_T_1257]) @[BitSum.scala 18:14]
    node _T_1827 = tail(_T_1826, 1) @[BitSum.scala 18:14]
    node _T_1828 = asSInt(_T_1827) @[BitSum.scala 18:14]
    node _T_1829 = add(_T_1730[_T_1258], _T_1800[_T_1259]) @[BitSum.scala 18:14]
    node _T_1830 = tail(_T_1829, 1) @[BitSum.scala 18:14]
    node _T_1831 = asSInt(_T_1830) @[BitSum.scala 18:14]
    node _T_1832 = add(_T_1822, _T_1825) @[BitSum.scala 18:14]
    node _T_1833 = tail(_T_1832, 1) @[BitSum.scala 18:14]
    node _T_1834 = asSInt(_T_1833) @[BitSum.scala 18:14]
    node _T_1835 = add(_T_1828, _T_1831) @[BitSum.scala 18:14]
    node _T_1836 = tail(_T_1835, 1) @[BitSum.scala 18:14]
    node _T_1837 = asSInt(_T_1836) @[BitSum.scala 18:14]
    node _T_1838 = add(_T_1834, _T_1837) @[BitSum.scala 18:14]
    node _T_1839 = tail(_T_1838, 1) @[BitSum.scala 18:14]
    node _T_1840 = asSInt(_T_1839) @[BitSum.scala 18:14]
    Accumulator_2.io.in <= _T_1840 @[XNORNetInference.scala 137:15]
    Accumulator_2.io.sel <= io.accSel @[XNORNetInference.scala 141:16]
    Accumulator_2.io.reset <= io.accReset @[XNORNetInference.scala 142:18]
    Accumulator_2.io.en <= io.accEn @[XNORNetInference.scala 143:14]
    inst MulAdd_2 of MulAdd_2 @[XNORNetInference.scala 146:24]
    MulAdd_2.io is invalid
    MulAdd_2.clock <= clock
    MulAdd_2.reset <= reset
    node _T_1841 = bits(mem.io.out, 63, 32) @[XNORNetInference.scala 152:28]
    node _T_1842 = bits(_T_1841, 31, 16) @[XNORNetInference.scala 154:26]
    node _T_1843 = asSInt(_T_1842) @[XNORNetInference.scala 154:99]
    MulAdd_2.io.a <= _T_1843 @[XNORNetInference.scala 154:17]
    node _T_1844 = bits(_T_1841, 15, 0) @[XNORNetInference.scala 155:26]
    node _T_1845 = asSInt(_T_1844) @[XNORNetInference.scala 155:69]
    MulAdd_2.io.c <= _T_1845 @[XNORNetInference.scala 155:17]
    MulAdd_2.io.m <= mean.io.output @[XNORNetInference.scala 156:16]
    MulAdd_2.io.b <= Accumulator_2.io.out @[XNORNetInference.scala 157:16]
    meanBuffer.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 159:24]
    maxModule.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 160:23]
    node _T_1846 = bits(MulAdd_2.io.r, 31, 31) @[XNORNetInference.scala 161:18]
    node signs_2 = not(_T_1846) @[XNORNetInference.scala 161:5]
    inst Accumulator_3 of Accumulator_3 @[XNORNetInference.scala 134:21]
    Accumulator_3.io is invalid
    Accumulator_3.clock <= clock
    Accumulator_3.reset <= reset
    node _T_1847 = bits(xnor.io.out[0], 3, 0) @[BitSum.scala 31:51]
    node _T_1848 = bits(xnor.io.out[0], 7, 4) @[BitSum.scala 31:51]
    node _T_1849 = bits(xnor.io.out[0], 11, 8) @[BitSum.scala 31:51]
    node _T_1850 = bits(xnor.io.out[0], 15, 12) @[BitSum.scala 31:51]
    node _T_1851 = bits(xnor.io.out[0], 19, 16) @[BitSum.scala 31:51]
    node _T_1852 = bits(xnor.io.out[0], 23, 20) @[BitSum.scala 31:51]
    node _T_1853 = bits(xnor.io.out[0], 27, 24) @[BitSum.scala 31:51]
    node _T_1854 = bits(xnor.io.out[0], 31, 28) @[BitSum.scala 31:51]
    reg _T_1857 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1860 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1863 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1866 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1869 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1872 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1875 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1878 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1881 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1884 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1887 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1890 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1893 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1896 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1899 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1902 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1905 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1905 is invalid @[BitSum.scala 11:24]
    _T_1905[0] <= _T_1857 @[BitSum.scala 11:24]
    _T_1905[1] <= _T_1860 @[BitSum.scala 11:24]
    _T_1905[2] <= _T_1863 @[BitSum.scala 11:24]
    _T_1905[3] <= _T_1866 @[BitSum.scala 11:24]
    _T_1905[4] <= _T_1869 @[BitSum.scala 11:24]
    _T_1905[5] <= _T_1872 @[BitSum.scala 11:24]
    _T_1905[6] <= _T_1875 @[BitSum.scala 11:24]
    _T_1905[7] <= _T_1878 @[BitSum.scala 11:24]
    _T_1905[8] <= _T_1881 @[BitSum.scala 11:24]
    _T_1905[9] <= _T_1884 @[BitSum.scala 11:24]
    _T_1905[10] <= _T_1887 @[BitSum.scala 11:24]
    _T_1905[11] <= _T_1890 @[BitSum.scala 11:24]
    _T_1905[12] <= _T_1893 @[BitSum.scala 11:24]
    _T_1905[13] <= _T_1896 @[BitSum.scala 11:24]
    _T_1905[14] <= _T_1899 @[BitSum.scala 11:24]
    _T_1905[15] <= _T_1902 @[BitSum.scala 11:24]
    reg _T_1927 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1930 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1933 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1936 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1939 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1942 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1945 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1948 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1951 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1954 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1957 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1960 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1963 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1966 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1969 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1972 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1975 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1975 is invalid @[BitSum.scala 11:24]
    _T_1975[0] <= _T_1927 @[BitSum.scala 11:24]
    _T_1975[1] <= _T_1930 @[BitSum.scala 11:24]
    _T_1975[2] <= _T_1933 @[BitSum.scala 11:24]
    _T_1975[3] <= _T_1936 @[BitSum.scala 11:24]
    _T_1975[4] <= _T_1939 @[BitSum.scala 11:24]
    _T_1975[5] <= _T_1942 @[BitSum.scala 11:24]
    _T_1975[6] <= _T_1945 @[BitSum.scala 11:24]
    _T_1975[7] <= _T_1948 @[BitSum.scala 11:24]
    _T_1975[8] <= _T_1951 @[BitSum.scala 11:24]
    _T_1975[9] <= _T_1954 @[BitSum.scala 11:24]
    _T_1975[10] <= _T_1957 @[BitSum.scala 11:24]
    _T_1975[11] <= _T_1960 @[BitSum.scala 11:24]
    _T_1975[12] <= _T_1963 @[BitSum.scala 11:24]
    _T_1975[13] <= _T_1966 @[BitSum.scala 11:24]
    _T_1975[14] <= _T_1969 @[BitSum.scala 11:24]
    _T_1975[15] <= _T_1972 @[BitSum.scala 11:24]
    reg _T_1997 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2000 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2003 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2006 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2009 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2012 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2015 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2018 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2021 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2024 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2027 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2030 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2033 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2036 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2039 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2042 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2045 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2045 is invalid @[BitSum.scala 11:24]
    _T_2045[0] <= _T_1997 @[BitSum.scala 11:24]
    _T_2045[1] <= _T_2000 @[BitSum.scala 11:24]
    _T_2045[2] <= _T_2003 @[BitSum.scala 11:24]
    _T_2045[3] <= _T_2006 @[BitSum.scala 11:24]
    _T_2045[4] <= _T_2009 @[BitSum.scala 11:24]
    _T_2045[5] <= _T_2012 @[BitSum.scala 11:24]
    _T_2045[6] <= _T_2015 @[BitSum.scala 11:24]
    _T_2045[7] <= _T_2018 @[BitSum.scala 11:24]
    _T_2045[8] <= _T_2021 @[BitSum.scala 11:24]
    _T_2045[9] <= _T_2024 @[BitSum.scala 11:24]
    _T_2045[10] <= _T_2027 @[BitSum.scala 11:24]
    _T_2045[11] <= _T_2030 @[BitSum.scala 11:24]
    _T_2045[12] <= _T_2033 @[BitSum.scala 11:24]
    _T_2045[13] <= _T_2036 @[BitSum.scala 11:24]
    _T_2045[14] <= _T_2039 @[BitSum.scala 11:24]
    _T_2045[15] <= _T_2042 @[BitSum.scala 11:24]
    reg _T_2067 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2070 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2073 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2076 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2079 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2082 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2085 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2088 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2091 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2094 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2097 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2100 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2103 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2106 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2109 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2112 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2115 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2115 is invalid @[BitSum.scala 11:24]
    _T_2115[0] <= _T_2067 @[BitSum.scala 11:24]
    _T_2115[1] <= _T_2070 @[BitSum.scala 11:24]
    _T_2115[2] <= _T_2073 @[BitSum.scala 11:24]
    _T_2115[3] <= _T_2076 @[BitSum.scala 11:24]
    _T_2115[4] <= _T_2079 @[BitSum.scala 11:24]
    _T_2115[5] <= _T_2082 @[BitSum.scala 11:24]
    _T_2115[6] <= _T_2085 @[BitSum.scala 11:24]
    _T_2115[7] <= _T_2088 @[BitSum.scala 11:24]
    _T_2115[8] <= _T_2091 @[BitSum.scala 11:24]
    _T_2115[9] <= _T_2094 @[BitSum.scala 11:24]
    _T_2115[10] <= _T_2097 @[BitSum.scala 11:24]
    _T_2115[11] <= _T_2100 @[BitSum.scala 11:24]
    _T_2115[12] <= _T_2103 @[BitSum.scala 11:24]
    _T_2115[13] <= _T_2106 @[BitSum.scala 11:24]
    _T_2115[14] <= _T_2109 @[BitSum.scala 11:24]
    _T_2115[15] <= _T_2112 @[BitSum.scala 11:24]
    reg _T_2137 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2140 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2143 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2146 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2149 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2152 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2155 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2158 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2161 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2164 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2167 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2170 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2173 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2176 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2179 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2182 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2185 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2185 is invalid @[BitSum.scala 11:24]
    _T_2185[0] <= _T_2137 @[BitSum.scala 11:24]
    _T_2185[1] <= _T_2140 @[BitSum.scala 11:24]
    _T_2185[2] <= _T_2143 @[BitSum.scala 11:24]
    _T_2185[3] <= _T_2146 @[BitSum.scala 11:24]
    _T_2185[4] <= _T_2149 @[BitSum.scala 11:24]
    _T_2185[5] <= _T_2152 @[BitSum.scala 11:24]
    _T_2185[6] <= _T_2155 @[BitSum.scala 11:24]
    _T_2185[7] <= _T_2158 @[BitSum.scala 11:24]
    _T_2185[8] <= _T_2161 @[BitSum.scala 11:24]
    _T_2185[9] <= _T_2164 @[BitSum.scala 11:24]
    _T_2185[10] <= _T_2167 @[BitSum.scala 11:24]
    _T_2185[11] <= _T_2170 @[BitSum.scala 11:24]
    _T_2185[12] <= _T_2173 @[BitSum.scala 11:24]
    _T_2185[13] <= _T_2176 @[BitSum.scala 11:24]
    _T_2185[14] <= _T_2179 @[BitSum.scala 11:24]
    _T_2185[15] <= _T_2182 @[BitSum.scala 11:24]
    reg _T_2207 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2210 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2213 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2216 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2219 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2222 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2225 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2228 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2231 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2234 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2237 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2240 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2243 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2246 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2249 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2252 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2255 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2255 is invalid @[BitSum.scala 11:24]
    _T_2255[0] <= _T_2207 @[BitSum.scala 11:24]
    _T_2255[1] <= _T_2210 @[BitSum.scala 11:24]
    _T_2255[2] <= _T_2213 @[BitSum.scala 11:24]
    _T_2255[3] <= _T_2216 @[BitSum.scala 11:24]
    _T_2255[4] <= _T_2219 @[BitSum.scala 11:24]
    _T_2255[5] <= _T_2222 @[BitSum.scala 11:24]
    _T_2255[6] <= _T_2225 @[BitSum.scala 11:24]
    _T_2255[7] <= _T_2228 @[BitSum.scala 11:24]
    _T_2255[8] <= _T_2231 @[BitSum.scala 11:24]
    _T_2255[9] <= _T_2234 @[BitSum.scala 11:24]
    _T_2255[10] <= _T_2237 @[BitSum.scala 11:24]
    _T_2255[11] <= _T_2240 @[BitSum.scala 11:24]
    _T_2255[12] <= _T_2243 @[BitSum.scala 11:24]
    _T_2255[13] <= _T_2246 @[BitSum.scala 11:24]
    _T_2255[14] <= _T_2249 @[BitSum.scala 11:24]
    _T_2255[15] <= _T_2252 @[BitSum.scala 11:24]
    reg _T_2277 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2280 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2283 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2286 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2289 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2292 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2295 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2298 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2301 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2304 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2307 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2310 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2313 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2316 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2319 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2322 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2325 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2325 is invalid @[BitSum.scala 11:24]
    _T_2325[0] <= _T_2277 @[BitSum.scala 11:24]
    _T_2325[1] <= _T_2280 @[BitSum.scala 11:24]
    _T_2325[2] <= _T_2283 @[BitSum.scala 11:24]
    _T_2325[3] <= _T_2286 @[BitSum.scala 11:24]
    _T_2325[4] <= _T_2289 @[BitSum.scala 11:24]
    _T_2325[5] <= _T_2292 @[BitSum.scala 11:24]
    _T_2325[6] <= _T_2295 @[BitSum.scala 11:24]
    _T_2325[7] <= _T_2298 @[BitSum.scala 11:24]
    _T_2325[8] <= _T_2301 @[BitSum.scala 11:24]
    _T_2325[9] <= _T_2304 @[BitSum.scala 11:24]
    _T_2325[10] <= _T_2307 @[BitSum.scala 11:24]
    _T_2325[11] <= _T_2310 @[BitSum.scala 11:24]
    _T_2325[12] <= _T_2313 @[BitSum.scala 11:24]
    _T_2325[13] <= _T_2316 @[BitSum.scala 11:24]
    _T_2325[14] <= _T_2319 @[BitSum.scala 11:24]
    _T_2325[15] <= _T_2322 @[BitSum.scala 11:24]
    reg _T_2347 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2350 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2353 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2356 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2359 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2362 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2365 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2368 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2371 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2374 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2377 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2380 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2383 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2386 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2389 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2392 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2395 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2395 is invalid @[BitSum.scala 11:24]
    _T_2395[0] <= _T_2347 @[BitSum.scala 11:24]
    _T_2395[1] <= _T_2350 @[BitSum.scala 11:24]
    _T_2395[2] <= _T_2353 @[BitSum.scala 11:24]
    _T_2395[3] <= _T_2356 @[BitSum.scala 11:24]
    _T_2395[4] <= _T_2359 @[BitSum.scala 11:24]
    _T_2395[5] <= _T_2362 @[BitSum.scala 11:24]
    _T_2395[6] <= _T_2365 @[BitSum.scala 11:24]
    _T_2395[7] <= _T_2368 @[BitSum.scala 11:24]
    _T_2395[8] <= _T_2371 @[BitSum.scala 11:24]
    _T_2395[9] <= _T_2374 @[BitSum.scala 11:24]
    _T_2395[10] <= _T_2377 @[BitSum.scala 11:24]
    _T_2395[11] <= _T_2380 @[BitSum.scala 11:24]
    _T_2395[12] <= _T_2383 @[BitSum.scala 11:24]
    _T_2395[13] <= _T_2386 @[BitSum.scala 11:24]
    _T_2395[14] <= _T_2389 @[BitSum.scala 11:24]
    _T_2395[15] <= _T_2392 @[BitSum.scala 11:24]
    node _T_2415 = add(_T_1905[_T_1847], _T_1975[_T_1848]) @[BitSum.scala 18:14]
    node _T_2416 = tail(_T_2415, 1) @[BitSum.scala 18:14]
    node _T_2417 = asSInt(_T_2416) @[BitSum.scala 18:14]
    node _T_2418 = add(_T_2045[_T_1849], _T_2115[_T_1850]) @[BitSum.scala 18:14]
    node _T_2419 = tail(_T_2418, 1) @[BitSum.scala 18:14]
    node _T_2420 = asSInt(_T_2419) @[BitSum.scala 18:14]
    node _T_2421 = add(_T_2185[_T_1851], _T_2255[_T_1852]) @[BitSum.scala 18:14]
    node _T_2422 = tail(_T_2421, 1) @[BitSum.scala 18:14]
    node _T_2423 = asSInt(_T_2422) @[BitSum.scala 18:14]
    node _T_2424 = add(_T_2325[_T_1853], _T_2395[_T_1854]) @[BitSum.scala 18:14]
    node _T_2425 = tail(_T_2424, 1) @[BitSum.scala 18:14]
    node _T_2426 = asSInt(_T_2425) @[BitSum.scala 18:14]
    node _T_2427 = add(_T_2417, _T_2420) @[BitSum.scala 18:14]
    node _T_2428 = tail(_T_2427, 1) @[BitSum.scala 18:14]
    node _T_2429 = asSInt(_T_2428) @[BitSum.scala 18:14]
    node _T_2430 = add(_T_2423, _T_2426) @[BitSum.scala 18:14]
    node _T_2431 = tail(_T_2430, 1) @[BitSum.scala 18:14]
    node _T_2432 = asSInt(_T_2431) @[BitSum.scala 18:14]
    node _T_2433 = add(_T_2429, _T_2432) @[BitSum.scala 18:14]
    node _T_2434 = tail(_T_2433, 1) @[BitSum.scala 18:14]
    node _T_2435 = asSInt(_T_2434) @[BitSum.scala 18:14]
    Accumulator_3.io.in <= _T_2435 @[XNORNetInference.scala 137:15]
    Accumulator_3.io.sel <= io.accSel @[XNORNetInference.scala 141:16]
    Accumulator_3.io.reset <= io.accReset @[XNORNetInference.scala 142:18]
    Accumulator_3.io.en <= io.accEn @[XNORNetInference.scala 143:14]
    inst MulAdd_3 of MulAdd_3 @[XNORNetInference.scala 146:24]
    MulAdd_3.io is invalid
    MulAdd_3.clock <= clock
    MulAdd_3.reset <= reset
    node _T_2436 = bits(mem.io.out, 31, 0) @[XNORNetInference.scala 152:28]
    node _T_2437 = bits(_T_2436, 31, 16) @[XNORNetInference.scala 154:26]
    node _T_2438 = asSInt(_T_2437) @[XNORNetInference.scala 154:99]
    MulAdd_3.io.a <= _T_2438 @[XNORNetInference.scala 154:17]
    node _T_2439 = bits(_T_2436, 15, 0) @[XNORNetInference.scala 155:26]
    node _T_2440 = asSInt(_T_2439) @[XNORNetInference.scala 155:69]
    MulAdd_3.io.c <= _T_2440 @[XNORNetInference.scala 155:17]
    MulAdd_3.io.m <= mean.io.output @[XNORNetInference.scala 156:16]
    MulAdd_3.io.b <= Accumulator_3.io.out @[XNORNetInference.scala 157:16]
    meanBuffer.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 159:24]
    maxModule.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 160:23]
    node _T_2441 = bits(MulAdd_3.io.r, 31, 31) @[XNORNetInference.scala 161:18]
    node signs_3 = not(_T_2441) @[XNORNetInference.scala 161:5]
    node _T_2442 = cat(signs_2, signs_3) @[Cat.scala 30:58]
    node _T_2443 = cat(signs_0, signs_1) @[Cat.scala 30:58]
    node _T_2444 = cat(_T_2443, _T_2442) @[Cat.scala 30:58]
    inputWire <= _T_2444 @[XNORNetInference.scala 165:12]
    meanBuffer.io.reset <= io.meanBufferReset @[XNORNetInference.scala 167:22]
    meanBuffer.io.cntInverse65536 <= io.featureNumInverse65536 @[XNORNetInference.scala 168:32]
    
  module LayerParamShifter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip shift : UInt<1>, currentLayer : UInt<4>, currentFeatureCnt : UInt<16>, actualFeatureCnt : UInt<16>, currentFeatureCnt65536 : UInt<16>, currentInputRound : UInt<16>, currentTotalRound : UInt<16>, currentAccWidth : UInt<16>, lastLayer : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg currentLayer : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[LayerParamShifter.scala 11:29]
    reg featureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 14:17]
    reg featureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0c"))) @[LayerParamShifter.scala 14:17]
    reg actualFeatureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 17:17]
    reg actualFeatureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0a"))) @[LayerParamShifter.scala 17:17]
    reg featureCnts65536_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h02aa"))) @[LayerParamShifter.scala 20:17]
    reg featureCnts65536_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h01555"))) @[LayerParamShifter.scala 20:17]
    reg accWidth_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h018"))) @[LayerParamShifter.scala 23:17]
    reg accWidth_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 23:17]
    reg inputRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h08"))) @[LayerParamShifter.scala 27:17]
    reg inputRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 27:17]
    reg totalRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0c0"))) @[LayerParamShifter.scala 32:17]
    reg totalRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h09"))) @[LayerParamShifter.scala 32:17]
    io.currentLayer <= currentLayer @[LayerParamShifter.scala 46:18]
    io.currentFeatureCnt <= featureCnts_0 @[LayerParamShifter.scala 47:23]
    io.actualFeatureCnt <= actualFeatureCnts_0 @[LayerParamShifter.scala 48:22]
    io.currentFeatureCnt65536 <= featureCnts65536_0 @[LayerParamShifter.scala 49:28]
    io.currentInputRound <= inputRound_0 @[LayerParamShifter.scala 50:23]
    io.currentTotalRound <= totalRound_0 @[LayerParamShifter.scala 51:23]
    io.currentAccWidth <= accWidth_0 @[LayerParamShifter.scala 52:21]
    node _T_38 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 53:30]
    io.lastLayer <= _T_38 @[LayerParamShifter.scala 53:15]
    when io.shift : @[LayerParamShifter.scala 55:18]
      featureCnts_0 <= featureCnts_1 @[LayerParamShifter.scala 57:22]
      actualFeatureCnts_0 <= actualFeatureCnts_1 @[LayerParamShifter.scala 58:28]
      featureCnts65536_0 <= featureCnts65536_1 @[LayerParamShifter.scala 59:27]
      accWidth_0 <= accWidth_1 @[LayerParamShifter.scala 60:18]
      inputRound_0 <= inputRound_1 @[LayerParamShifter.scala 61:20]
      totalRound_0 <= totalRound_1 @[LayerParamShifter.scala 62:20]
      node _T_40 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:24]
      when _T_40 : @[LayerParamShifter.scala 63:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 64:22]
        skip @[LayerParamShifter.scala 63:56]
      node _T_43 = eq(_T_40, UInt<1>("h00")) @[LayerParamShifter.scala 63:56]
      when _T_43 : @[LayerParamShifter.scala 65:9]
        node _T_45 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 66:35]
        node _T_46 = tail(_T_45, 1) @[LayerParamShifter.scala 66:35]
        currentLayer <= _T_46 @[LayerParamShifter.scala 66:21]
        skip @[LayerParamShifter.scala 65:9]
      featureCnts_1 <= featureCnts_0 @[LayerParamShifter.scala 57:22]
      actualFeatureCnts_1 <= actualFeatureCnts_0 @[LayerParamShifter.scala 58:28]
      featureCnts65536_1 <= featureCnts65536_0 @[LayerParamShifter.scala 59:27]
      accWidth_1 <= accWidth_0 @[LayerParamShifter.scala 60:18]
      inputRound_1 <= inputRound_0 @[LayerParamShifter.scala 61:20]
      totalRound_1 <= totalRound_0 @[LayerParamShifter.scala 62:20]
      node _T_48 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:24]
      when _T_48 : @[LayerParamShifter.scala 63:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 64:22]
        skip @[LayerParamShifter.scala 63:56]
      node _T_51 = eq(_T_48, UInt<1>("h00")) @[LayerParamShifter.scala 63:56]
      when _T_51 : @[LayerParamShifter.scala 65:9]
        node _T_53 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 66:35]
        node _T_54 = tail(_T_53, 1) @[LayerParamShifter.scala 66:35]
        currentLayer <= _T_54 @[LayerParamShifter.scala 66:21]
        skip @[LayerParamShifter.scala 65:9]
      skip @[LayerParamShifter.scala 55:18]
    
  module IglooScheduler : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip en : UInt<1>, flip inputOffset : UInt<8>, flip memOffset : UInt<8>, finished : UInt<1>, result : UInt<4>, flip memWen : UInt<1>, flip memWAddr : UInt<8>, flip memIn : UInt<128>, state : UInt<16>, mean : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst hw of XNORNetInference @[IglooScheduler.scala 53:18]
    hw.io is invalid
    hw.clock <= clock
    hw.reset <= reset
    reg inputPushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 94:27]
    reg inputBufferPushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 95:33]
    reg inputBufferPopReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 96:32]
    reg inputBufferResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 97:34]
    reg accEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 98:23]
    reg accResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 99:26]
    reg maxEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 100:23]
    reg maxResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 101:26]
    reg meanResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 102:27]
    reg meanUpdateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 103:28]
    reg meanBufferResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 104:33]
    hw.io.inputPush <= inputPushReg @[IglooScheduler.scala 106:18]
    hw.io.inputBufferPush <= inputBufferPushReg @[IglooScheduler.scala 107:24]
    hw.io.inputBufferPop <= inputBufferPopReg @[IglooScheduler.scala 108:23]
    hw.io.inputBufferReset <= inputBufferResetReg @[IglooScheduler.scala 109:25]
    hw.io.accEn <= accEnReg @[IglooScheduler.scala 110:14]
    hw.io.accReset <= accResetReg @[IglooScheduler.scala 111:17]
    hw.io.maxEn <= maxEnReg @[IglooScheduler.scala 112:14]
    hw.io.maxReset <= maxResetReg @[IglooScheduler.scala 113:17]
    hw.io.meanReset <= meanResetReg @[IglooScheduler.scala 114:18]
    hw.io.meanUpdate <= meanUpdateReg @[IglooScheduler.scala 115:19]
    hw.io.meanBufferReset <= meanBufferResetReg @[IglooScheduler.scala 116:24]
    hw.io.memWen <= io.memWen @[IglooScheduler.scala 118:15]
    hw.io.memIn <= io.memIn @[IglooScheduler.scala 119:14]
    hw.io.memWAddr <= io.memWAddr @[IglooScheduler.scala 120:17]
    io.result <= hw.io.result @[IglooScheduler.scala 123:12]
    inst layerParams of LayerParamShifter @[IglooScheduler.scala 125:25]
    layerParams.io is invalid
    layerParams.clock <= clock
    layerParams.reset <= reset
    maxEnReg <= layerParams.io.lastLayer @[IglooScheduler.scala 127:11]
    hw.io.actualFeatureNum <= layerParams.io.actualFeatureCnt @[IglooScheduler.scala 128:25]
    hw.io.featureNumInverse65536 <= layerParams.io.currentFeatureCnt65536 @[IglooScheduler.scala 129:31]
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[IglooScheduler.scala 132:20]
    reg substate : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IglooScheduler.scala 133:23]
    io.state <= state @[IglooScheduler.scala 134:11]
    io.mean <= hw.io.mean @[IglooScheduler.scala 135:10]
    reg maxOffsetReg : UInt<4>, clock @[IglooScheduler.scala 150:23]
    hw.io.maxOffset <= maxOffsetReg @[IglooScheduler.scala 151:18]
    reg memOffset : UInt<8>, clock @[IglooScheduler.scala 154:20]
    hw.io.memAddr <= memOffset @[IglooScheduler.scala 155:17]
    hw.io.input <= hw.io.memOut @[IglooScheduler.scala 156:14]
    node acc = rem(substate, layerParams.io.currentAccWidth) @[IglooScheduler.scala 159:19]
    hw.io.accSel <= acc @[IglooScheduler.scala 160:15]
    node _T_41 = eq(state, UInt<8>("h01")) @[IglooScheduler.scala 138:25]
    io.finished <= _T_41 @[IglooScheduler.scala 162:14]
    layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
    when io.en : @[IglooScheduler.scala 167:15]
      node _T_44 = eq(state, UInt<8>("h00")) @[IglooScheduler.scala 138:25]
      when _T_44 : @[IglooScheduler.scala 169:21]
        memOffset <= io.inputOffset @[IglooScheduler.scala 170:16]
        inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        inputBufferPopReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        inputBufferResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        meanResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        state <= UInt<8>("h02") @[IglooScheduler.scala 140:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
        skip @[IglooScheduler.scala 169:21]
      node _T_52 = eq(state, UInt<8>("h02")) @[IglooScheduler.scala 138:25]
      when _T_52 : @[IglooScheduler.scala 181:23]
        inputBufferResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        inputPushReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        meanResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        node _T_57 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 186:27]
        node _T_58 = tail(_T_57, 1) @[IglooScheduler.scala 186:27]
        memOffset <= _T_58 @[IglooScheduler.scala 186:16]
        state <= UInt<8>("h03") @[IglooScheduler.scala 140:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
        skip @[IglooScheduler.scala 181:23]
      node _T_62 = eq(state, UInt<8>("h03")) @[IglooScheduler.scala 138:25]
      when _T_62 : @[IglooScheduler.scala 189:26]
        node _T_64 = lt(substate, UInt<1>("h00")) @[IglooScheduler.scala 191:21]
        when _T_64 : @[IglooScheduler.scala 191:50]
          node _T_66 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 193:29]
          node _T_67 = tail(_T_66, 1) @[IglooScheduler.scala 193:29]
          memOffset <= _T_67 @[IglooScheduler.scala 193:18]
          node _T_69 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 142:30]
          node _T_70 = tail(_T_69, 1) @[IglooScheduler.scala 142:30]
          substate <= _T_70 @[IglooScheduler.scala 142:20]
          skip @[IglooScheduler.scala 191:50]
        node _T_72 = eq(substate, UInt<1>("h00")) @[IglooScheduler.scala 195:27]
        node _T_74 = eq(_T_64, UInt<1>("h00")) @[IglooScheduler.scala 191:50]
        node _T_75 = and(_T_74, _T_72) @[IglooScheduler.scala 195:58]
        when _T_75 : @[IglooScheduler.scala 195:58]
          memOffset <= io.memOffset @[IglooScheduler.scala 196:19]
          state <= UInt<8>("h04") @[IglooScheduler.scala 140:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
          skip @[IglooScheduler.scala 195:58]
        skip @[IglooScheduler.scala 189:26]
      node _T_79 = eq(state, UInt<8>("h04")) @[IglooScheduler.scala 138:25]
      when _T_79 : @[IglooScheduler.scala 200:28]
        inputPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        accResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
        hw.io.accSel <= UInt<1>("h00") @[IglooScheduler.scala 207:20]
        node _T_85 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 209:27]
        node _T_86 = tail(_T_85, 1) @[IglooScheduler.scala 209:27]
        memOffset <= _T_86 @[IglooScheduler.scala 209:16]
        state <= UInt<8>("h05") @[IglooScheduler.scala 140:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
        skip @[IglooScheduler.scala 200:28]
      node _T_90 = eq(state, UInt<8>("h05")) @[IglooScheduler.scala 138:25]
      when _T_90 : @[IglooScheduler.scala 214:20]
        layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        accResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        meanUpdateReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        node _T_95 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 223:27]
        node _T_96 = tail(_T_95, 1) @[IglooScheduler.scala 223:27]
        memOffset <= _T_96 @[IglooScheduler.scala 223:16]
        node _T_98 = sub(layerParams.io.currentAccWidth, UInt<2>("h02")) @[IglooScheduler.scala 225:48]
        node _T_99 = asUInt(_T_98) @[IglooScheduler.scala 225:48]
        node _T_100 = tail(_T_99, 1) @[IglooScheduler.scala 225:48]
        node _T_101 = eq(acc, _T_100) @[IglooScheduler.scala 225:15]
        when _T_101 : @[IglooScheduler.scala 225:53]
          inputBufferPopReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          skip @[IglooScheduler.scala 225:53]
        node _T_104 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 228:54]
        node _T_105 = asUInt(_T_104) @[IglooScheduler.scala 228:54]
        node _T_106 = tail(_T_105, 1) @[IglooScheduler.scala 228:54]
        node _T_107 = eq(acc, _T_106) @[IglooScheduler.scala 228:21]
        node _T_109 = eq(_T_101, UInt<1>("h00")) @[IglooScheduler.scala 225:53]
        node _T_110 = and(_T_109, _T_107) @[IglooScheduler.scala 228:59]
        when _T_110 : @[IglooScheduler.scala 228:59]
          inputBufferPopReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 228:59]
        node _T_113 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 232:53]
        node _T_114 = asUInt(_T_113) @[IglooScheduler.scala 232:53]
        node _T_115 = tail(_T_114, 1) @[IglooScheduler.scala 232:53]
        node _T_116 = lt(substate, _T_115) @[IglooScheduler.scala 232:20]
        when _T_116 : @[IglooScheduler.scala 232:58]
          node _T_118 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 142:30]
          node _T_119 = tail(_T_118, 1) @[IglooScheduler.scala 142:30]
          substate <= _T_119 @[IglooScheduler.scala 142:20]
          accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 232:58]
        node _T_123 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 237:61]
        node _T_124 = asUInt(_T_123) @[IglooScheduler.scala 237:61]
        node _T_125 = tail(_T_124, 1) @[IglooScheduler.scala 237:61]
        node _T_126 = eq(substate, _T_125) @[IglooScheduler.scala 237:26]
        node _T_128 = eq(_T_116, UInt<1>("h00")) @[IglooScheduler.scala 232:58]
        node _T_129 = and(_T_128, _T_126) @[IglooScheduler.scala 237:66]
        when _T_129 : @[IglooScheduler.scala 237:66]
          inputBufferPushReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          state <= UInt<8>("h06") @[IglooScheduler.scala 140:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
          maxResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          meanBufferResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
          maxOffsetReg <= UInt<1>("h00") @[IglooScheduler.scala 248:21]
          accEnReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 237:66]
        skip @[IglooScheduler.scala 214:20]
      node _T_138 = eq(state, UInt<8>("h06")) @[IglooScheduler.scala 138:25]
      when _T_138 : @[IglooScheduler.scala 253:18]
        node _T_140 = eq(reset, UInt<1>("h00")) @[IglooScheduler.scala 254:13]
        when _T_140 : @[IglooScheduler.scala 254:13]
          printf(clock, UInt<1>(1), "bn abmc: %d %d %d %d\n", hw.io.maa, hw.io.mab, hw.io.mam, hw.io.mac) @[IglooScheduler.scala 254:13]
          skip @[IglooScheduler.scala 254:13]
        node _T_142 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 257:27]
        node _T_143 = tail(_T_142, 1) @[IglooScheduler.scala 257:27]
        memOffset <= _T_143 @[IglooScheduler.scala 257:16]
        maxResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        meanBufferResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
        node _T_147 = add(maxOffsetReg, UInt<3>("h04")) @[IglooScheduler.scala 262:33]
        node _T_148 = tail(_T_147, 1) @[IglooScheduler.scala 262:33]
        maxOffsetReg <= _T_148 @[IglooScheduler.scala 262:19]
        node _T_150 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 142:30]
        node _T_151 = tail(_T_150, 1) @[IglooScheduler.scala 142:30]
        substate <= _T_151 @[IglooScheduler.scala 142:20]
        node _T_153 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 264:54]
        node _T_154 = asUInt(_T_153) @[IglooScheduler.scala 264:54]
        node _T_155 = tail(_T_154, 1) @[IglooScheduler.scala 264:54]
        node _T_156 = eq(substate, _T_155) @[IglooScheduler.scala 264:20]
        when _T_156 : @[IglooScheduler.scala 264:59]
          when layerParams.io.lastLayer : @[IglooScheduler.scala 267:40]
            maxEnReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
            state <= UInt<8>("h01") @[IglooScheduler.scala 140:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
            skip @[IglooScheduler.scala 267:40]
          node _T_161 = eq(layerParams.io.lastLayer, UInt<1>("h00")) @[IglooScheduler.scala 267:40]
          when _T_161 : @[IglooScheduler.scala 271:11]
            layerParams.io.shift <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            meanUpdateReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
            accResetReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 144:20]
            state <= UInt<8>("h05") @[IglooScheduler.scala 140:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 140:50]
            skip @[IglooScheduler.scala 271:11]
          skip @[IglooScheduler.scala 264:59]
        node _T_170 = eq(_T_156, UInt<1>("h00")) @[IglooScheduler.scala 264:59]
        when _T_170 : @[IglooScheduler.scala 286:9]
          accResetReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          accEnReg <= UInt<1>("h00") @[IglooScheduler.scala 145:22]
          skip @[IglooScheduler.scala 286:9]
        skip @[IglooScheduler.scala 253:18]
      skip @[IglooScheduler.scala 167:15]
    
