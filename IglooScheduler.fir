;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-05-30 21:57:15.424, builtAtMillis: 1496181435424
circuit IglooScheduler : 
  module Memo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    smem mem : UInt<18>[256] @[Memo.scala 15:24]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module AggregateMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<8>, flip waddr : UInt<8>, flip in : UInt<128>, out : UInt<128>, flip wen : UInt<1>, flip ren : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst Memo of Memo @[AggregateMem.scala 11:11]
    Memo.io is invalid
    Memo.clock <= clock
    Memo.reset <= reset
    inst Memo_1 of Memo_1 @[AggregateMem.scala 11:11]
    Memo_1.io is invalid
    Memo_1.clock <= clock
    Memo_1.reset <= reset
    inst Memo_2 of Memo_2 @[AggregateMem.scala 11:11]
    Memo_2.io is invalid
    Memo_2.clock <= clock
    Memo_2.reset <= reset
    inst Memo_3 of Memo_3 @[AggregateMem.scala 11:11]
    Memo_3.io is invalid
    Memo_3.clock <= clock
    Memo_3.reset <= reset
    inst Memo_4 of Memo_4 @[AggregateMem.scala 11:11]
    Memo_4.io is invalid
    Memo_4.clock <= clock
    Memo_4.reset <= reset
    inst Memo_5 of Memo_5 @[AggregateMem.scala 11:11]
    Memo_5.io is invalid
    Memo_5.clock <= clock
    Memo_5.reset <= reset
    inst Memo_6 of Memo_6 @[AggregateMem.scala 11:11]
    Memo_6.io is invalid
    Memo_6.clock <= clock
    Memo_6.reset <= reset
    inst Memo_7 of Memo_7 @[AggregateMem.scala 11:11]
    Memo_7.io is invalid
    Memo_7.clock <= clock
    Memo_7.reset <= reset
    Memo.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_1.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_1.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_1.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_1.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_2.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_2.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_2.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_2.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_3.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_3.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_3.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_3.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_4.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_4.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_4.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_4.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_5.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_5.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_5.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_5.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_6.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_6.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_6.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_6.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_7.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_7.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_7.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_7.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    node _T_9 = bits(io.in, 15, 0) @[AggregateMem.scala 40:88]
    node _T_10 = cat(UInt<2>("h00"), _T_9) @[Cat.scala 30:58]
    Memo.io.wrData <= _T_10 @[AggregateMem.scala 40:23]
    node _T_12 = bits(io.in, 31, 16) @[AggregateMem.scala 40:88]
    node _T_13 = cat(UInt<2>("h00"), _T_12) @[Cat.scala 30:58]
    Memo_1.io.wrData <= _T_13 @[AggregateMem.scala 40:23]
    node _T_15 = bits(io.in, 47, 32) @[AggregateMem.scala 40:88]
    node _T_16 = cat(UInt<2>("h00"), _T_15) @[Cat.scala 30:58]
    Memo_2.io.wrData <= _T_16 @[AggregateMem.scala 40:23]
    node _T_18 = bits(io.in, 63, 48) @[AggregateMem.scala 40:88]
    node _T_19 = cat(UInt<2>("h00"), _T_18) @[Cat.scala 30:58]
    Memo_3.io.wrData <= _T_19 @[AggregateMem.scala 40:23]
    node _T_21 = bits(io.in, 79, 64) @[AggregateMem.scala 40:88]
    node _T_22 = cat(UInt<2>("h00"), _T_21) @[Cat.scala 30:58]
    Memo_4.io.wrData <= _T_22 @[AggregateMem.scala 40:23]
    node _T_24 = bits(io.in, 95, 80) @[AggregateMem.scala 40:88]
    node _T_25 = cat(UInt<2>("h00"), _T_24) @[Cat.scala 30:58]
    Memo_5.io.wrData <= _T_25 @[AggregateMem.scala 40:23]
    node _T_27 = bits(io.in, 111, 96) @[AggregateMem.scala 40:88]
    node _T_28 = cat(UInt<2>("h00"), _T_27) @[Cat.scala 30:58]
    Memo_6.io.wrData <= _T_28 @[AggregateMem.scala 40:23]
    node _T_30 = bits(io.in, 127, 112) @[AggregateMem.scala 40:88]
    node _T_31 = cat(UInt<2>("h00"), _T_30) @[Cat.scala 30:58]
    Memo_7.io.wrData <= _T_31 @[AggregateMem.scala 40:23]
    node _T_32 = bits(Memo_7.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_33 = bits(Memo_6.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_34 = bits(Memo_5.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_35 = bits(Memo_4.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_36 = bits(Memo_3.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_37 = bits(Memo_2.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_38 = bits(Memo_1.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_39 = bits(Memo.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_40 = cat(_T_38, _T_39) @[Cat.scala 30:58]
    node _T_41 = cat(_T_36, _T_37) @[Cat.scala 30:58]
    node _T_42 = cat(_T_41, _T_40) @[Cat.scala 30:58]
    node _T_43 = cat(_T_34, _T_35) @[Cat.scala 30:58]
    node _T_44 = cat(_T_32, _T_33) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_42) @[Cat.scala 30:58]
    io.out <= _T_46 @[AggregateMem.scala 42:9]
    
  module BinaryBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip in : UInt<4>, flip fastin : UInt<128>, flip push : UInt<1>, flip fastpush : UInt<1>, out : UInt<32>, flip pop : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg wPos : UInt<6>, clock @[BinaryBuffer.scala 26:15]
    reg rPos : UInt<3>, clock @[BinaryBuffer.scala 27:15]
    reg mem : UInt<4>[64], clock @[BinaryBuffer.scala 29:14]
    node _T_80 = cat(mem[6], mem[7]) @[Cat.scala 30:58]
    node _T_81 = cat(mem[4], mem[5]) @[Cat.scala 30:58]
    node _T_82 = cat(_T_81, _T_80) @[Cat.scala 30:58]
    node _T_83 = cat(mem[2], mem[3]) @[Cat.scala 30:58]
    node _T_84 = cat(mem[0], mem[1]) @[Cat.scala 30:58]
    node _T_85 = cat(_T_84, _T_83) @[Cat.scala 30:58]
    node _T_86 = cat(_T_85, _T_82) @[Cat.scala 30:58]
    node _T_87 = cat(mem[14], mem[15]) @[Cat.scala 30:58]
    node _T_88 = cat(mem[12], mem[13]) @[Cat.scala 30:58]
    node _T_89 = cat(_T_88, _T_87) @[Cat.scala 30:58]
    node _T_90 = cat(mem[10], mem[11]) @[Cat.scala 30:58]
    node _T_91 = cat(mem[8], mem[9]) @[Cat.scala 30:58]
    node _T_92 = cat(_T_91, _T_90) @[Cat.scala 30:58]
    node _T_93 = cat(_T_92, _T_89) @[Cat.scala 30:58]
    node _T_94 = cat(mem[22], mem[23]) @[Cat.scala 30:58]
    node _T_95 = cat(mem[20], mem[21]) @[Cat.scala 30:58]
    node _T_96 = cat(_T_95, _T_94) @[Cat.scala 30:58]
    node _T_97 = cat(mem[18], mem[19]) @[Cat.scala 30:58]
    node _T_98 = cat(mem[16], mem[17]) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, _T_97) @[Cat.scala 30:58]
    node _T_100 = cat(_T_99, _T_96) @[Cat.scala 30:58]
    node _T_101 = cat(mem[30], mem[31]) @[Cat.scala 30:58]
    node _T_102 = cat(mem[28], mem[29]) @[Cat.scala 30:58]
    node _T_103 = cat(_T_102, _T_101) @[Cat.scala 30:58]
    node _T_104 = cat(mem[26], mem[27]) @[Cat.scala 30:58]
    node _T_105 = cat(mem[24], mem[25]) @[Cat.scala 30:58]
    node _T_106 = cat(_T_105, _T_104) @[Cat.scala 30:58]
    node _T_107 = cat(_T_106, _T_103) @[Cat.scala 30:58]
    node _T_108 = cat(mem[38], mem[39]) @[Cat.scala 30:58]
    node _T_109 = cat(mem[36], mem[37]) @[Cat.scala 30:58]
    node _T_110 = cat(_T_109, _T_108) @[Cat.scala 30:58]
    node _T_111 = cat(mem[34], mem[35]) @[Cat.scala 30:58]
    node _T_112 = cat(mem[32], mem[33]) @[Cat.scala 30:58]
    node _T_113 = cat(_T_112, _T_111) @[Cat.scala 30:58]
    node _T_114 = cat(_T_113, _T_110) @[Cat.scala 30:58]
    node _T_115 = cat(mem[46], mem[47]) @[Cat.scala 30:58]
    node _T_116 = cat(mem[44], mem[45]) @[Cat.scala 30:58]
    node _T_117 = cat(_T_116, _T_115) @[Cat.scala 30:58]
    node _T_118 = cat(mem[42], mem[43]) @[Cat.scala 30:58]
    node _T_119 = cat(mem[40], mem[41]) @[Cat.scala 30:58]
    node _T_120 = cat(_T_119, _T_118) @[Cat.scala 30:58]
    node _T_121 = cat(_T_120, _T_117) @[Cat.scala 30:58]
    node _T_122 = cat(mem[54], mem[55]) @[Cat.scala 30:58]
    node _T_123 = cat(mem[52], mem[53]) @[Cat.scala 30:58]
    node _T_124 = cat(_T_123, _T_122) @[Cat.scala 30:58]
    node _T_125 = cat(mem[50], mem[51]) @[Cat.scala 30:58]
    node _T_126 = cat(mem[48], mem[49]) @[Cat.scala 30:58]
    node _T_127 = cat(_T_126, _T_125) @[Cat.scala 30:58]
    node _T_128 = cat(_T_127, _T_124) @[Cat.scala 30:58]
    node _T_129 = cat(mem[62], mem[63]) @[Cat.scala 30:58]
    node _T_130 = cat(mem[60], mem[61]) @[Cat.scala 30:58]
    node _T_131 = cat(_T_130, _T_129) @[Cat.scala 30:58]
    node _T_132 = cat(mem[58], mem[59]) @[Cat.scala 30:58]
    node _T_133 = cat(mem[56], mem[57]) @[Cat.scala 30:58]
    node _T_134 = cat(_T_133, _T_132) @[Cat.scala 30:58]
    node _T_135 = cat(_T_134, _T_131) @[Cat.scala 30:58]
    wire catMem : UInt<32>[8] @[BinaryBuffer.scala 30:17]
    catMem is invalid @[BinaryBuffer.scala 30:17]
    catMem[0] <= _T_86 @[BinaryBuffer.scala 30:17]
    catMem[1] <= _T_93 @[BinaryBuffer.scala 30:17]
    catMem[2] <= _T_100 @[BinaryBuffer.scala 30:17]
    catMem[3] <= _T_107 @[BinaryBuffer.scala 30:17]
    catMem[4] <= _T_114 @[BinaryBuffer.scala 30:17]
    catMem[5] <= _T_121 @[BinaryBuffer.scala 30:17]
    catMem[6] <= _T_128 @[BinaryBuffer.scala 30:17]
    catMem[7] <= _T_135 @[BinaryBuffer.scala 30:17]
    node _T_149 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 32:23]
    node _T_150 = and(io.fastpush, _T_149) @[BinaryBuffer.scala 32:20]
    when _T_150 : @[BinaryBuffer.scala 32:35]
      node _T_152 = add(wPos, UInt<1>("h00")) @[BinaryBuffer.scala 34:15]
      node _T_153 = tail(_T_152, 1) @[BinaryBuffer.scala 34:15]
      node _T_155 = bits(io.fastin, 127, 124) @[BinaryBuffer.scala 34:31]
      mem[_T_153] <= _T_155 @[BinaryBuffer.scala 34:20]
      node _T_157 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 34:15]
      node _T_158 = tail(_T_157, 1) @[BinaryBuffer.scala 34:15]
      node _T_160 = bits(io.fastin, 123, 120) @[BinaryBuffer.scala 34:31]
      mem[_T_158] <= _T_160 @[BinaryBuffer.scala 34:20]
      node _T_162 = add(wPos, UInt<2>("h02")) @[BinaryBuffer.scala 34:15]
      node _T_163 = tail(_T_162, 1) @[BinaryBuffer.scala 34:15]
      node _T_165 = bits(io.fastin, 119, 116) @[BinaryBuffer.scala 34:31]
      mem[_T_163] <= _T_165 @[BinaryBuffer.scala 34:20]
      node _T_167 = add(wPos, UInt<2>("h03")) @[BinaryBuffer.scala 34:15]
      node _T_168 = tail(_T_167, 1) @[BinaryBuffer.scala 34:15]
      node _T_170 = bits(io.fastin, 115, 112) @[BinaryBuffer.scala 34:31]
      mem[_T_168] <= _T_170 @[BinaryBuffer.scala 34:20]
      node _T_172 = add(wPos, UInt<3>("h04")) @[BinaryBuffer.scala 34:15]
      node _T_173 = tail(_T_172, 1) @[BinaryBuffer.scala 34:15]
      node _T_175 = bits(io.fastin, 111, 108) @[BinaryBuffer.scala 34:31]
      mem[_T_173] <= _T_175 @[BinaryBuffer.scala 34:20]
      node _T_177 = add(wPos, UInt<3>("h05")) @[BinaryBuffer.scala 34:15]
      node _T_178 = tail(_T_177, 1) @[BinaryBuffer.scala 34:15]
      node _T_180 = bits(io.fastin, 107, 104) @[BinaryBuffer.scala 34:31]
      mem[_T_178] <= _T_180 @[BinaryBuffer.scala 34:20]
      node _T_182 = add(wPos, UInt<3>("h06")) @[BinaryBuffer.scala 34:15]
      node _T_183 = tail(_T_182, 1) @[BinaryBuffer.scala 34:15]
      node _T_185 = bits(io.fastin, 103, 100) @[BinaryBuffer.scala 34:31]
      mem[_T_183] <= _T_185 @[BinaryBuffer.scala 34:20]
      node _T_187 = add(wPos, UInt<3>("h07")) @[BinaryBuffer.scala 34:15]
      node _T_188 = tail(_T_187, 1) @[BinaryBuffer.scala 34:15]
      node _T_190 = bits(io.fastin, 99, 96) @[BinaryBuffer.scala 34:31]
      mem[_T_188] <= _T_190 @[BinaryBuffer.scala 34:20]
      node _T_192 = add(wPos, UInt<4>("h08")) @[BinaryBuffer.scala 34:15]
      node _T_193 = tail(_T_192, 1) @[BinaryBuffer.scala 34:15]
      node _T_195 = bits(io.fastin, 95, 92) @[BinaryBuffer.scala 34:31]
      mem[_T_193] <= _T_195 @[BinaryBuffer.scala 34:20]
      node _T_197 = add(wPos, UInt<4>("h09")) @[BinaryBuffer.scala 34:15]
      node _T_198 = tail(_T_197, 1) @[BinaryBuffer.scala 34:15]
      node _T_200 = bits(io.fastin, 91, 88) @[BinaryBuffer.scala 34:31]
      mem[_T_198] <= _T_200 @[BinaryBuffer.scala 34:20]
      node _T_202 = add(wPos, UInt<4>("h0a")) @[BinaryBuffer.scala 34:15]
      node _T_203 = tail(_T_202, 1) @[BinaryBuffer.scala 34:15]
      node _T_205 = bits(io.fastin, 87, 84) @[BinaryBuffer.scala 34:31]
      mem[_T_203] <= _T_205 @[BinaryBuffer.scala 34:20]
      node _T_207 = add(wPos, UInt<4>("h0b")) @[BinaryBuffer.scala 34:15]
      node _T_208 = tail(_T_207, 1) @[BinaryBuffer.scala 34:15]
      node _T_210 = bits(io.fastin, 83, 80) @[BinaryBuffer.scala 34:31]
      mem[_T_208] <= _T_210 @[BinaryBuffer.scala 34:20]
      node _T_212 = add(wPos, UInt<4>("h0c")) @[BinaryBuffer.scala 34:15]
      node _T_213 = tail(_T_212, 1) @[BinaryBuffer.scala 34:15]
      node _T_215 = bits(io.fastin, 79, 76) @[BinaryBuffer.scala 34:31]
      mem[_T_213] <= _T_215 @[BinaryBuffer.scala 34:20]
      node _T_217 = add(wPos, UInt<4>("h0d")) @[BinaryBuffer.scala 34:15]
      node _T_218 = tail(_T_217, 1) @[BinaryBuffer.scala 34:15]
      node _T_220 = bits(io.fastin, 75, 72) @[BinaryBuffer.scala 34:31]
      mem[_T_218] <= _T_220 @[BinaryBuffer.scala 34:20]
      node _T_222 = add(wPos, UInt<4>("h0e")) @[BinaryBuffer.scala 34:15]
      node _T_223 = tail(_T_222, 1) @[BinaryBuffer.scala 34:15]
      node _T_225 = bits(io.fastin, 71, 68) @[BinaryBuffer.scala 34:31]
      mem[_T_223] <= _T_225 @[BinaryBuffer.scala 34:20]
      node _T_227 = add(wPos, UInt<4>("h0f")) @[BinaryBuffer.scala 34:15]
      node _T_228 = tail(_T_227, 1) @[BinaryBuffer.scala 34:15]
      node _T_230 = bits(io.fastin, 67, 64) @[BinaryBuffer.scala 34:31]
      mem[_T_228] <= _T_230 @[BinaryBuffer.scala 34:20]
      node _T_232 = add(wPos, UInt<5>("h010")) @[BinaryBuffer.scala 34:15]
      node _T_233 = tail(_T_232, 1) @[BinaryBuffer.scala 34:15]
      node _T_235 = bits(io.fastin, 63, 60) @[BinaryBuffer.scala 34:31]
      mem[_T_233] <= _T_235 @[BinaryBuffer.scala 34:20]
      node _T_237 = add(wPos, UInt<5>("h011")) @[BinaryBuffer.scala 34:15]
      node _T_238 = tail(_T_237, 1) @[BinaryBuffer.scala 34:15]
      node _T_240 = bits(io.fastin, 59, 56) @[BinaryBuffer.scala 34:31]
      mem[_T_238] <= _T_240 @[BinaryBuffer.scala 34:20]
      node _T_242 = add(wPos, UInt<5>("h012")) @[BinaryBuffer.scala 34:15]
      node _T_243 = tail(_T_242, 1) @[BinaryBuffer.scala 34:15]
      node _T_245 = bits(io.fastin, 55, 52) @[BinaryBuffer.scala 34:31]
      mem[_T_243] <= _T_245 @[BinaryBuffer.scala 34:20]
      node _T_247 = add(wPos, UInt<5>("h013")) @[BinaryBuffer.scala 34:15]
      node _T_248 = tail(_T_247, 1) @[BinaryBuffer.scala 34:15]
      node _T_250 = bits(io.fastin, 51, 48) @[BinaryBuffer.scala 34:31]
      mem[_T_248] <= _T_250 @[BinaryBuffer.scala 34:20]
      node _T_252 = add(wPos, UInt<5>("h014")) @[BinaryBuffer.scala 34:15]
      node _T_253 = tail(_T_252, 1) @[BinaryBuffer.scala 34:15]
      node _T_255 = bits(io.fastin, 47, 44) @[BinaryBuffer.scala 34:31]
      mem[_T_253] <= _T_255 @[BinaryBuffer.scala 34:20]
      node _T_257 = add(wPos, UInt<5>("h015")) @[BinaryBuffer.scala 34:15]
      node _T_258 = tail(_T_257, 1) @[BinaryBuffer.scala 34:15]
      node _T_260 = bits(io.fastin, 43, 40) @[BinaryBuffer.scala 34:31]
      mem[_T_258] <= _T_260 @[BinaryBuffer.scala 34:20]
      node _T_262 = add(wPos, UInt<5>("h016")) @[BinaryBuffer.scala 34:15]
      node _T_263 = tail(_T_262, 1) @[BinaryBuffer.scala 34:15]
      node _T_265 = bits(io.fastin, 39, 36) @[BinaryBuffer.scala 34:31]
      mem[_T_263] <= _T_265 @[BinaryBuffer.scala 34:20]
      node _T_267 = add(wPos, UInt<5>("h017")) @[BinaryBuffer.scala 34:15]
      node _T_268 = tail(_T_267, 1) @[BinaryBuffer.scala 34:15]
      node _T_270 = bits(io.fastin, 35, 32) @[BinaryBuffer.scala 34:31]
      mem[_T_268] <= _T_270 @[BinaryBuffer.scala 34:20]
      node _T_272 = add(wPos, UInt<5>("h018")) @[BinaryBuffer.scala 34:15]
      node _T_273 = tail(_T_272, 1) @[BinaryBuffer.scala 34:15]
      node _T_275 = bits(io.fastin, 31, 28) @[BinaryBuffer.scala 34:31]
      mem[_T_273] <= _T_275 @[BinaryBuffer.scala 34:20]
      node _T_277 = add(wPos, UInt<5>("h019")) @[BinaryBuffer.scala 34:15]
      node _T_278 = tail(_T_277, 1) @[BinaryBuffer.scala 34:15]
      node _T_280 = bits(io.fastin, 27, 24) @[BinaryBuffer.scala 34:31]
      mem[_T_278] <= _T_280 @[BinaryBuffer.scala 34:20]
      node _T_282 = add(wPos, UInt<5>("h01a")) @[BinaryBuffer.scala 34:15]
      node _T_283 = tail(_T_282, 1) @[BinaryBuffer.scala 34:15]
      node _T_285 = bits(io.fastin, 23, 20) @[BinaryBuffer.scala 34:31]
      mem[_T_283] <= _T_285 @[BinaryBuffer.scala 34:20]
      node _T_287 = add(wPos, UInt<5>("h01b")) @[BinaryBuffer.scala 34:15]
      node _T_288 = tail(_T_287, 1) @[BinaryBuffer.scala 34:15]
      node _T_290 = bits(io.fastin, 19, 16) @[BinaryBuffer.scala 34:31]
      mem[_T_288] <= _T_290 @[BinaryBuffer.scala 34:20]
      node _T_292 = add(wPos, UInt<5>("h01c")) @[BinaryBuffer.scala 34:15]
      node _T_293 = tail(_T_292, 1) @[BinaryBuffer.scala 34:15]
      node _T_295 = bits(io.fastin, 15, 12) @[BinaryBuffer.scala 34:31]
      mem[_T_293] <= _T_295 @[BinaryBuffer.scala 34:20]
      node _T_297 = add(wPos, UInt<5>("h01d")) @[BinaryBuffer.scala 34:15]
      node _T_298 = tail(_T_297, 1) @[BinaryBuffer.scala 34:15]
      node _T_300 = bits(io.fastin, 11, 8) @[BinaryBuffer.scala 34:31]
      mem[_T_298] <= _T_300 @[BinaryBuffer.scala 34:20]
      node _T_302 = add(wPos, UInt<5>("h01e")) @[BinaryBuffer.scala 34:15]
      node _T_303 = tail(_T_302, 1) @[BinaryBuffer.scala 34:15]
      node _T_305 = bits(io.fastin, 7, 4) @[BinaryBuffer.scala 34:31]
      mem[_T_303] <= _T_305 @[BinaryBuffer.scala 34:20]
      node _T_307 = add(wPos, UInt<5>("h01f")) @[BinaryBuffer.scala 34:15]
      node _T_308 = tail(_T_307, 1) @[BinaryBuffer.scala 34:15]
      node _T_310 = bits(io.fastin, 3, 0) @[BinaryBuffer.scala 34:31]
      mem[_T_308] <= _T_310 @[BinaryBuffer.scala 34:20]
      node _T_312 = add(wPos, UInt<6>("h020")) @[BinaryBuffer.scala 36:15]
      node _T_313 = tail(_T_312, 1) @[BinaryBuffer.scala 36:15]
      wPos <= _T_313 @[BinaryBuffer.scala 36:9]
      skip @[BinaryBuffer.scala 32:35]
    node _T_315 = eq(_T_150, UInt<1>("h00")) @[BinaryBuffer.scala 32:35]
    when _T_315 : @[BinaryBuffer.scala 37:5]
      when io.push : @[BinaryBuffer.scala 38:19]
        node _T_317 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 39:12]
        when _T_317 : @[BinaryBuffer.scala 39:25]
          mem[wPos] <= io.in @[BinaryBuffer.scala 40:19]
          node _T_320 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 41:22]
          node _T_321 = tail(_T_320, 1) @[BinaryBuffer.scala 41:22]
          wPos <= _T_321 @[BinaryBuffer.scala 41:14]
          skip @[BinaryBuffer.scala 39:25]
        node _T_323 = eq(_T_317, UInt<1>("h00")) @[BinaryBuffer.scala 39:25]
        when _T_323 : @[BinaryBuffer.scala 42:9]
          mem[0] <= io.in @[BinaryBuffer.scala 43:16]
          wPos <= UInt<1>("h01") @[BinaryBuffer.scala 44:14]
          rPos <= UInt<1>("h00") @[BinaryBuffer.scala 45:14]
          skip @[BinaryBuffer.scala 42:9]
        skip @[BinaryBuffer.scala 38:19]
      when io.pop : @[BinaryBuffer.scala 49:18]
        node _T_327 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 50:12]
        when _T_327 : @[BinaryBuffer.scala 50:25]
          node _T_329 = add(rPos, UInt<1>("h01")) @[BinaryBuffer.scala 51:22]
          node _T_330 = tail(_T_329, 1) @[BinaryBuffer.scala 51:22]
          rPos <= _T_330 @[BinaryBuffer.scala 51:14]
          skip @[BinaryBuffer.scala 50:25]
        node _T_332 = eq(_T_327, UInt<1>("h00")) @[BinaryBuffer.scala 50:25]
        when _T_332 : @[BinaryBuffer.scala 52:9]
          rPos <= UInt<1>("h01") @[BinaryBuffer.scala 53:14]
          wPos <= UInt<1>("h00") @[BinaryBuffer.scala 54:14]
          skip @[BinaryBuffer.scala 52:9]
        skip @[BinaryBuffer.scala 49:18]
      skip @[BinaryBuffer.scala 37:5]
    node _T_336 = eq(io.pop, UInt<1>("h00")) @[BinaryBuffer.scala 58:20]
    node _T_337 = and(io.reset, _T_336) @[BinaryBuffer.scala 58:17]
    node _T_339 = eq(io.push, UInt<1>("h00")) @[BinaryBuffer.scala 58:33]
    node _T_340 = and(_T_337, _T_339) @[BinaryBuffer.scala 58:30]
    when _T_340 : @[BinaryBuffer.scala 58:44]
      wPos <= UInt<1>("h00") @[BinaryBuffer.scala 59:9]
      rPos <= UInt<1>("h00") @[BinaryBuffer.scala 60:9]
      skip @[BinaryBuffer.scala 58:44]
    io.out <= catMem[rPos] @[BinaryBuffer.scala 63:9]
    
  module XNOR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<32>, flip in2 : UInt<32>[4], out : UInt<32>[4]}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_21 = xor(io.in1, io.in2[0]) @[XNOR.scala 18:27]
    node _T_22 = not(_T_21) @[XNOR.scala 18:18]
    io.out[0] <= _T_22 @[XNOR.scala 18:15]
    node _T_23 = xor(io.in1, io.in2[1]) @[XNOR.scala 18:27]
    node _T_24 = not(_T_23) @[XNOR.scala 18:18]
    io.out[1] <= _T_24 @[XNOR.scala 18:15]
    node _T_25 = xor(io.in1, io.in2[2]) @[XNOR.scala 18:27]
    node _T_26 = not(_T_25) @[XNOR.scala 18:18]
    io.out[2] <= _T_26 @[XNOR.scala 18:15]
    node _T_27 = xor(io.in1, io.in2[3]) @[XNOR.scala 18:27]
    node _T_28 = not(_T_27) @[XNOR.scala 18:18]
    io.out[3] <= _T_28 @[XNOR.scala 18:15]
    
  module MeanBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>[4], flip cntInverse65536 : UInt<16>, flip reset : UInt<1>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg acc : UInt<32>, clock @[MeanBuffer.scala 19:16]
    reg result : UInt<32>, clock @[MeanBuffer.scala 20:17]
    io.out <= result @[MeanBuffer.scala 21:9]
    node _T_17 = gt(io.in[0], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_19 = sub(asSInt(UInt<1>("h00")), io.in[0]) @[MeanBuffer.scala 17:42]
    node _T_20 = tail(_T_19, 1) @[MeanBuffer.scala 17:42]
    node _T_21 = asSInt(_T_20) @[MeanBuffer.scala 17:42]
    node _T_22 = mux(_T_17, io.in[0], _T_21) @[MeanBuffer.scala 17:25]
    node _T_23 = asUInt(_T_22) @[MeanBuffer.scala 17:53]
    node _T_25 = gt(io.in[1], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_27 = sub(asSInt(UInt<1>("h00")), io.in[1]) @[MeanBuffer.scala 17:42]
    node _T_28 = tail(_T_27, 1) @[MeanBuffer.scala 17:42]
    node _T_29 = asSInt(_T_28) @[MeanBuffer.scala 17:42]
    node _T_30 = mux(_T_25, io.in[1], _T_29) @[MeanBuffer.scala 17:25]
    node _T_31 = asUInt(_T_30) @[MeanBuffer.scala 17:53]
    node _T_33 = gt(io.in[2], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_35 = sub(asSInt(UInt<1>("h00")), io.in[2]) @[MeanBuffer.scala 17:42]
    node _T_36 = tail(_T_35, 1) @[MeanBuffer.scala 17:42]
    node _T_37 = asSInt(_T_36) @[MeanBuffer.scala 17:42]
    node _T_38 = mux(_T_33, io.in[2], _T_37) @[MeanBuffer.scala 17:25]
    node _T_39 = asUInt(_T_38) @[MeanBuffer.scala 17:53]
    node _T_41 = gt(io.in[3], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_43 = sub(asSInt(UInt<1>("h00")), io.in[3]) @[MeanBuffer.scala 17:42]
    node _T_44 = tail(_T_43, 1) @[MeanBuffer.scala 17:42]
    node _T_45 = asSInt(_T_44) @[MeanBuffer.scala 17:42]
    node _T_46 = mux(_T_41, io.in[3], _T_45) @[MeanBuffer.scala 17:25]
    node _T_47 = asUInt(_T_46) @[MeanBuffer.scala 17:53]
    node _T_48 = add(_T_23, _T_31) @[ArraySum.scala 13:14]
    node _T_49 = tail(_T_48, 1) @[ArraySum.scala 13:14]
    node _T_50 = add(_T_39, _T_47) @[ArraySum.scala 13:14]
    node _T_51 = tail(_T_50, 1) @[ArraySum.scala 13:14]
    node _T_52 = add(_T_49, _T_51) @[ArraySum.scala 13:14]
    node absSum = tail(_T_52, 1) @[ArraySum.scala 13:14]
    node _T_54 = eq(io.reset, UInt<1>("h00")) @[MeanBuffer.scala 24:8]
    when _T_54 : @[MeanBuffer.scala 24:21]
      node _T_56 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 26:13]
      when _T_56 : @[MeanBuffer.scala 26:13]
        printf(clock, UInt<1>(1), "Mean 0 Update! %d %d %d\n", io.in[0], acc, io.cntInverse65536) @[MeanBuffer.scala 26:13]
        skip @[MeanBuffer.scala 26:13]
      node _T_58 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 26:13]
      when _T_58 : @[MeanBuffer.scala 26:13]
        printf(clock, UInt<1>(1), "Mean 1 Update! %d %d %d\n", io.in[1], acc, io.cntInverse65536) @[MeanBuffer.scala 26:13]
        skip @[MeanBuffer.scala 26:13]
      node _T_60 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 26:13]
      when _T_60 : @[MeanBuffer.scala 26:13]
        printf(clock, UInt<1>(1), "Mean 2 Update! %d %d %d\n", io.in[2], acc, io.cntInverse65536) @[MeanBuffer.scala 26:13]
        skip @[MeanBuffer.scala 26:13]
      node _T_62 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 26:13]
      when _T_62 : @[MeanBuffer.scala 26:13]
        printf(clock, UInt<1>(1), "Mean 3 Update! %d %d %d\n", io.in[3], acc, io.cntInverse65536) @[MeanBuffer.scala 26:13]
        skip @[MeanBuffer.scala 26:13]
      node _T_63 = add(acc, absSum) @[MeanBuffer.scala 27:16]
      node _T_64 = tail(_T_63, 1) @[MeanBuffer.scala 27:16]
      acc <= _T_64 @[MeanBuffer.scala 27:9]
      node _T_65 = add(acc, absSum) @[MeanBuffer.scala 28:20]
      node _T_66 = tail(_T_65, 1) @[MeanBuffer.scala 28:20]
      node _T_67 = mul(_T_66, io.cntInverse65536) @[MeanBuffer.scala 28:29]
      node _T_68 = shr(_T_67, 16) @[MeanBuffer.scala 28:50]
      result <= _T_68 @[MeanBuffer.scala 28:12]
      skip @[MeanBuffer.scala 24:21]
    node _T_70 = eq(_T_54, UInt<1>("h00")) @[MeanBuffer.scala 24:21]
    when _T_70 : @[MeanBuffer.scala 29:5]
      node _T_72 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 31:13]
      when _T_72 : @[MeanBuffer.scala 31:13]
        printf(clock, UInt<1>(1), "Mean 0 Reset! %d\n", io.in[0]) @[MeanBuffer.scala 31:13]
        skip @[MeanBuffer.scala 31:13]
      node _T_74 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 31:13]
      when _T_74 : @[MeanBuffer.scala 31:13]
        printf(clock, UInt<1>(1), "Mean 1 Reset! %d\n", io.in[1]) @[MeanBuffer.scala 31:13]
        skip @[MeanBuffer.scala 31:13]
      node _T_76 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 31:13]
      when _T_76 : @[MeanBuffer.scala 31:13]
        printf(clock, UInt<1>(1), "Mean 2 Reset! %d\n", io.in[2]) @[MeanBuffer.scala 31:13]
        skip @[MeanBuffer.scala 31:13]
      node _T_78 = eq(reset, UInt<1>("h00")) @[MeanBuffer.scala 31:13]
      when _T_78 : @[MeanBuffer.scala 31:13]
        printf(clock, UInt<1>(1), "Mean 3 Reset! %d\n", io.in[3]) @[MeanBuffer.scala 31:13]
        skip @[MeanBuffer.scala 31:13]
      acc <= absSum @[MeanBuffer.scala 32:9]
      node _T_79 = mul(absSum, io.cntInverse65536) @[MeanBuffer.scala 33:23]
      node _T_80 = shr(_T_79, 16) @[MeanBuffer.scala 33:44]
      result <= _T_80 @[MeanBuffer.scala 33:12]
      skip @[MeanBuffer.scala 29:5]
    
  module DelayedOutput : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip input : UInt<32>, flip update : UInt<1>, output : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg reg : UInt<32>, clock @[DelayedOutput.scala 17:14]
    io.output <= reg @[DelayedOutput.scala 18:12]
    when io.reset : @[DelayedOutput.scala 19:18]
      reg <= UInt<32>("h01") @[DelayedOutput.scala 20:8]
      node _T_9 = eq(reset, UInt<1>("h00")) @[DelayedOutput.scala 21:11]
      when _T_9 : @[DelayedOutput.scala 21:11]
        printf(clock, UInt<1>(1), "Delay reset! %d\n", reg) @[DelayedOutput.scala 21:11]
        skip @[DelayedOutput.scala 21:11]
      skip @[DelayedOutput.scala 19:18]
    node _T_11 = eq(io.reset, UInt<1>("h00")) @[DelayedOutput.scala 19:18]
    node _T_12 = and(_T_11, io.update) @[DelayedOutput.scala 22:24]
    when _T_12 : @[DelayedOutput.scala 22:24]
      node _T_14 = eq(reset, UInt<1>("h00")) @[DelayedOutput.scala 23:11]
      when _T_14 : @[DelayedOutput.scala 23:11]
        printf(clock, UInt<1>(1), "Delay Update! %d\n", io.input) @[DelayedOutput.scala 23:11]
        skip @[DelayedOutput.scala 23:11]
      reg <= io.input @[DelayedOutput.scala 24:8]
      skip @[DelayedOutput.scala 22:24]
    
  module MaxBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip en : UInt<1>, flip in : SInt<32>[4], flip offset : UInt<4>, out : UInt<4>, flip maxLen : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg idxReg : UInt<4>, clock @[MaxBuffer.scala 19:17]
    reg dataReg : SInt<32>, clock @[MaxBuffer.scala 20:18]
    io.out <= idxReg @[MaxBuffer.scala 22:9]
    node _T_19 = add(UInt<1>("h00"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_20 = tail(_T_19, 1) @[MaxBuffer.scala 33:56]
    node _T_22 = add(UInt<1>("h01"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_23 = tail(_T_22, 1) @[MaxBuffer.scala 33:56]
    node _T_25 = add(UInt<2>("h02"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_26 = tail(_T_25, 1) @[MaxBuffer.scala 33:56]
    node _T_28 = add(UInt<2>("h03"), io.offset) @[MaxBuffer.scala 33:56]
    node _T_29 = tail(_T_28, 1) @[MaxBuffer.scala 33:56]
    node _T_30 = gt(io.in[0], io.in[1]) @[MaxBuffer.scala 28:28]
    node _T_31 = geq(_T_23, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_32 = or(_T_30, _T_31) @[MaxBuffer.scala 28:43]
    node _T_33 = mux(_T_32, _T_20, _T_23) @[MaxBuffer.scala 29:13]
    node _T_34 = mux(_T_32, io.in[0], io.in[1]) @[MaxBuffer.scala 29:47]
    node _T_35 = gt(io.in[2], io.in[3]) @[MaxBuffer.scala 28:28]
    node _T_36 = geq(_T_29, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_37 = or(_T_35, _T_36) @[MaxBuffer.scala 28:43]
    node _T_38 = mux(_T_37, _T_26, _T_29) @[MaxBuffer.scala 29:13]
    node _T_39 = mux(_T_37, io.in[2], io.in[3]) @[MaxBuffer.scala 29:47]
    node _T_40 = gt(_T_34, _T_39) @[MaxBuffer.scala 28:28]
    node _T_41 = geq(_T_38, io.maxLen) @[MaxBuffer.scala 28:56]
    node _T_42 = or(_T_40, _T_41) @[MaxBuffer.scala 28:43]
    node _T_43 = mux(_T_42, _T_33, _T_38) @[MaxBuffer.scala 29:13]
    node _T_44 = mux(_T_42, _T_34, _T_39) @[MaxBuffer.scala 29:47]
    node cmp2 = gt(dataReg, _T_44) @[MaxBuffer.scala 35:20]
    when io.en : @[MaxBuffer.scala 37:15]
      node _T_46 = eq(io.reset, UInt<1>("h00")) @[MaxBuffer.scala 38:10]
      when _T_46 : @[MaxBuffer.scala 38:23]
        node _T_47 = mux(cmp2, dataReg, _T_44) @[MaxBuffer.scala 39:21]
        dataReg <= _T_47 @[MaxBuffer.scala 39:15]
        node _T_48 = mux(cmp2, idxReg, _T_43) @[MaxBuffer.scala 40:19]
        idxReg <= _T_48 @[MaxBuffer.scala 40:14]
        skip @[MaxBuffer.scala 38:23]
      node _T_50 = eq(_T_46, UInt<1>("h00")) @[MaxBuffer.scala 38:23]
      when _T_50 : @[MaxBuffer.scala 41:7]
        dataReg <= _T_44 @[MaxBuffer.scala 42:15]
        idxReg <= _T_43 @[MaxBuffer.scala 43:13]
        skip @[MaxBuffer.scala 41:7]
      skip @[MaxBuffer.scala 37:15]
    
  module Accumulator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_49 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 24:11]
      when _T_49 : @[Accumulator.scala 24:11]
        printf(clock, UInt<1>(1), "Acc Update! %d, %d, %d\n", io.in, accumulator[io.sel], io.sel) @[Accumulator.scala 24:11]
        skip @[Accumulator.scala 24:11]
      node _T_50 = add(accumulator[io.sel], io.in) @[Accumulator.scala 25:16]
      node _T_51 = tail(_T_50, 1) @[Accumulator.scala 25:16]
      node _T_52 = asSInt(_T_51) @[Accumulator.scala 25:16]
      accumulator[io.sel] <= _T_52 @[Accumulator.scala 25:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 28:10]
    node _T_53 = and(io.en, io.reset) @[Accumulator.scala 30:14]
    when _T_53 : @[Accumulator.scala 30:26]
      node _T_55 = eq(reset, UInt<1>("h00")) @[Accumulator.scala 31:11]
      when _T_55 : @[Accumulator.scala 31:11]
        printf(clock, UInt<1>(1), "Acc Reset! %d @ %d\n", io.in, io.sel) @[Accumulator.scala 31:11]
        skip @[Accumulator.scala 31:11]
      node _T_57 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 33:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[0] <= _T_59 @[Accumulator.scala 33:21]
      node _T_61 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 33:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[1] <= _T_63 @[Accumulator.scala 33:21]
      node _T_65 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 33:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[2] <= _T_67 @[Accumulator.scala 33:21]
      node _T_69 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 33:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[3] <= _T_71 @[Accumulator.scala 33:21]
      node _T_73 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 33:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[4] <= _T_75 @[Accumulator.scala 33:21]
      node _T_77 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 33:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[5] <= _T_79 @[Accumulator.scala 33:21]
      node _T_81 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 33:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[6] <= _T_83 @[Accumulator.scala 33:21]
      node _T_85 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 33:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[7] <= _T_87 @[Accumulator.scala 33:21]
      node _T_89 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 33:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[8] <= _T_91 @[Accumulator.scala 33:21]
      node _T_93 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 33:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[9] <= _T_95 @[Accumulator.scala 33:21]
      node _T_97 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 33:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[10] <= _T_99 @[Accumulator.scala 33:21]
      node _T_101 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 33:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[11] <= _T_103 @[Accumulator.scala 33:21]
      node _T_105 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 33:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[12] <= _T_107 @[Accumulator.scala 33:21]
      node _T_109 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 33:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[13] <= _T_111 @[Accumulator.scala 33:21]
      node _T_113 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 33:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[14] <= _T_115 @[Accumulator.scala 33:21]
      node _T_117 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 33:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[15] <= _T_119 @[Accumulator.scala 33:21]
      node _T_121 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 33:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[16] <= _T_123 @[Accumulator.scala 33:21]
      node _T_125 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 33:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[17] <= _T_127 @[Accumulator.scala 33:21]
      node _T_129 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 33:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[18] <= _T_131 @[Accumulator.scala 33:21]
      node _T_133 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 33:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[19] <= _T_135 @[Accumulator.scala 33:21]
      node _T_137 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 33:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[20] <= _T_139 @[Accumulator.scala 33:21]
      node _T_141 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 33:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[21] <= _T_143 @[Accumulator.scala 33:21]
      node _T_145 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 33:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[22] <= _T_147 @[Accumulator.scala 33:21]
      node _T_149 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 33:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[23] <= _T_151 @[Accumulator.scala 33:21]
      node _T_153 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 33:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[24] <= _T_155 @[Accumulator.scala 33:21]
      node _T_157 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 33:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[25] <= _T_159 @[Accumulator.scala 33:21]
      node _T_161 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 33:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[26] <= _T_163 @[Accumulator.scala 33:21]
      node _T_165 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 33:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[27] <= _T_167 @[Accumulator.scala 33:21]
      node _T_169 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 33:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[28] <= _T_171 @[Accumulator.scala 33:21]
      node _T_173 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 33:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[29] <= _T_175 @[Accumulator.scala 33:21]
      node _T_177 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 33:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[30] <= _T_179 @[Accumulator.scala 33:21]
      node _T_181 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 33:30]
      node _T_183 = mux(_T_181, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 33:26]
      accumulator[31] <= _T_183 @[Accumulator.scala 33:21]
      skip @[Accumulator.scala 30:26]
    
  module MulAdd_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module XNORNetInference : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<128>, flip inputPush : UInt<1>, flip inputBufferPush : UInt<1>, flip inputBufferPop : UInt<1>, flip inputBufferReset : UInt<1>, flip memAddr : UInt<8>, memOut : UInt<128>, flip memWen : UInt<1>, flip memIn : UInt<128>, flip memWAddr : UInt<8>, flip accEn : UInt<1>, flip accSel : UInt<5>, flip accReset : UInt<1>, flip maxReset : UInt<1>, flip maxEn : UInt<1>, flip maxOffset : UInt<4>, flip featureNumInverse65536 : UInt<16>, flip actualFeatureNum : UInt<16>, flip meanReset : UInt<1>, flip meanUpdate : UInt<1>, flip meanBufferReset : UInt<1>, result : UInt<4>, mean : UInt<32>, xnorInput : UInt<32>, xnorWeight1 : UInt<32>, maa : SInt<16>, mab : SInt<16>, mam : UInt<32>, mac : SInt<16>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst mem of AggregateMem @[XNORNetInference.scala 24:17]
    mem.io is invalid
    mem.clock <= clock
    mem.reset <= reset
    mem.io.addr <= io.memAddr @[XNORNetInference.scala 72:14]
    io.memOut <= mem.io.out @[XNORNetInference.scala 73:12]
    mem.io.ren <= UInt<1>("h01") @[XNORNetInference.scala 74:13]
    mem.io.wen <= io.memWen @[XNORNetInference.scala 75:13]
    mem.io.in <= io.memIn @[XNORNetInference.scala 76:12]
    mem.io.waddr <= io.memWAddr @[XNORNetInference.scala 77:15]
    wire inputWire : UInt<4> @[XNORNetInference.scala 79:21]
    inputWire is invalid @[XNORNetInference.scala 79:21]
    inst binaryBuffer of BinaryBuffer @[XNORNetInference.scala 81:26]
    binaryBuffer.io is invalid
    binaryBuffer.clock <= clock
    binaryBuffer.reset <= reset
    binaryBuffer.io.in <= inputWire @[XNORNetInference.scala 86:21]
    binaryBuffer.io.push <= io.inputBufferPush @[XNORNetInference.scala 87:23]
    binaryBuffer.io.pop <= io.inputBufferPop @[XNORNetInference.scala 88:22]
    binaryBuffer.io.reset <= io.inputBufferReset @[XNORNetInference.scala 89:24]
    binaryBuffer.io.fastpush <= io.inputPush @[XNORNetInference.scala 90:27]
    binaryBuffer.io.fastin <= io.input @[XNORNetInference.scala 91:25]
    inst xnor of XNOR @[XNORNetInference.scala 95:18]
    xnor.io is invalid
    xnor.clock <= clock
    xnor.reset <= reset
    xnor.io.in1 <= binaryBuffer.io.out @[XNORNetInference.scala 98:14]
    wire _T_43 : UInt<32>[4] @[XNORNetInference.scala 99:35]
    _T_43 is invalid @[XNORNetInference.scala 99:35]
    wire _T_56 : UInt<128>
    _T_56 is invalid
    _T_56 <= mem.io.out
    node _T_57 = bits(_T_56, 31, 0) @[XNORNetInference.scala 99:35]
    _T_43[0] <= _T_57 @[XNORNetInference.scala 99:35]
    node _T_58 = bits(_T_56, 63, 32) @[XNORNetInference.scala 99:35]
    _T_43[1] <= _T_58 @[XNORNetInference.scala 99:35]
    node _T_59 = bits(_T_56, 95, 64) @[XNORNetInference.scala 99:35]
    _T_43[2] <= _T_59 @[XNORNetInference.scala 99:35]
    node _T_60 = bits(_T_56, 127, 96) @[XNORNetInference.scala 99:35]
    _T_43[3] <= _T_60 @[XNORNetInference.scala 99:35]
    xnor.io.in2[0] <= _T_43[0] @[XNORNetInference.scala 99:14]
    xnor.io.in2[1] <= _T_43[1] @[XNORNetInference.scala 99:14]
    xnor.io.in2[2] <= _T_43[2] @[XNORNetInference.scala 99:14]
    xnor.io.in2[3] <= _T_43[3] @[XNORNetInference.scala 99:14]
    io.xnorInput <= binaryBuffer.io.out @[XNORNetInference.scala 102:15]
    node _T_61 = bits(mem.io.out, 127, 96) @[XNORNetInference.scala 103:29]
    io.xnorWeight1 <= _T_61 @[XNORNetInference.scala 103:17]
    inst meanBuffer of MeanBuffer @[XNORNetInference.scala 107:24]
    meanBuffer.io is invalid
    meanBuffer.clock <= clock
    meanBuffer.reset <= reset
    inst mean of DelayedOutput @[XNORNetInference.scala 114:18]
    mean.io is invalid
    mean.clock <= clock
    mean.reset <= reset
    mean.io.update <= io.meanUpdate @[XNORNetInference.scala 115:17]
    mean.io.reset <= io.meanReset @[XNORNetInference.scala 116:16]
    mean.io.input <= meanBuffer.io.out @[XNORNetInference.scala 117:16]
    io.mean <= mean.io.output @[XNORNetInference.scala 119:10]
    inst maxModule of MaxBuffer @[XNORNetInference.scala 123:23]
    maxModule.io is invalid
    maxModule.clock <= clock
    maxModule.reset <= reset
    maxModule.io.en <= io.maxEn @[XNORNetInference.scala 127:18]
    maxModule.io.reset <= io.maxReset @[XNORNetInference.scala 128:21]
    maxModule.io.offset <= io.maxOffset @[XNORNetInference.scala 129:22]
    maxModule.io.maxLen <= io.actualFeatureNum @[XNORNetInference.scala 130:22]
    io.result <= maxModule.io.out @[XNORNetInference.scala 131:12]
    inst Accumulator of Accumulator @[XNORNetInference.scala 136:21]
    Accumulator.io is invalid
    Accumulator.clock <= clock
    Accumulator.reset <= reset
    node _T_62 = bits(xnor.io.out[3], 3, 0) @[BitSum.scala 31:51]
    node _T_63 = bits(xnor.io.out[3], 7, 4) @[BitSum.scala 31:51]
    node _T_64 = bits(xnor.io.out[3], 11, 8) @[BitSum.scala 31:51]
    node _T_65 = bits(xnor.io.out[3], 15, 12) @[BitSum.scala 31:51]
    node _T_66 = bits(xnor.io.out[3], 19, 16) @[BitSum.scala 31:51]
    node _T_67 = bits(xnor.io.out[3], 23, 20) @[BitSum.scala 31:51]
    node _T_68 = bits(xnor.io.out[3], 27, 24) @[BitSum.scala 31:51]
    node _T_69 = bits(xnor.io.out[3], 31, 28) @[BitSum.scala 31:51]
    reg _T_72 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_75 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_78 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_81 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_84 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_87 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_90 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_93 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_96 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_99 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_102 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_105 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_108 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_111 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_114 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_117 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_120 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_120 is invalid @[BitSum.scala 11:24]
    _T_120[0] <= _T_72 @[BitSum.scala 11:24]
    _T_120[1] <= _T_75 @[BitSum.scala 11:24]
    _T_120[2] <= _T_78 @[BitSum.scala 11:24]
    _T_120[3] <= _T_81 @[BitSum.scala 11:24]
    _T_120[4] <= _T_84 @[BitSum.scala 11:24]
    _T_120[5] <= _T_87 @[BitSum.scala 11:24]
    _T_120[6] <= _T_90 @[BitSum.scala 11:24]
    _T_120[7] <= _T_93 @[BitSum.scala 11:24]
    _T_120[8] <= _T_96 @[BitSum.scala 11:24]
    _T_120[9] <= _T_99 @[BitSum.scala 11:24]
    _T_120[10] <= _T_102 @[BitSum.scala 11:24]
    _T_120[11] <= _T_105 @[BitSum.scala 11:24]
    _T_120[12] <= _T_108 @[BitSum.scala 11:24]
    _T_120[13] <= _T_111 @[BitSum.scala 11:24]
    _T_120[14] <= _T_114 @[BitSum.scala 11:24]
    _T_120[15] <= _T_117 @[BitSum.scala 11:24]
    reg _T_142 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_145 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_148 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_151 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_154 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_157 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_160 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_163 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_166 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_169 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_172 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_175 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_178 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_181 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_184 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_187 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_190 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_190 is invalid @[BitSum.scala 11:24]
    _T_190[0] <= _T_142 @[BitSum.scala 11:24]
    _T_190[1] <= _T_145 @[BitSum.scala 11:24]
    _T_190[2] <= _T_148 @[BitSum.scala 11:24]
    _T_190[3] <= _T_151 @[BitSum.scala 11:24]
    _T_190[4] <= _T_154 @[BitSum.scala 11:24]
    _T_190[5] <= _T_157 @[BitSum.scala 11:24]
    _T_190[6] <= _T_160 @[BitSum.scala 11:24]
    _T_190[7] <= _T_163 @[BitSum.scala 11:24]
    _T_190[8] <= _T_166 @[BitSum.scala 11:24]
    _T_190[9] <= _T_169 @[BitSum.scala 11:24]
    _T_190[10] <= _T_172 @[BitSum.scala 11:24]
    _T_190[11] <= _T_175 @[BitSum.scala 11:24]
    _T_190[12] <= _T_178 @[BitSum.scala 11:24]
    _T_190[13] <= _T_181 @[BitSum.scala 11:24]
    _T_190[14] <= _T_184 @[BitSum.scala 11:24]
    _T_190[15] <= _T_187 @[BitSum.scala 11:24]
    reg _T_212 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_215 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_218 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_221 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_224 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_227 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_230 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_233 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_236 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_239 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_242 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_245 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_248 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_251 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_254 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_257 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_260 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_260 is invalid @[BitSum.scala 11:24]
    _T_260[0] <= _T_212 @[BitSum.scala 11:24]
    _T_260[1] <= _T_215 @[BitSum.scala 11:24]
    _T_260[2] <= _T_218 @[BitSum.scala 11:24]
    _T_260[3] <= _T_221 @[BitSum.scala 11:24]
    _T_260[4] <= _T_224 @[BitSum.scala 11:24]
    _T_260[5] <= _T_227 @[BitSum.scala 11:24]
    _T_260[6] <= _T_230 @[BitSum.scala 11:24]
    _T_260[7] <= _T_233 @[BitSum.scala 11:24]
    _T_260[8] <= _T_236 @[BitSum.scala 11:24]
    _T_260[9] <= _T_239 @[BitSum.scala 11:24]
    _T_260[10] <= _T_242 @[BitSum.scala 11:24]
    _T_260[11] <= _T_245 @[BitSum.scala 11:24]
    _T_260[12] <= _T_248 @[BitSum.scala 11:24]
    _T_260[13] <= _T_251 @[BitSum.scala 11:24]
    _T_260[14] <= _T_254 @[BitSum.scala 11:24]
    _T_260[15] <= _T_257 @[BitSum.scala 11:24]
    reg _T_282 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_285 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_288 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_291 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_294 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_297 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_300 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_312 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_315 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_318 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_321 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_324 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_327 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_330 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_330 is invalid @[BitSum.scala 11:24]
    _T_330[0] <= _T_282 @[BitSum.scala 11:24]
    _T_330[1] <= _T_285 @[BitSum.scala 11:24]
    _T_330[2] <= _T_288 @[BitSum.scala 11:24]
    _T_330[3] <= _T_291 @[BitSum.scala 11:24]
    _T_330[4] <= _T_294 @[BitSum.scala 11:24]
    _T_330[5] <= _T_297 @[BitSum.scala 11:24]
    _T_330[6] <= _T_300 @[BitSum.scala 11:24]
    _T_330[7] <= _T_303 @[BitSum.scala 11:24]
    _T_330[8] <= _T_306 @[BitSum.scala 11:24]
    _T_330[9] <= _T_309 @[BitSum.scala 11:24]
    _T_330[10] <= _T_312 @[BitSum.scala 11:24]
    _T_330[11] <= _T_315 @[BitSum.scala 11:24]
    _T_330[12] <= _T_318 @[BitSum.scala 11:24]
    _T_330[13] <= _T_321 @[BitSum.scala 11:24]
    _T_330[14] <= _T_324 @[BitSum.scala 11:24]
    _T_330[15] <= _T_327 @[BitSum.scala 11:24]
    reg _T_352 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_355 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_358 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_361 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_364 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_367 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_370 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_382 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_385 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_388 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_391 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_394 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_397 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_400 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_400 is invalid @[BitSum.scala 11:24]
    _T_400[0] <= _T_352 @[BitSum.scala 11:24]
    _T_400[1] <= _T_355 @[BitSum.scala 11:24]
    _T_400[2] <= _T_358 @[BitSum.scala 11:24]
    _T_400[3] <= _T_361 @[BitSum.scala 11:24]
    _T_400[4] <= _T_364 @[BitSum.scala 11:24]
    _T_400[5] <= _T_367 @[BitSum.scala 11:24]
    _T_400[6] <= _T_370 @[BitSum.scala 11:24]
    _T_400[7] <= _T_373 @[BitSum.scala 11:24]
    _T_400[8] <= _T_376 @[BitSum.scala 11:24]
    _T_400[9] <= _T_379 @[BitSum.scala 11:24]
    _T_400[10] <= _T_382 @[BitSum.scala 11:24]
    _T_400[11] <= _T_385 @[BitSum.scala 11:24]
    _T_400[12] <= _T_388 @[BitSum.scala 11:24]
    _T_400[13] <= _T_391 @[BitSum.scala 11:24]
    _T_400[14] <= _T_394 @[BitSum.scala 11:24]
    _T_400[15] <= _T_397 @[BitSum.scala 11:24]
    reg _T_422 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_425 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_428 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_431 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_434 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_437 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_440 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_443 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_446 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_449 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_452 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_455 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_458 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_461 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_464 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_467 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_470 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_470 is invalid @[BitSum.scala 11:24]
    _T_470[0] <= _T_422 @[BitSum.scala 11:24]
    _T_470[1] <= _T_425 @[BitSum.scala 11:24]
    _T_470[2] <= _T_428 @[BitSum.scala 11:24]
    _T_470[3] <= _T_431 @[BitSum.scala 11:24]
    _T_470[4] <= _T_434 @[BitSum.scala 11:24]
    _T_470[5] <= _T_437 @[BitSum.scala 11:24]
    _T_470[6] <= _T_440 @[BitSum.scala 11:24]
    _T_470[7] <= _T_443 @[BitSum.scala 11:24]
    _T_470[8] <= _T_446 @[BitSum.scala 11:24]
    _T_470[9] <= _T_449 @[BitSum.scala 11:24]
    _T_470[10] <= _T_452 @[BitSum.scala 11:24]
    _T_470[11] <= _T_455 @[BitSum.scala 11:24]
    _T_470[12] <= _T_458 @[BitSum.scala 11:24]
    _T_470[13] <= _T_461 @[BitSum.scala 11:24]
    _T_470[14] <= _T_464 @[BitSum.scala 11:24]
    _T_470[15] <= _T_467 @[BitSum.scala 11:24]
    reg _T_492 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_495 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_498 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_501 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_504 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_507 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_510 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_513 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_516 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_519 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_522 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_525 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_528 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_531 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_534 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_537 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_540 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_540 is invalid @[BitSum.scala 11:24]
    _T_540[0] <= _T_492 @[BitSum.scala 11:24]
    _T_540[1] <= _T_495 @[BitSum.scala 11:24]
    _T_540[2] <= _T_498 @[BitSum.scala 11:24]
    _T_540[3] <= _T_501 @[BitSum.scala 11:24]
    _T_540[4] <= _T_504 @[BitSum.scala 11:24]
    _T_540[5] <= _T_507 @[BitSum.scala 11:24]
    _T_540[6] <= _T_510 @[BitSum.scala 11:24]
    _T_540[7] <= _T_513 @[BitSum.scala 11:24]
    _T_540[8] <= _T_516 @[BitSum.scala 11:24]
    _T_540[9] <= _T_519 @[BitSum.scala 11:24]
    _T_540[10] <= _T_522 @[BitSum.scala 11:24]
    _T_540[11] <= _T_525 @[BitSum.scala 11:24]
    _T_540[12] <= _T_528 @[BitSum.scala 11:24]
    _T_540[13] <= _T_531 @[BitSum.scala 11:24]
    _T_540[14] <= _T_534 @[BitSum.scala 11:24]
    _T_540[15] <= _T_537 @[BitSum.scala 11:24]
    reg _T_562 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_565 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_568 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_571 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_574 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_577 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_580 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_583 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_586 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_589 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_592 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_595 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_598 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_601 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_604 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_607 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_610 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_610 is invalid @[BitSum.scala 11:24]
    _T_610[0] <= _T_562 @[BitSum.scala 11:24]
    _T_610[1] <= _T_565 @[BitSum.scala 11:24]
    _T_610[2] <= _T_568 @[BitSum.scala 11:24]
    _T_610[3] <= _T_571 @[BitSum.scala 11:24]
    _T_610[4] <= _T_574 @[BitSum.scala 11:24]
    _T_610[5] <= _T_577 @[BitSum.scala 11:24]
    _T_610[6] <= _T_580 @[BitSum.scala 11:24]
    _T_610[7] <= _T_583 @[BitSum.scala 11:24]
    _T_610[8] <= _T_586 @[BitSum.scala 11:24]
    _T_610[9] <= _T_589 @[BitSum.scala 11:24]
    _T_610[10] <= _T_592 @[BitSum.scala 11:24]
    _T_610[11] <= _T_595 @[BitSum.scala 11:24]
    _T_610[12] <= _T_598 @[BitSum.scala 11:24]
    _T_610[13] <= _T_601 @[BitSum.scala 11:24]
    _T_610[14] <= _T_604 @[BitSum.scala 11:24]
    _T_610[15] <= _T_607 @[BitSum.scala 11:24]
    node _T_630 = add(_T_120[_T_62], _T_190[_T_63]) @[BitSum.scala 18:14]
    node _T_631 = tail(_T_630, 1) @[BitSum.scala 18:14]
    node _T_632 = asSInt(_T_631) @[BitSum.scala 18:14]
    node _T_633 = add(_T_260[_T_64], _T_330[_T_65]) @[BitSum.scala 18:14]
    node _T_634 = tail(_T_633, 1) @[BitSum.scala 18:14]
    node _T_635 = asSInt(_T_634) @[BitSum.scala 18:14]
    node _T_636 = add(_T_400[_T_66], _T_470[_T_67]) @[BitSum.scala 18:14]
    node _T_637 = tail(_T_636, 1) @[BitSum.scala 18:14]
    node _T_638 = asSInt(_T_637) @[BitSum.scala 18:14]
    node _T_639 = add(_T_540[_T_68], _T_610[_T_69]) @[BitSum.scala 18:14]
    node _T_640 = tail(_T_639, 1) @[BitSum.scala 18:14]
    node _T_641 = asSInt(_T_640) @[BitSum.scala 18:14]
    node _T_642 = add(_T_632, _T_635) @[BitSum.scala 18:14]
    node _T_643 = tail(_T_642, 1) @[BitSum.scala 18:14]
    node _T_644 = asSInt(_T_643) @[BitSum.scala 18:14]
    node _T_645 = add(_T_638, _T_641) @[BitSum.scala 18:14]
    node _T_646 = tail(_T_645, 1) @[BitSum.scala 18:14]
    node _T_647 = asSInt(_T_646) @[BitSum.scala 18:14]
    node _T_648 = add(_T_644, _T_647) @[BitSum.scala 18:14]
    node _T_649 = tail(_T_648, 1) @[BitSum.scala 18:14]
    node _T_650 = asSInt(_T_649) @[BitSum.scala 18:14]
    Accumulator.io.in <= _T_650 @[XNORNetInference.scala 139:15]
    Accumulator.io.sel <= io.accSel @[XNORNetInference.scala 143:16]
    Accumulator.io.reset <= io.accReset @[XNORNetInference.scala 144:18]
    Accumulator.io.en <= io.accEn @[XNORNetInference.scala 145:14]
    inst MulAdd of MulAdd @[XNORNetInference.scala 148:24]
    MulAdd.io is invalid
    MulAdd.clock <= clock
    MulAdd.reset <= reset
    node _T_651 = bits(mem.io.out, 127, 96) @[XNORNetInference.scala 156:30]
    node _T_652 = bits(_T_651, 31, 16) @[XNORNetInference.scala 158:28]
    node _T_653 = asSInt(_T_652) @[XNORNetInference.scala 158:101]
    MulAdd.io.a <= _T_653 @[XNORNetInference.scala 158:19]
    node _T_654 = bits(_T_651, 15, 0) @[XNORNetInference.scala 159:28]
    node _T_655 = asSInt(_T_654) @[XNORNetInference.scala 159:71]
    MulAdd.io.c <= _T_655 @[XNORNetInference.scala 159:19]
    MulAdd.io.m <= mean.io.output @[XNORNetInference.scala 169:16]
    MulAdd.io.b <= Accumulator.io.out @[XNORNetInference.scala 170:16]
    node _T_656 = bits(mem.io.out, 127, 96) @[XNORNetInference.scala 174:30]
    node _T_657 = bits(_T_656, 31, 16) @[XNORNetInference.scala 175:23]
    node _T_658 = asSInt(_T_657) @[XNORNetInference.scala 175:96]
    io.maa <= _T_658 @[XNORNetInference.scala 175:14]
    node _T_659 = bits(_T_656, 15, 0) @[XNORNetInference.scala 176:23]
    node _T_660 = asSInt(_T_659) @[XNORNetInference.scala 176:66]
    io.mac <= _T_660 @[XNORNetInference.scala 176:14]
    io.mab <= Accumulator.io.out @[XNORNetInference.scala 177:13]
    io.mam <= mean.io.output @[XNORNetInference.scala 178:13]
    meanBuffer.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 181:24]
    maxModule.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 182:23]
    node _T_661 = bits(MulAdd.io.r, 31, 31) @[XNORNetInference.scala 183:18]
    node signs_0 = not(_T_661) @[XNORNetInference.scala 183:5]
    inst Accumulator_1 of Accumulator_1 @[XNORNetInference.scala 136:21]
    Accumulator_1.io is invalid
    Accumulator_1.clock <= clock
    Accumulator_1.reset <= reset
    node _T_662 = bits(xnor.io.out[2], 3, 0) @[BitSum.scala 31:51]
    node _T_663 = bits(xnor.io.out[2], 7, 4) @[BitSum.scala 31:51]
    node _T_664 = bits(xnor.io.out[2], 11, 8) @[BitSum.scala 31:51]
    node _T_665 = bits(xnor.io.out[2], 15, 12) @[BitSum.scala 31:51]
    node _T_666 = bits(xnor.io.out[2], 19, 16) @[BitSum.scala 31:51]
    node _T_667 = bits(xnor.io.out[2], 23, 20) @[BitSum.scala 31:51]
    node _T_668 = bits(xnor.io.out[2], 27, 24) @[BitSum.scala 31:51]
    node _T_669 = bits(xnor.io.out[2], 31, 28) @[BitSum.scala 31:51]
    reg _T_672 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_675 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_678 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_681 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_684 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_687 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_690 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_693 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_696 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_699 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_702 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_705 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_708 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_711 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_714 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_717 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_720 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_720 is invalid @[BitSum.scala 11:24]
    _T_720[0] <= _T_672 @[BitSum.scala 11:24]
    _T_720[1] <= _T_675 @[BitSum.scala 11:24]
    _T_720[2] <= _T_678 @[BitSum.scala 11:24]
    _T_720[3] <= _T_681 @[BitSum.scala 11:24]
    _T_720[4] <= _T_684 @[BitSum.scala 11:24]
    _T_720[5] <= _T_687 @[BitSum.scala 11:24]
    _T_720[6] <= _T_690 @[BitSum.scala 11:24]
    _T_720[7] <= _T_693 @[BitSum.scala 11:24]
    _T_720[8] <= _T_696 @[BitSum.scala 11:24]
    _T_720[9] <= _T_699 @[BitSum.scala 11:24]
    _T_720[10] <= _T_702 @[BitSum.scala 11:24]
    _T_720[11] <= _T_705 @[BitSum.scala 11:24]
    _T_720[12] <= _T_708 @[BitSum.scala 11:24]
    _T_720[13] <= _T_711 @[BitSum.scala 11:24]
    _T_720[14] <= _T_714 @[BitSum.scala 11:24]
    _T_720[15] <= _T_717 @[BitSum.scala 11:24]
    reg _T_742 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_745 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_748 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_751 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_754 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_757 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_760 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_763 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_766 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_769 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_772 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_775 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_778 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_781 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_784 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_787 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_790 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_790 is invalid @[BitSum.scala 11:24]
    _T_790[0] <= _T_742 @[BitSum.scala 11:24]
    _T_790[1] <= _T_745 @[BitSum.scala 11:24]
    _T_790[2] <= _T_748 @[BitSum.scala 11:24]
    _T_790[3] <= _T_751 @[BitSum.scala 11:24]
    _T_790[4] <= _T_754 @[BitSum.scala 11:24]
    _T_790[5] <= _T_757 @[BitSum.scala 11:24]
    _T_790[6] <= _T_760 @[BitSum.scala 11:24]
    _T_790[7] <= _T_763 @[BitSum.scala 11:24]
    _T_790[8] <= _T_766 @[BitSum.scala 11:24]
    _T_790[9] <= _T_769 @[BitSum.scala 11:24]
    _T_790[10] <= _T_772 @[BitSum.scala 11:24]
    _T_790[11] <= _T_775 @[BitSum.scala 11:24]
    _T_790[12] <= _T_778 @[BitSum.scala 11:24]
    _T_790[13] <= _T_781 @[BitSum.scala 11:24]
    _T_790[14] <= _T_784 @[BitSum.scala 11:24]
    _T_790[15] <= _T_787 @[BitSum.scala 11:24]
    reg _T_812 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_815 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_818 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_821 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_824 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_827 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_830 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_833 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_836 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_839 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_842 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_845 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_848 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_851 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_854 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_857 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_860 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_860 is invalid @[BitSum.scala 11:24]
    _T_860[0] <= _T_812 @[BitSum.scala 11:24]
    _T_860[1] <= _T_815 @[BitSum.scala 11:24]
    _T_860[2] <= _T_818 @[BitSum.scala 11:24]
    _T_860[3] <= _T_821 @[BitSum.scala 11:24]
    _T_860[4] <= _T_824 @[BitSum.scala 11:24]
    _T_860[5] <= _T_827 @[BitSum.scala 11:24]
    _T_860[6] <= _T_830 @[BitSum.scala 11:24]
    _T_860[7] <= _T_833 @[BitSum.scala 11:24]
    _T_860[8] <= _T_836 @[BitSum.scala 11:24]
    _T_860[9] <= _T_839 @[BitSum.scala 11:24]
    _T_860[10] <= _T_842 @[BitSum.scala 11:24]
    _T_860[11] <= _T_845 @[BitSum.scala 11:24]
    _T_860[12] <= _T_848 @[BitSum.scala 11:24]
    _T_860[13] <= _T_851 @[BitSum.scala 11:24]
    _T_860[14] <= _T_854 @[BitSum.scala 11:24]
    _T_860[15] <= _T_857 @[BitSum.scala 11:24]
    reg _T_882 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_885 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_888 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_891 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_894 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_897 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_900 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_903 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_906 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_909 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_912 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_915 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_918 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_921 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_924 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_927 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_930 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_930 is invalid @[BitSum.scala 11:24]
    _T_930[0] <= _T_882 @[BitSum.scala 11:24]
    _T_930[1] <= _T_885 @[BitSum.scala 11:24]
    _T_930[2] <= _T_888 @[BitSum.scala 11:24]
    _T_930[3] <= _T_891 @[BitSum.scala 11:24]
    _T_930[4] <= _T_894 @[BitSum.scala 11:24]
    _T_930[5] <= _T_897 @[BitSum.scala 11:24]
    _T_930[6] <= _T_900 @[BitSum.scala 11:24]
    _T_930[7] <= _T_903 @[BitSum.scala 11:24]
    _T_930[8] <= _T_906 @[BitSum.scala 11:24]
    _T_930[9] <= _T_909 @[BitSum.scala 11:24]
    _T_930[10] <= _T_912 @[BitSum.scala 11:24]
    _T_930[11] <= _T_915 @[BitSum.scala 11:24]
    _T_930[12] <= _T_918 @[BitSum.scala 11:24]
    _T_930[13] <= _T_921 @[BitSum.scala 11:24]
    _T_930[14] <= _T_924 @[BitSum.scala 11:24]
    _T_930[15] <= _T_927 @[BitSum.scala 11:24]
    reg _T_952 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_955 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_958 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_961 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_964 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_967 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_970 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_973 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_976 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_979 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_982 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_985 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_988 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_991 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_994 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_997 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1000 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1000 is invalid @[BitSum.scala 11:24]
    _T_1000[0] <= _T_952 @[BitSum.scala 11:24]
    _T_1000[1] <= _T_955 @[BitSum.scala 11:24]
    _T_1000[2] <= _T_958 @[BitSum.scala 11:24]
    _T_1000[3] <= _T_961 @[BitSum.scala 11:24]
    _T_1000[4] <= _T_964 @[BitSum.scala 11:24]
    _T_1000[5] <= _T_967 @[BitSum.scala 11:24]
    _T_1000[6] <= _T_970 @[BitSum.scala 11:24]
    _T_1000[7] <= _T_973 @[BitSum.scala 11:24]
    _T_1000[8] <= _T_976 @[BitSum.scala 11:24]
    _T_1000[9] <= _T_979 @[BitSum.scala 11:24]
    _T_1000[10] <= _T_982 @[BitSum.scala 11:24]
    _T_1000[11] <= _T_985 @[BitSum.scala 11:24]
    _T_1000[12] <= _T_988 @[BitSum.scala 11:24]
    _T_1000[13] <= _T_991 @[BitSum.scala 11:24]
    _T_1000[14] <= _T_994 @[BitSum.scala 11:24]
    _T_1000[15] <= _T_997 @[BitSum.scala 11:24]
    reg _T_1022 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1025 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1028 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1031 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1034 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1037 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1040 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1043 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1046 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1049 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1052 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1055 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1058 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1061 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1064 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1067 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1070 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1070 is invalid @[BitSum.scala 11:24]
    _T_1070[0] <= _T_1022 @[BitSum.scala 11:24]
    _T_1070[1] <= _T_1025 @[BitSum.scala 11:24]
    _T_1070[2] <= _T_1028 @[BitSum.scala 11:24]
    _T_1070[3] <= _T_1031 @[BitSum.scala 11:24]
    _T_1070[4] <= _T_1034 @[BitSum.scala 11:24]
    _T_1070[5] <= _T_1037 @[BitSum.scala 11:24]
    _T_1070[6] <= _T_1040 @[BitSum.scala 11:24]
    _T_1070[7] <= _T_1043 @[BitSum.scala 11:24]
    _T_1070[8] <= _T_1046 @[BitSum.scala 11:24]
    _T_1070[9] <= _T_1049 @[BitSum.scala 11:24]
    _T_1070[10] <= _T_1052 @[BitSum.scala 11:24]
    _T_1070[11] <= _T_1055 @[BitSum.scala 11:24]
    _T_1070[12] <= _T_1058 @[BitSum.scala 11:24]
    _T_1070[13] <= _T_1061 @[BitSum.scala 11:24]
    _T_1070[14] <= _T_1064 @[BitSum.scala 11:24]
    _T_1070[15] <= _T_1067 @[BitSum.scala 11:24]
    reg _T_1092 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1095 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1098 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1101 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1104 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1107 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1110 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1113 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1116 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1119 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1122 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1125 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1128 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1131 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1134 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1137 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1140 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1140 is invalid @[BitSum.scala 11:24]
    _T_1140[0] <= _T_1092 @[BitSum.scala 11:24]
    _T_1140[1] <= _T_1095 @[BitSum.scala 11:24]
    _T_1140[2] <= _T_1098 @[BitSum.scala 11:24]
    _T_1140[3] <= _T_1101 @[BitSum.scala 11:24]
    _T_1140[4] <= _T_1104 @[BitSum.scala 11:24]
    _T_1140[5] <= _T_1107 @[BitSum.scala 11:24]
    _T_1140[6] <= _T_1110 @[BitSum.scala 11:24]
    _T_1140[7] <= _T_1113 @[BitSum.scala 11:24]
    _T_1140[8] <= _T_1116 @[BitSum.scala 11:24]
    _T_1140[9] <= _T_1119 @[BitSum.scala 11:24]
    _T_1140[10] <= _T_1122 @[BitSum.scala 11:24]
    _T_1140[11] <= _T_1125 @[BitSum.scala 11:24]
    _T_1140[12] <= _T_1128 @[BitSum.scala 11:24]
    _T_1140[13] <= _T_1131 @[BitSum.scala 11:24]
    _T_1140[14] <= _T_1134 @[BitSum.scala 11:24]
    _T_1140[15] <= _T_1137 @[BitSum.scala 11:24]
    reg _T_1162 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1165 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1168 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1171 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1174 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1177 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1180 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1183 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1186 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1189 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1192 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1195 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1198 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1201 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1204 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1207 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1210 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1210 is invalid @[BitSum.scala 11:24]
    _T_1210[0] <= _T_1162 @[BitSum.scala 11:24]
    _T_1210[1] <= _T_1165 @[BitSum.scala 11:24]
    _T_1210[2] <= _T_1168 @[BitSum.scala 11:24]
    _T_1210[3] <= _T_1171 @[BitSum.scala 11:24]
    _T_1210[4] <= _T_1174 @[BitSum.scala 11:24]
    _T_1210[5] <= _T_1177 @[BitSum.scala 11:24]
    _T_1210[6] <= _T_1180 @[BitSum.scala 11:24]
    _T_1210[7] <= _T_1183 @[BitSum.scala 11:24]
    _T_1210[8] <= _T_1186 @[BitSum.scala 11:24]
    _T_1210[9] <= _T_1189 @[BitSum.scala 11:24]
    _T_1210[10] <= _T_1192 @[BitSum.scala 11:24]
    _T_1210[11] <= _T_1195 @[BitSum.scala 11:24]
    _T_1210[12] <= _T_1198 @[BitSum.scala 11:24]
    _T_1210[13] <= _T_1201 @[BitSum.scala 11:24]
    _T_1210[14] <= _T_1204 @[BitSum.scala 11:24]
    _T_1210[15] <= _T_1207 @[BitSum.scala 11:24]
    node _T_1230 = add(_T_720[_T_662], _T_790[_T_663]) @[BitSum.scala 18:14]
    node _T_1231 = tail(_T_1230, 1) @[BitSum.scala 18:14]
    node _T_1232 = asSInt(_T_1231) @[BitSum.scala 18:14]
    node _T_1233 = add(_T_860[_T_664], _T_930[_T_665]) @[BitSum.scala 18:14]
    node _T_1234 = tail(_T_1233, 1) @[BitSum.scala 18:14]
    node _T_1235 = asSInt(_T_1234) @[BitSum.scala 18:14]
    node _T_1236 = add(_T_1000[_T_666], _T_1070[_T_667]) @[BitSum.scala 18:14]
    node _T_1237 = tail(_T_1236, 1) @[BitSum.scala 18:14]
    node _T_1238 = asSInt(_T_1237) @[BitSum.scala 18:14]
    node _T_1239 = add(_T_1140[_T_668], _T_1210[_T_669]) @[BitSum.scala 18:14]
    node _T_1240 = tail(_T_1239, 1) @[BitSum.scala 18:14]
    node _T_1241 = asSInt(_T_1240) @[BitSum.scala 18:14]
    node _T_1242 = add(_T_1232, _T_1235) @[BitSum.scala 18:14]
    node _T_1243 = tail(_T_1242, 1) @[BitSum.scala 18:14]
    node _T_1244 = asSInt(_T_1243) @[BitSum.scala 18:14]
    node _T_1245 = add(_T_1238, _T_1241) @[BitSum.scala 18:14]
    node _T_1246 = tail(_T_1245, 1) @[BitSum.scala 18:14]
    node _T_1247 = asSInt(_T_1246) @[BitSum.scala 18:14]
    node _T_1248 = add(_T_1244, _T_1247) @[BitSum.scala 18:14]
    node _T_1249 = tail(_T_1248, 1) @[BitSum.scala 18:14]
    node _T_1250 = asSInt(_T_1249) @[BitSum.scala 18:14]
    Accumulator_1.io.in <= _T_1250 @[XNORNetInference.scala 139:15]
    Accumulator_1.io.sel <= io.accSel @[XNORNetInference.scala 143:16]
    Accumulator_1.io.reset <= io.accReset @[XNORNetInference.scala 144:18]
    Accumulator_1.io.en <= io.accEn @[XNORNetInference.scala 145:14]
    inst MulAdd_1 of MulAdd_1 @[XNORNetInference.scala 148:24]
    MulAdd_1.io is invalid
    MulAdd_1.clock <= clock
    MulAdd_1.reset <= reset
    node _T_1251 = bits(mem.io.out, 95, 64) @[XNORNetInference.scala 156:30]
    node _T_1252 = bits(_T_1251, 31, 16) @[XNORNetInference.scala 158:28]
    node _T_1253 = asSInt(_T_1252) @[XNORNetInference.scala 158:101]
    MulAdd_1.io.a <= _T_1253 @[XNORNetInference.scala 158:19]
    node _T_1254 = bits(_T_1251, 15, 0) @[XNORNetInference.scala 159:28]
    node _T_1255 = asSInt(_T_1254) @[XNORNetInference.scala 159:71]
    MulAdd_1.io.c <= _T_1255 @[XNORNetInference.scala 159:19]
    MulAdd_1.io.m <= mean.io.output @[XNORNetInference.scala 169:16]
    MulAdd_1.io.b <= Accumulator_1.io.out @[XNORNetInference.scala 170:16]
    meanBuffer.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 181:24]
    maxModule.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 182:23]
    node _T_1256 = bits(MulAdd_1.io.r, 31, 31) @[XNORNetInference.scala 183:18]
    node signs_1 = not(_T_1256) @[XNORNetInference.scala 183:5]
    inst Accumulator_2 of Accumulator_2 @[XNORNetInference.scala 136:21]
    Accumulator_2.io is invalid
    Accumulator_2.clock <= clock
    Accumulator_2.reset <= reset
    node _T_1257 = bits(xnor.io.out[1], 3, 0) @[BitSum.scala 31:51]
    node _T_1258 = bits(xnor.io.out[1], 7, 4) @[BitSum.scala 31:51]
    node _T_1259 = bits(xnor.io.out[1], 11, 8) @[BitSum.scala 31:51]
    node _T_1260 = bits(xnor.io.out[1], 15, 12) @[BitSum.scala 31:51]
    node _T_1261 = bits(xnor.io.out[1], 19, 16) @[BitSum.scala 31:51]
    node _T_1262 = bits(xnor.io.out[1], 23, 20) @[BitSum.scala 31:51]
    node _T_1263 = bits(xnor.io.out[1], 27, 24) @[BitSum.scala 31:51]
    node _T_1264 = bits(xnor.io.out[1], 31, 28) @[BitSum.scala 31:51]
    reg _T_1267 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1270 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1273 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1276 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1279 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1282 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1285 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1288 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1291 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1294 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1297 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1300 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1312 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1315 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1315 is invalid @[BitSum.scala 11:24]
    _T_1315[0] <= _T_1267 @[BitSum.scala 11:24]
    _T_1315[1] <= _T_1270 @[BitSum.scala 11:24]
    _T_1315[2] <= _T_1273 @[BitSum.scala 11:24]
    _T_1315[3] <= _T_1276 @[BitSum.scala 11:24]
    _T_1315[4] <= _T_1279 @[BitSum.scala 11:24]
    _T_1315[5] <= _T_1282 @[BitSum.scala 11:24]
    _T_1315[6] <= _T_1285 @[BitSum.scala 11:24]
    _T_1315[7] <= _T_1288 @[BitSum.scala 11:24]
    _T_1315[8] <= _T_1291 @[BitSum.scala 11:24]
    _T_1315[9] <= _T_1294 @[BitSum.scala 11:24]
    _T_1315[10] <= _T_1297 @[BitSum.scala 11:24]
    _T_1315[11] <= _T_1300 @[BitSum.scala 11:24]
    _T_1315[12] <= _T_1303 @[BitSum.scala 11:24]
    _T_1315[13] <= _T_1306 @[BitSum.scala 11:24]
    _T_1315[14] <= _T_1309 @[BitSum.scala 11:24]
    _T_1315[15] <= _T_1312 @[BitSum.scala 11:24]
    reg _T_1337 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1340 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1343 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1346 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1349 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1352 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1355 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1358 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1361 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1364 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1367 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1370 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1382 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1385 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1385 is invalid @[BitSum.scala 11:24]
    _T_1385[0] <= _T_1337 @[BitSum.scala 11:24]
    _T_1385[1] <= _T_1340 @[BitSum.scala 11:24]
    _T_1385[2] <= _T_1343 @[BitSum.scala 11:24]
    _T_1385[3] <= _T_1346 @[BitSum.scala 11:24]
    _T_1385[4] <= _T_1349 @[BitSum.scala 11:24]
    _T_1385[5] <= _T_1352 @[BitSum.scala 11:24]
    _T_1385[6] <= _T_1355 @[BitSum.scala 11:24]
    _T_1385[7] <= _T_1358 @[BitSum.scala 11:24]
    _T_1385[8] <= _T_1361 @[BitSum.scala 11:24]
    _T_1385[9] <= _T_1364 @[BitSum.scala 11:24]
    _T_1385[10] <= _T_1367 @[BitSum.scala 11:24]
    _T_1385[11] <= _T_1370 @[BitSum.scala 11:24]
    _T_1385[12] <= _T_1373 @[BitSum.scala 11:24]
    _T_1385[13] <= _T_1376 @[BitSum.scala 11:24]
    _T_1385[14] <= _T_1379 @[BitSum.scala 11:24]
    _T_1385[15] <= _T_1382 @[BitSum.scala 11:24]
    reg _T_1407 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1410 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1413 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1416 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1419 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1422 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1425 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1428 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1431 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1434 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1437 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1440 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1443 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1446 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1449 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1452 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1455 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1455 is invalid @[BitSum.scala 11:24]
    _T_1455[0] <= _T_1407 @[BitSum.scala 11:24]
    _T_1455[1] <= _T_1410 @[BitSum.scala 11:24]
    _T_1455[2] <= _T_1413 @[BitSum.scala 11:24]
    _T_1455[3] <= _T_1416 @[BitSum.scala 11:24]
    _T_1455[4] <= _T_1419 @[BitSum.scala 11:24]
    _T_1455[5] <= _T_1422 @[BitSum.scala 11:24]
    _T_1455[6] <= _T_1425 @[BitSum.scala 11:24]
    _T_1455[7] <= _T_1428 @[BitSum.scala 11:24]
    _T_1455[8] <= _T_1431 @[BitSum.scala 11:24]
    _T_1455[9] <= _T_1434 @[BitSum.scala 11:24]
    _T_1455[10] <= _T_1437 @[BitSum.scala 11:24]
    _T_1455[11] <= _T_1440 @[BitSum.scala 11:24]
    _T_1455[12] <= _T_1443 @[BitSum.scala 11:24]
    _T_1455[13] <= _T_1446 @[BitSum.scala 11:24]
    _T_1455[14] <= _T_1449 @[BitSum.scala 11:24]
    _T_1455[15] <= _T_1452 @[BitSum.scala 11:24]
    reg _T_1477 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1480 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1483 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1486 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1489 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1492 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1495 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1498 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1501 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1504 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1507 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1510 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1513 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1516 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1519 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1522 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1525 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1525 is invalid @[BitSum.scala 11:24]
    _T_1525[0] <= _T_1477 @[BitSum.scala 11:24]
    _T_1525[1] <= _T_1480 @[BitSum.scala 11:24]
    _T_1525[2] <= _T_1483 @[BitSum.scala 11:24]
    _T_1525[3] <= _T_1486 @[BitSum.scala 11:24]
    _T_1525[4] <= _T_1489 @[BitSum.scala 11:24]
    _T_1525[5] <= _T_1492 @[BitSum.scala 11:24]
    _T_1525[6] <= _T_1495 @[BitSum.scala 11:24]
    _T_1525[7] <= _T_1498 @[BitSum.scala 11:24]
    _T_1525[8] <= _T_1501 @[BitSum.scala 11:24]
    _T_1525[9] <= _T_1504 @[BitSum.scala 11:24]
    _T_1525[10] <= _T_1507 @[BitSum.scala 11:24]
    _T_1525[11] <= _T_1510 @[BitSum.scala 11:24]
    _T_1525[12] <= _T_1513 @[BitSum.scala 11:24]
    _T_1525[13] <= _T_1516 @[BitSum.scala 11:24]
    _T_1525[14] <= _T_1519 @[BitSum.scala 11:24]
    _T_1525[15] <= _T_1522 @[BitSum.scala 11:24]
    reg _T_1547 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1550 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1553 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1556 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1559 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1562 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1565 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1568 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1571 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1574 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1577 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1580 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1583 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1586 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1589 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1592 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1595 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1595 is invalid @[BitSum.scala 11:24]
    _T_1595[0] <= _T_1547 @[BitSum.scala 11:24]
    _T_1595[1] <= _T_1550 @[BitSum.scala 11:24]
    _T_1595[2] <= _T_1553 @[BitSum.scala 11:24]
    _T_1595[3] <= _T_1556 @[BitSum.scala 11:24]
    _T_1595[4] <= _T_1559 @[BitSum.scala 11:24]
    _T_1595[5] <= _T_1562 @[BitSum.scala 11:24]
    _T_1595[6] <= _T_1565 @[BitSum.scala 11:24]
    _T_1595[7] <= _T_1568 @[BitSum.scala 11:24]
    _T_1595[8] <= _T_1571 @[BitSum.scala 11:24]
    _T_1595[9] <= _T_1574 @[BitSum.scala 11:24]
    _T_1595[10] <= _T_1577 @[BitSum.scala 11:24]
    _T_1595[11] <= _T_1580 @[BitSum.scala 11:24]
    _T_1595[12] <= _T_1583 @[BitSum.scala 11:24]
    _T_1595[13] <= _T_1586 @[BitSum.scala 11:24]
    _T_1595[14] <= _T_1589 @[BitSum.scala 11:24]
    _T_1595[15] <= _T_1592 @[BitSum.scala 11:24]
    reg _T_1617 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1620 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1623 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1626 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1629 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1632 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1635 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1638 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1641 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1644 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1647 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1650 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1653 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1656 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1659 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1662 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1665 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1665 is invalid @[BitSum.scala 11:24]
    _T_1665[0] <= _T_1617 @[BitSum.scala 11:24]
    _T_1665[1] <= _T_1620 @[BitSum.scala 11:24]
    _T_1665[2] <= _T_1623 @[BitSum.scala 11:24]
    _T_1665[3] <= _T_1626 @[BitSum.scala 11:24]
    _T_1665[4] <= _T_1629 @[BitSum.scala 11:24]
    _T_1665[5] <= _T_1632 @[BitSum.scala 11:24]
    _T_1665[6] <= _T_1635 @[BitSum.scala 11:24]
    _T_1665[7] <= _T_1638 @[BitSum.scala 11:24]
    _T_1665[8] <= _T_1641 @[BitSum.scala 11:24]
    _T_1665[9] <= _T_1644 @[BitSum.scala 11:24]
    _T_1665[10] <= _T_1647 @[BitSum.scala 11:24]
    _T_1665[11] <= _T_1650 @[BitSum.scala 11:24]
    _T_1665[12] <= _T_1653 @[BitSum.scala 11:24]
    _T_1665[13] <= _T_1656 @[BitSum.scala 11:24]
    _T_1665[14] <= _T_1659 @[BitSum.scala 11:24]
    _T_1665[15] <= _T_1662 @[BitSum.scala 11:24]
    reg _T_1687 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1690 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1693 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1696 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1699 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1702 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1705 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1708 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1711 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1714 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1717 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1720 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1723 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1726 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1729 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1732 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1735 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1735 is invalid @[BitSum.scala 11:24]
    _T_1735[0] <= _T_1687 @[BitSum.scala 11:24]
    _T_1735[1] <= _T_1690 @[BitSum.scala 11:24]
    _T_1735[2] <= _T_1693 @[BitSum.scala 11:24]
    _T_1735[3] <= _T_1696 @[BitSum.scala 11:24]
    _T_1735[4] <= _T_1699 @[BitSum.scala 11:24]
    _T_1735[5] <= _T_1702 @[BitSum.scala 11:24]
    _T_1735[6] <= _T_1705 @[BitSum.scala 11:24]
    _T_1735[7] <= _T_1708 @[BitSum.scala 11:24]
    _T_1735[8] <= _T_1711 @[BitSum.scala 11:24]
    _T_1735[9] <= _T_1714 @[BitSum.scala 11:24]
    _T_1735[10] <= _T_1717 @[BitSum.scala 11:24]
    _T_1735[11] <= _T_1720 @[BitSum.scala 11:24]
    _T_1735[12] <= _T_1723 @[BitSum.scala 11:24]
    _T_1735[13] <= _T_1726 @[BitSum.scala 11:24]
    _T_1735[14] <= _T_1729 @[BitSum.scala 11:24]
    _T_1735[15] <= _T_1732 @[BitSum.scala 11:24]
    reg _T_1757 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1760 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1763 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1766 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1769 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1772 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1775 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1778 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1781 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1784 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1787 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1790 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1793 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1796 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1799 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1802 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1805 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1805 is invalid @[BitSum.scala 11:24]
    _T_1805[0] <= _T_1757 @[BitSum.scala 11:24]
    _T_1805[1] <= _T_1760 @[BitSum.scala 11:24]
    _T_1805[2] <= _T_1763 @[BitSum.scala 11:24]
    _T_1805[3] <= _T_1766 @[BitSum.scala 11:24]
    _T_1805[4] <= _T_1769 @[BitSum.scala 11:24]
    _T_1805[5] <= _T_1772 @[BitSum.scala 11:24]
    _T_1805[6] <= _T_1775 @[BitSum.scala 11:24]
    _T_1805[7] <= _T_1778 @[BitSum.scala 11:24]
    _T_1805[8] <= _T_1781 @[BitSum.scala 11:24]
    _T_1805[9] <= _T_1784 @[BitSum.scala 11:24]
    _T_1805[10] <= _T_1787 @[BitSum.scala 11:24]
    _T_1805[11] <= _T_1790 @[BitSum.scala 11:24]
    _T_1805[12] <= _T_1793 @[BitSum.scala 11:24]
    _T_1805[13] <= _T_1796 @[BitSum.scala 11:24]
    _T_1805[14] <= _T_1799 @[BitSum.scala 11:24]
    _T_1805[15] <= _T_1802 @[BitSum.scala 11:24]
    node _T_1825 = add(_T_1315[_T_1257], _T_1385[_T_1258]) @[BitSum.scala 18:14]
    node _T_1826 = tail(_T_1825, 1) @[BitSum.scala 18:14]
    node _T_1827 = asSInt(_T_1826) @[BitSum.scala 18:14]
    node _T_1828 = add(_T_1455[_T_1259], _T_1525[_T_1260]) @[BitSum.scala 18:14]
    node _T_1829 = tail(_T_1828, 1) @[BitSum.scala 18:14]
    node _T_1830 = asSInt(_T_1829) @[BitSum.scala 18:14]
    node _T_1831 = add(_T_1595[_T_1261], _T_1665[_T_1262]) @[BitSum.scala 18:14]
    node _T_1832 = tail(_T_1831, 1) @[BitSum.scala 18:14]
    node _T_1833 = asSInt(_T_1832) @[BitSum.scala 18:14]
    node _T_1834 = add(_T_1735[_T_1263], _T_1805[_T_1264]) @[BitSum.scala 18:14]
    node _T_1835 = tail(_T_1834, 1) @[BitSum.scala 18:14]
    node _T_1836 = asSInt(_T_1835) @[BitSum.scala 18:14]
    node _T_1837 = add(_T_1827, _T_1830) @[BitSum.scala 18:14]
    node _T_1838 = tail(_T_1837, 1) @[BitSum.scala 18:14]
    node _T_1839 = asSInt(_T_1838) @[BitSum.scala 18:14]
    node _T_1840 = add(_T_1833, _T_1836) @[BitSum.scala 18:14]
    node _T_1841 = tail(_T_1840, 1) @[BitSum.scala 18:14]
    node _T_1842 = asSInt(_T_1841) @[BitSum.scala 18:14]
    node _T_1843 = add(_T_1839, _T_1842) @[BitSum.scala 18:14]
    node _T_1844 = tail(_T_1843, 1) @[BitSum.scala 18:14]
    node _T_1845 = asSInt(_T_1844) @[BitSum.scala 18:14]
    Accumulator_2.io.in <= _T_1845 @[XNORNetInference.scala 139:15]
    Accumulator_2.io.sel <= io.accSel @[XNORNetInference.scala 143:16]
    Accumulator_2.io.reset <= io.accReset @[XNORNetInference.scala 144:18]
    Accumulator_2.io.en <= io.accEn @[XNORNetInference.scala 145:14]
    inst MulAdd_2 of MulAdd_2 @[XNORNetInference.scala 148:24]
    MulAdd_2.io is invalid
    MulAdd_2.clock <= clock
    MulAdd_2.reset <= reset
    node _T_1846 = bits(mem.io.out, 63, 32) @[XNORNetInference.scala 156:30]
    node _T_1847 = bits(_T_1846, 31, 16) @[XNORNetInference.scala 158:28]
    node _T_1848 = asSInt(_T_1847) @[XNORNetInference.scala 158:101]
    MulAdd_2.io.a <= _T_1848 @[XNORNetInference.scala 158:19]
    node _T_1849 = bits(_T_1846, 15, 0) @[XNORNetInference.scala 159:28]
    node _T_1850 = asSInt(_T_1849) @[XNORNetInference.scala 159:71]
    MulAdd_2.io.c <= _T_1850 @[XNORNetInference.scala 159:19]
    MulAdd_2.io.m <= mean.io.output @[XNORNetInference.scala 169:16]
    MulAdd_2.io.b <= Accumulator_2.io.out @[XNORNetInference.scala 170:16]
    meanBuffer.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 181:24]
    maxModule.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 182:23]
    node _T_1851 = bits(MulAdd_2.io.r, 31, 31) @[XNORNetInference.scala 183:18]
    node signs_2 = not(_T_1851) @[XNORNetInference.scala 183:5]
    inst Accumulator_3 of Accumulator_3 @[XNORNetInference.scala 136:21]
    Accumulator_3.io is invalid
    Accumulator_3.clock <= clock
    Accumulator_3.reset <= reset
    node _T_1852 = bits(xnor.io.out[0], 3, 0) @[BitSum.scala 31:51]
    node _T_1853 = bits(xnor.io.out[0], 7, 4) @[BitSum.scala 31:51]
    node _T_1854 = bits(xnor.io.out[0], 11, 8) @[BitSum.scala 31:51]
    node _T_1855 = bits(xnor.io.out[0], 15, 12) @[BitSum.scala 31:51]
    node _T_1856 = bits(xnor.io.out[0], 19, 16) @[BitSum.scala 31:51]
    node _T_1857 = bits(xnor.io.out[0], 23, 20) @[BitSum.scala 31:51]
    node _T_1858 = bits(xnor.io.out[0], 27, 24) @[BitSum.scala 31:51]
    node _T_1859 = bits(xnor.io.out[0], 31, 28) @[BitSum.scala 31:51]
    reg _T_1862 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1865 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1868 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1871 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1874 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1877 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1880 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1883 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1886 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1889 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1892 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1895 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1898 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1901 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1904 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1907 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1910 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1910 is invalid @[BitSum.scala 11:24]
    _T_1910[0] <= _T_1862 @[BitSum.scala 11:24]
    _T_1910[1] <= _T_1865 @[BitSum.scala 11:24]
    _T_1910[2] <= _T_1868 @[BitSum.scala 11:24]
    _T_1910[3] <= _T_1871 @[BitSum.scala 11:24]
    _T_1910[4] <= _T_1874 @[BitSum.scala 11:24]
    _T_1910[5] <= _T_1877 @[BitSum.scala 11:24]
    _T_1910[6] <= _T_1880 @[BitSum.scala 11:24]
    _T_1910[7] <= _T_1883 @[BitSum.scala 11:24]
    _T_1910[8] <= _T_1886 @[BitSum.scala 11:24]
    _T_1910[9] <= _T_1889 @[BitSum.scala 11:24]
    _T_1910[10] <= _T_1892 @[BitSum.scala 11:24]
    _T_1910[11] <= _T_1895 @[BitSum.scala 11:24]
    _T_1910[12] <= _T_1898 @[BitSum.scala 11:24]
    _T_1910[13] <= _T_1901 @[BitSum.scala 11:24]
    _T_1910[14] <= _T_1904 @[BitSum.scala 11:24]
    _T_1910[15] <= _T_1907 @[BitSum.scala 11:24]
    reg _T_1932 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1935 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1938 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1941 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1944 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1947 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1950 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1953 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1956 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1959 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1962 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1965 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1968 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1971 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1974 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1977 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1980 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1980 is invalid @[BitSum.scala 11:24]
    _T_1980[0] <= _T_1932 @[BitSum.scala 11:24]
    _T_1980[1] <= _T_1935 @[BitSum.scala 11:24]
    _T_1980[2] <= _T_1938 @[BitSum.scala 11:24]
    _T_1980[3] <= _T_1941 @[BitSum.scala 11:24]
    _T_1980[4] <= _T_1944 @[BitSum.scala 11:24]
    _T_1980[5] <= _T_1947 @[BitSum.scala 11:24]
    _T_1980[6] <= _T_1950 @[BitSum.scala 11:24]
    _T_1980[7] <= _T_1953 @[BitSum.scala 11:24]
    _T_1980[8] <= _T_1956 @[BitSum.scala 11:24]
    _T_1980[9] <= _T_1959 @[BitSum.scala 11:24]
    _T_1980[10] <= _T_1962 @[BitSum.scala 11:24]
    _T_1980[11] <= _T_1965 @[BitSum.scala 11:24]
    _T_1980[12] <= _T_1968 @[BitSum.scala 11:24]
    _T_1980[13] <= _T_1971 @[BitSum.scala 11:24]
    _T_1980[14] <= _T_1974 @[BitSum.scala 11:24]
    _T_1980[15] <= _T_1977 @[BitSum.scala 11:24]
    reg _T_2002 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2005 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2008 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2011 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2014 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2017 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2020 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2023 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2026 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2029 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2032 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2035 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2038 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2041 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2044 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2047 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2050 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2050 is invalid @[BitSum.scala 11:24]
    _T_2050[0] <= _T_2002 @[BitSum.scala 11:24]
    _T_2050[1] <= _T_2005 @[BitSum.scala 11:24]
    _T_2050[2] <= _T_2008 @[BitSum.scala 11:24]
    _T_2050[3] <= _T_2011 @[BitSum.scala 11:24]
    _T_2050[4] <= _T_2014 @[BitSum.scala 11:24]
    _T_2050[5] <= _T_2017 @[BitSum.scala 11:24]
    _T_2050[6] <= _T_2020 @[BitSum.scala 11:24]
    _T_2050[7] <= _T_2023 @[BitSum.scala 11:24]
    _T_2050[8] <= _T_2026 @[BitSum.scala 11:24]
    _T_2050[9] <= _T_2029 @[BitSum.scala 11:24]
    _T_2050[10] <= _T_2032 @[BitSum.scala 11:24]
    _T_2050[11] <= _T_2035 @[BitSum.scala 11:24]
    _T_2050[12] <= _T_2038 @[BitSum.scala 11:24]
    _T_2050[13] <= _T_2041 @[BitSum.scala 11:24]
    _T_2050[14] <= _T_2044 @[BitSum.scala 11:24]
    _T_2050[15] <= _T_2047 @[BitSum.scala 11:24]
    reg _T_2072 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2075 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2078 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2081 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2084 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2087 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2090 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2093 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2096 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2099 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2102 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2105 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2108 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2111 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2114 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2117 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2120 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2120 is invalid @[BitSum.scala 11:24]
    _T_2120[0] <= _T_2072 @[BitSum.scala 11:24]
    _T_2120[1] <= _T_2075 @[BitSum.scala 11:24]
    _T_2120[2] <= _T_2078 @[BitSum.scala 11:24]
    _T_2120[3] <= _T_2081 @[BitSum.scala 11:24]
    _T_2120[4] <= _T_2084 @[BitSum.scala 11:24]
    _T_2120[5] <= _T_2087 @[BitSum.scala 11:24]
    _T_2120[6] <= _T_2090 @[BitSum.scala 11:24]
    _T_2120[7] <= _T_2093 @[BitSum.scala 11:24]
    _T_2120[8] <= _T_2096 @[BitSum.scala 11:24]
    _T_2120[9] <= _T_2099 @[BitSum.scala 11:24]
    _T_2120[10] <= _T_2102 @[BitSum.scala 11:24]
    _T_2120[11] <= _T_2105 @[BitSum.scala 11:24]
    _T_2120[12] <= _T_2108 @[BitSum.scala 11:24]
    _T_2120[13] <= _T_2111 @[BitSum.scala 11:24]
    _T_2120[14] <= _T_2114 @[BitSum.scala 11:24]
    _T_2120[15] <= _T_2117 @[BitSum.scala 11:24]
    reg _T_2142 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2145 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2148 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2151 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2154 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2157 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2160 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2163 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2166 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2169 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2172 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2175 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2178 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2181 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2184 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2187 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2190 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2190 is invalid @[BitSum.scala 11:24]
    _T_2190[0] <= _T_2142 @[BitSum.scala 11:24]
    _T_2190[1] <= _T_2145 @[BitSum.scala 11:24]
    _T_2190[2] <= _T_2148 @[BitSum.scala 11:24]
    _T_2190[3] <= _T_2151 @[BitSum.scala 11:24]
    _T_2190[4] <= _T_2154 @[BitSum.scala 11:24]
    _T_2190[5] <= _T_2157 @[BitSum.scala 11:24]
    _T_2190[6] <= _T_2160 @[BitSum.scala 11:24]
    _T_2190[7] <= _T_2163 @[BitSum.scala 11:24]
    _T_2190[8] <= _T_2166 @[BitSum.scala 11:24]
    _T_2190[9] <= _T_2169 @[BitSum.scala 11:24]
    _T_2190[10] <= _T_2172 @[BitSum.scala 11:24]
    _T_2190[11] <= _T_2175 @[BitSum.scala 11:24]
    _T_2190[12] <= _T_2178 @[BitSum.scala 11:24]
    _T_2190[13] <= _T_2181 @[BitSum.scala 11:24]
    _T_2190[14] <= _T_2184 @[BitSum.scala 11:24]
    _T_2190[15] <= _T_2187 @[BitSum.scala 11:24]
    reg _T_2212 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2215 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2218 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2221 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2224 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2227 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2230 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2233 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2236 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2239 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2242 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2245 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2248 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2251 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2254 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2257 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2260 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2260 is invalid @[BitSum.scala 11:24]
    _T_2260[0] <= _T_2212 @[BitSum.scala 11:24]
    _T_2260[1] <= _T_2215 @[BitSum.scala 11:24]
    _T_2260[2] <= _T_2218 @[BitSum.scala 11:24]
    _T_2260[3] <= _T_2221 @[BitSum.scala 11:24]
    _T_2260[4] <= _T_2224 @[BitSum.scala 11:24]
    _T_2260[5] <= _T_2227 @[BitSum.scala 11:24]
    _T_2260[6] <= _T_2230 @[BitSum.scala 11:24]
    _T_2260[7] <= _T_2233 @[BitSum.scala 11:24]
    _T_2260[8] <= _T_2236 @[BitSum.scala 11:24]
    _T_2260[9] <= _T_2239 @[BitSum.scala 11:24]
    _T_2260[10] <= _T_2242 @[BitSum.scala 11:24]
    _T_2260[11] <= _T_2245 @[BitSum.scala 11:24]
    _T_2260[12] <= _T_2248 @[BitSum.scala 11:24]
    _T_2260[13] <= _T_2251 @[BitSum.scala 11:24]
    _T_2260[14] <= _T_2254 @[BitSum.scala 11:24]
    _T_2260[15] <= _T_2257 @[BitSum.scala 11:24]
    reg _T_2282 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2285 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2288 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2291 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2294 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2297 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2300 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2312 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2315 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2318 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2321 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2324 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2327 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2330 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2330 is invalid @[BitSum.scala 11:24]
    _T_2330[0] <= _T_2282 @[BitSum.scala 11:24]
    _T_2330[1] <= _T_2285 @[BitSum.scala 11:24]
    _T_2330[2] <= _T_2288 @[BitSum.scala 11:24]
    _T_2330[3] <= _T_2291 @[BitSum.scala 11:24]
    _T_2330[4] <= _T_2294 @[BitSum.scala 11:24]
    _T_2330[5] <= _T_2297 @[BitSum.scala 11:24]
    _T_2330[6] <= _T_2300 @[BitSum.scala 11:24]
    _T_2330[7] <= _T_2303 @[BitSum.scala 11:24]
    _T_2330[8] <= _T_2306 @[BitSum.scala 11:24]
    _T_2330[9] <= _T_2309 @[BitSum.scala 11:24]
    _T_2330[10] <= _T_2312 @[BitSum.scala 11:24]
    _T_2330[11] <= _T_2315 @[BitSum.scala 11:24]
    _T_2330[12] <= _T_2318 @[BitSum.scala 11:24]
    _T_2330[13] <= _T_2321 @[BitSum.scala 11:24]
    _T_2330[14] <= _T_2324 @[BitSum.scala 11:24]
    _T_2330[15] <= _T_2327 @[BitSum.scala 11:24]
    reg _T_2352 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2355 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2358 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2361 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2364 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2367 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2370 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2382 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2385 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2388 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2391 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2394 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2397 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2400 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2400 is invalid @[BitSum.scala 11:24]
    _T_2400[0] <= _T_2352 @[BitSum.scala 11:24]
    _T_2400[1] <= _T_2355 @[BitSum.scala 11:24]
    _T_2400[2] <= _T_2358 @[BitSum.scala 11:24]
    _T_2400[3] <= _T_2361 @[BitSum.scala 11:24]
    _T_2400[4] <= _T_2364 @[BitSum.scala 11:24]
    _T_2400[5] <= _T_2367 @[BitSum.scala 11:24]
    _T_2400[6] <= _T_2370 @[BitSum.scala 11:24]
    _T_2400[7] <= _T_2373 @[BitSum.scala 11:24]
    _T_2400[8] <= _T_2376 @[BitSum.scala 11:24]
    _T_2400[9] <= _T_2379 @[BitSum.scala 11:24]
    _T_2400[10] <= _T_2382 @[BitSum.scala 11:24]
    _T_2400[11] <= _T_2385 @[BitSum.scala 11:24]
    _T_2400[12] <= _T_2388 @[BitSum.scala 11:24]
    _T_2400[13] <= _T_2391 @[BitSum.scala 11:24]
    _T_2400[14] <= _T_2394 @[BitSum.scala 11:24]
    _T_2400[15] <= _T_2397 @[BitSum.scala 11:24]
    node _T_2420 = add(_T_1910[_T_1852], _T_1980[_T_1853]) @[BitSum.scala 18:14]
    node _T_2421 = tail(_T_2420, 1) @[BitSum.scala 18:14]
    node _T_2422 = asSInt(_T_2421) @[BitSum.scala 18:14]
    node _T_2423 = add(_T_2050[_T_1854], _T_2120[_T_1855]) @[BitSum.scala 18:14]
    node _T_2424 = tail(_T_2423, 1) @[BitSum.scala 18:14]
    node _T_2425 = asSInt(_T_2424) @[BitSum.scala 18:14]
    node _T_2426 = add(_T_2190[_T_1856], _T_2260[_T_1857]) @[BitSum.scala 18:14]
    node _T_2427 = tail(_T_2426, 1) @[BitSum.scala 18:14]
    node _T_2428 = asSInt(_T_2427) @[BitSum.scala 18:14]
    node _T_2429 = add(_T_2330[_T_1858], _T_2400[_T_1859]) @[BitSum.scala 18:14]
    node _T_2430 = tail(_T_2429, 1) @[BitSum.scala 18:14]
    node _T_2431 = asSInt(_T_2430) @[BitSum.scala 18:14]
    node _T_2432 = add(_T_2422, _T_2425) @[BitSum.scala 18:14]
    node _T_2433 = tail(_T_2432, 1) @[BitSum.scala 18:14]
    node _T_2434 = asSInt(_T_2433) @[BitSum.scala 18:14]
    node _T_2435 = add(_T_2428, _T_2431) @[BitSum.scala 18:14]
    node _T_2436 = tail(_T_2435, 1) @[BitSum.scala 18:14]
    node _T_2437 = asSInt(_T_2436) @[BitSum.scala 18:14]
    node _T_2438 = add(_T_2434, _T_2437) @[BitSum.scala 18:14]
    node _T_2439 = tail(_T_2438, 1) @[BitSum.scala 18:14]
    node _T_2440 = asSInt(_T_2439) @[BitSum.scala 18:14]
    Accumulator_3.io.in <= _T_2440 @[XNORNetInference.scala 139:15]
    Accumulator_3.io.sel <= io.accSel @[XNORNetInference.scala 143:16]
    Accumulator_3.io.reset <= io.accReset @[XNORNetInference.scala 144:18]
    Accumulator_3.io.en <= io.accEn @[XNORNetInference.scala 145:14]
    inst MulAdd_3 of MulAdd_3 @[XNORNetInference.scala 148:24]
    MulAdd_3.io is invalid
    MulAdd_3.clock <= clock
    MulAdd_3.reset <= reset
    node _T_2441 = bits(mem.io.out, 31, 0) @[XNORNetInference.scala 156:30]
    node _T_2442 = bits(_T_2441, 31, 16) @[XNORNetInference.scala 158:28]
    node _T_2443 = asSInt(_T_2442) @[XNORNetInference.scala 158:101]
    MulAdd_3.io.a <= _T_2443 @[XNORNetInference.scala 158:19]
    node _T_2444 = bits(_T_2441, 15, 0) @[XNORNetInference.scala 159:28]
    node _T_2445 = asSInt(_T_2444) @[XNORNetInference.scala 159:71]
    MulAdd_3.io.c <= _T_2445 @[XNORNetInference.scala 159:19]
    MulAdd_3.io.m <= mean.io.output @[XNORNetInference.scala 169:16]
    MulAdd_3.io.b <= Accumulator_3.io.out @[XNORNetInference.scala 170:16]
    meanBuffer.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 181:24]
    maxModule.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 182:23]
    node _T_2446 = bits(MulAdd_3.io.r, 31, 31) @[XNORNetInference.scala 183:18]
    node signs_3 = not(_T_2446) @[XNORNetInference.scala 183:5]
    node _T_2447 = cat(signs_2, signs_3) @[Cat.scala 30:58]
    node _T_2448 = cat(signs_0, signs_1) @[Cat.scala 30:58]
    node _T_2449 = cat(_T_2448, _T_2447) @[Cat.scala 30:58]
    inputWire <= _T_2449 @[XNORNetInference.scala 187:12]
    meanBuffer.io.reset <= io.meanBufferReset @[XNORNetInference.scala 189:22]
    meanBuffer.io.cntInverse65536 <= io.featureNumInverse65536 @[XNORNetInference.scala 190:32]
    
  module LayerParamShifter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip shift : UInt<1>, currentLayer : UInt<4>, currentFeatureCnt : UInt<16>, actualFeatureCnt : UInt<16>, currentFeatureCnt65536 : UInt<16>, currentInputRound : UInt<16>, currentTotalRound : UInt<16>, currentAccWidth : UInt<16>, lastLayer : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg currentLayer : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[LayerParamShifter.scala 11:29]
    reg featureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 14:17]
    reg featureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0c"))) @[LayerParamShifter.scala 14:17]
    reg actualFeatureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 17:17]
    reg actualFeatureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0a"))) @[LayerParamShifter.scala 17:17]
    reg featureCnts65536_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h02aa"))) @[LayerParamShifter.scala 20:17]
    reg featureCnts65536_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h01555"))) @[LayerParamShifter.scala 20:17]
    reg accWidth_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h018"))) @[LayerParamShifter.scala 23:17]
    reg accWidth_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 23:17]
    reg inputRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h08"))) @[LayerParamShifter.scala 27:17]
    reg inputRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 27:17]
    reg totalRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0c0"))) @[LayerParamShifter.scala 32:17]
    reg totalRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h09"))) @[LayerParamShifter.scala 32:17]
    io.currentLayer <= currentLayer @[LayerParamShifter.scala 46:18]
    io.currentFeatureCnt <= featureCnts_0 @[LayerParamShifter.scala 47:23]
    io.actualFeatureCnt <= actualFeatureCnts_0 @[LayerParamShifter.scala 48:22]
    io.currentFeatureCnt65536 <= featureCnts65536_0 @[LayerParamShifter.scala 49:28]
    io.currentInputRound <= inputRound_0 @[LayerParamShifter.scala 50:23]
    io.currentTotalRound <= totalRound_0 @[LayerParamShifter.scala 51:23]
    io.currentAccWidth <= accWidth_0 @[LayerParamShifter.scala 52:21]
    node _T_38 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 53:30]
    io.lastLayer <= _T_38 @[LayerParamShifter.scala 53:15]
    when io.shift : @[LayerParamShifter.scala 55:18]
      featureCnts_0 <= featureCnts_1 @[LayerParamShifter.scala 57:22]
      actualFeatureCnts_0 <= actualFeatureCnts_1 @[LayerParamShifter.scala 58:28]
      featureCnts65536_0 <= featureCnts65536_1 @[LayerParamShifter.scala 59:27]
      accWidth_0 <= accWidth_1 @[LayerParamShifter.scala 60:18]
      inputRound_0 <= inputRound_1 @[LayerParamShifter.scala 61:20]
      totalRound_0 <= totalRound_1 @[LayerParamShifter.scala 62:20]
      node _T_40 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:24]
      when _T_40 : @[LayerParamShifter.scala 63:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 64:22]
        skip @[LayerParamShifter.scala 63:56]
      node _T_43 = eq(_T_40, UInt<1>("h00")) @[LayerParamShifter.scala 63:56]
      when _T_43 : @[LayerParamShifter.scala 65:9]
        node _T_45 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 66:35]
        node _T_46 = tail(_T_45, 1) @[LayerParamShifter.scala 66:35]
        currentLayer <= _T_46 @[LayerParamShifter.scala 66:21]
        skip @[LayerParamShifter.scala 65:9]
      featureCnts_1 <= featureCnts_0 @[LayerParamShifter.scala 57:22]
      actualFeatureCnts_1 <= actualFeatureCnts_0 @[LayerParamShifter.scala 58:28]
      featureCnts65536_1 <= featureCnts65536_0 @[LayerParamShifter.scala 59:27]
      accWidth_1 <= accWidth_0 @[LayerParamShifter.scala 60:18]
      inputRound_1 <= inputRound_0 @[LayerParamShifter.scala 61:20]
      totalRound_1 <= totalRound_0 @[LayerParamShifter.scala 62:20]
      node _T_48 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:24]
      when _T_48 : @[LayerParamShifter.scala 63:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 64:22]
        skip @[LayerParamShifter.scala 63:56]
      node _T_51 = eq(_T_48, UInt<1>("h00")) @[LayerParamShifter.scala 63:56]
      when _T_51 : @[LayerParamShifter.scala 65:9]
        node _T_53 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 66:35]
        node _T_54 = tail(_T_53, 1) @[LayerParamShifter.scala 66:35]
        currentLayer <= _T_54 @[LayerParamShifter.scala 66:21]
        skip @[LayerParamShifter.scala 65:9]
      skip @[LayerParamShifter.scala 55:18]
    
  module IglooScheduler : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip en : UInt<1>, flip inputOffset : UInt<8>, flip memOffset : UInt<8>, finished : UInt<1>, result : UInt<4>, flip memWen : UInt<1>, flip memWAddr : UInt<8>, flip memIn : UInt<128>, state : UInt<16>, mean : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst hw of XNORNetInference @[IglooScheduler.scala 90:18]
    hw.io is invalid
    hw.clock <= clock
    hw.reset <= reset
    reg inputPushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 93:27]
    reg inputBufferPushReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 94:33]
    reg inputBufferPopReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 95:32]
    reg inputBufferResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 96:34]
    reg accEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 97:23]
    reg accResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 98:26]
    reg maxEnReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 99:23]
    reg maxResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 100:26]
    reg meanResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 101:27]
    reg meanUpdateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 102:28]
    reg meanBufferResetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[IglooScheduler.scala 103:33]
    hw.io.inputPush <= inputPushReg @[IglooScheduler.scala 105:18]
    hw.io.inputBufferPush <= inputBufferPushReg @[IglooScheduler.scala 106:24]
    hw.io.inputBufferPop <= inputBufferPopReg @[IglooScheduler.scala 107:23]
    hw.io.inputBufferReset <= inputBufferResetReg @[IglooScheduler.scala 108:25]
    hw.io.accEn <= accEnReg @[IglooScheduler.scala 109:14]
    hw.io.accReset <= accResetReg @[IglooScheduler.scala 110:17]
    hw.io.maxEn <= maxEnReg @[IglooScheduler.scala 111:14]
    hw.io.maxReset <= maxResetReg @[IglooScheduler.scala 112:17]
    hw.io.meanReset <= meanResetReg @[IglooScheduler.scala 113:18]
    hw.io.meanUpdate <= meanUpdateReg @[IglooScheduler.scala 114:19]
    hw.io.meanBufferReset <= meanBufferResetReg @[IglooScheduler.scala 115:24]
    hw.io.memWen <= io.memWen @[IglooScheduler.scala 117:15]
    hw.io.memIn <= io.memIn @[IglooScheduler.scala 118:14]
    hw.io.memWAddr <= io.memWAddr @[IglooScheduler.scala 119:17]
    io.result <= hw.io.result @[IglooScheduler.scala 122:12]
    inst layerParams of LayerParamShifter @[IglooScheduler.scala 124:25]
    layerParams.io is invalid
    layerParams.clock <= clock
    layerParams.reset <= reset
    maxEnReg <= layerParams.io.lastLayer @[IglooScheduler.scala 126:11]
    hw.io.actualFeatureNum <= layerParams.io.actualFeatureCnt @[IglooScheduler.scala 127:25]
    hw.io.featureNumInverse65536 <= layerParams.io.currentFeatureCnt65536 @[IglooScheduler.scala 128:31]
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[IglooScheduler.scala 131:20]
    reg substate : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IglooScheduler.scala 132:23]
    io.state <= state @[IglooScheduler.scala 133:11]
    io.mean <= hw.io.mean @[IglooScheduler.scala 134:10]
    reg maxOffsetReg : UInt<4>, clock @[IglooScheduler.scala 149:23]
    hw.io.maxOffset <= maxOffsetReg @[IglooScheduler.scala 150:18]
    reg memOffset : UInt<8>, clock @[IglooScheduler.scala 153:20]
    hw.io.memAddr <= memOffset @[IglooScheduler.scala 154:17]
    hw.io.input <= hw.io.memOut @[IglooScheduler.scala 155:14]
    node acc = rem(substate, layerParams.io.currentAccWidth) @[IglooScheduler.scala 158:19]
    hw.io.accSel <= acc @[IglooScheduler.scala 159:15]
    node _T_41 = eq(state, UInt<8>("h01")) @[IglooScheduler.scala 137:25]
    io.finished <= _T_41 @[IglooScheduler.scala 161:14]
    layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
    when io.en : @[IglooScheduler.scala 166:15]
      node _T_44 = eq(state, UInt<8>("h00")) @[IglooScheduler.scala 137:25]
      when _T_44 : @[IglooScheduler.scala 168:21]
        memOffset <= io.inputOffset @[IglooScheduler.scala 169:16]
        inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        inputBufferPopReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        inputBufferResetReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
        meanResetReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
        state <= UInt<8>("h02") @[IglooScheduler.scala 139:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
        skip @[IglooScheduler.scala 168:21]
      node _T_52 = eq(state, UInt<8>("h02")) @[IglooScheduler.scala 137:25]
      when _T_52 : @[IglooScheduler.scala 180:23]
        inputBufferResetReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        inputPushReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
        meanResetReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        node _T_57 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 185:27]
        node _T_58 = tail(_T_57, 1) @[IglooScheduler.scala 185:27]
        memOffset <= _T_58 @[IglooScheduler.scala 185:16]
        state <= UInt<8>("h03") @[IglooScheduler.scala 139:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
        skip @[IglooScheduler.scala 180:23]
      node _T_62 = eq(state, UInt<8>("h03")) @[IglooScheduler.scala 137:25]
      when _T_62 : @[IglooScheduler.scala 188:26]
        node _T_64 = lt(substate, UInt<1>("h00")) @[IglooScheduler.scala 190:21]
        when _T_64 : @[IglooScheduler.scala 190:50]
          node _T_66 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 192:29]
          node _T_67 = tail(_T_66, 1) @[IglooScheduler.scala 192:29]
          memOffset <= _T_67 @[IglooScheduler.scala 192:18]
          node _T_69 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 141:30]
          node _T_70 = tail(_T_69, 1) @[IglooScheduler.scala 141:30]
          substate <= _T_70 @[IglooScheduler.scala 141:20]
          skip @[IglooScheduler.scala 190:50]
        node _T_72 = eq(substate, UInt<1>("h00")) @[IglooScheduler.scala 194:27]
        node _T_74 = eq(_T_64, UInt<1>("h00")) @[IglooScheduler.scala 190:50]
        node _T_75 = and(_T_74, _T_72) @[IglooScheduler.scala 194:58]
        when _T_75 : @[IglooScheduler.scala 194:58]
          memOffset <= io.memOffset @[IglooScheduler.scala 195:19]
          state <= UInt<8>("h04") @[IglooScheduler.scala 139:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
          skip @[IglooScheduler.scala 194:58]
        skip @[IglooScheduler.scala 188:26]
      node _T_79 = eq(state, UInt<8>("h04")) @[IglooScheduler.scala 137:25]
      when _T_79 : @[IglooScheduler.scala 199:28]
        inputPushReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
        accResetReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
        hw.io.accSel <= UInt<1>("h00") @[IglooScheduler.scala 206:20]
        node _T_85 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 208:27]
        node _T_86 = tail(_T_85, 1) @[IglooScheduler.scala 208:27]
        memOffset <= _T_86 @[IglooScheduler.scala 208:16]
        state <= UInt<8>("h05") @[IglooScheduler.scala 139:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
        skip @[IglooScheduler.scala 199:28]
      node _T_90 = eq(state, UInt<8>("h05")) @[IglooScheduler.scala 137:25]
      when _T_90 : @[IglooScheduler.scala 213:20]
        layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        accResetReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        meanUpdateReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        node _T_95 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 222:27]
        node _T_96 = tail(_T_95, 1) @[IglooScheduler.scala 222:27]
        memOffset <= _T_96 @[IglooScheduler.scala 222:16]
        node _T_98 = sub(layerParams.io.currentAccWidth, UInt<2>("h02")) @[IglooScheduler.scala 224:48]
        node _T_99 = asUInt(_T_98) @[IglooScheduler.scala 224:48]
        node _T_100 = tail(_T_99, 1) @[IglooScheduler.scala 224:48]
        node _T_101 = eq(acc, _T_100) @[IglooScheduler.scala 224:15]
        when _T_101 : @[IglooScheduler.scala 224:53]
          inputBufferPopReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
          skip @[IglooScheduler.scala 224:53]
        node _T_104 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 227:54]
        node _T_105 = asUInt(_T_104) @[IglooScheduler.scala 227:54]
        node _T_106 = tail(_T_105, 1) @[IglooScheduler.scala 227:54]
        node _T_107 = eq(acc, _T_106) @[IglooScheduler.scala 227:21]
        node _T_109 = eq(_T_101, UInt<1>("h00")) @[IglooScheduler.scala 224:53]
        node _T_110 = and(_T_109, _T_107) @[IglooScheduler.scala 227:59]
        when _T_110 : @[IglooScheduler.scala 227:59]
          inputBufferPopReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
          skip @[IglooScheduler.scala 227:59]
        node _T_113 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 231:53]
        node _T_114 = asUInt(_T_113) @[IglooScheduler.scala 231:53]
        node _T_115 = tail(_T_114, 1) @[IglooScheduler.scala 231:53]
        node _T_116 = lt(substate, _T_115) @[IglooScheduler.scala 231:20]
        when _T_116 : @[IglooScheduler.scala 231:58]
          node _T_118 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 141:30]
          node _T_119 = tail(_T_118, 1) @[IglooScheduler.scala 141:30]
          substate <= _T_119 @[IglooScheduler.scala 141:20]
          accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
          inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
          skip @[IglooScheduler.scala 231:58]
        node _T_123 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 236:61]
        node _T_124 = asUInt(_T_123) @[IglooScheduler.scala 236:61]
        node _T_125 = tail(_T_124, 1) @[IglooScheduler.scala 236:61]
        node _T_126 = eq(substate, _T_125) @[IglooScheduler.scala 236:26]
        node _T_128 = eq(_T_116, UInt<1>("h00")) @[IglooScheduler.scala 231:58]
        node _T_129 = and(_T_128, _T_126) @[IglooScheduler.scala 236:66]
        when _T_129 : @[IglooScheduler.scala 236:66]
          inputBufferPushReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
          state <= UInt<8>("h06") @[IglooScheduler.scala 139:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
          maxResetReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
          meanBufferResetReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
          maxOffsetReg <= UInt<1>("h00") @[IglooScheduler.scala 247:21]
          accEnReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
          skip @[IglooScheduler.scala 236:66]
        skip @[IglooScheduler.scala 213:20]
      node _T_138 = eq(state, UInt<8>("h06")) @[IglooScheduler.scala 137:25]
      when _T_138 : @[IglooScheduler.scala 252:18]
        node _T_140 = eq(reset, UInt<1>("h00")) @[IglooScheduler.scala 253:13]
        when _T_140 : @[IglooScheduler.scala 253:13]
          printf(clock, UInt<1>(1), "bn abmc: %d %d %d %d\n", hw.io.maa, hw.io.mab, hw.io.mam, hw.io.mac) @[IglooScheduler.scala 253:13]
          skip @[IglooScheduler.scala 253:13]
        node _T_142 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 256:27]
        node _T_143 = tail(_T_142, 1) @[IglooScheduler.scala 256:27]
        memOffset <= _T_143 @[IglooScheduler.scala 256:16]
        maxResetReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        meanBufferResetReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
        node _T_147 = add(maxOffsetReg, UInt<3>("h04")) @[IglooScheduler.scala 261:33]
        node _T_148 = tail(_T_147, 1) @[IglooScheduler.scala 261:33]
        maxOffsetReg <= _T_148 @[IglooScheduler.scala 261:19]
        node _T_150 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 141:30]
        node _T_151 = tail(_T_150, 1) @[IglooScheduler.scala 141:30]
        substate <= _T_151 @[IglooScheduler.scala 141:20]
        node _T_153 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 263:54]
        node _T_154 = asUInt(_T_153) @[IglooScheduler.scala 263:54]
        node _T_155 = tail(_T_154, 1) @[IglooScheduler.scala 263:54]
        node _T_156 = eq(substate, _T_155) @[IglooScheduler.scala 263:20]
        when _T_156 : @[IglooScheduler.scala 263:59]
          when layerParams.io.lastLayer : @[IglooScheduler.scala 266:40]
            maxEnReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
            state <= UInt<8>("h01") @[IglooScheduler.scala 139:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
            skip @[IglooScheduler.scala 266:40]
          node _T_161 = eq(layerParams.io.lastLayer, UInt<1>("h00")) @[IglooScheduler.scala 266:40]
          when _T_161 : @[IglooScheduler.scala 270:11]
            layerParams.io.shift <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
            meanUpdateReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
            inputBufferPushReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
            accResetReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
            accEnReg <= UInt<1>("h01") @[IglooScheduler.scala 143:20]
            state <= UInt<8>("h05") @[IglooScheduler.scala 139:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 139:50]
            skip @[IglooScheduler.scala 270:11]
          skip @[IglooScheduler.scala 263:59]
        node _T_170 = eq(_T_156, UInt<1>("h00")) @[IglooScheduler.scala 263:59]
        when _T_170 : @[IglooScheduler.scala 285:9]
          accResetReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
          accEnReg <= UInt<1>("h00") @[IglooScheduler.scala 144:22]
          skip @[IglooScheduler.scala 285:9]
        skip @[IglooScheduler.scala 252:18]
      skip @[IglooScheduler.scala 166:15]
    
