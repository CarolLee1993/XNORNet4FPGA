;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-05-30 21:57:15.424, builtAtMillis: 1496181435424
circuit IglooScheduler : 
  module Memo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module AggregateMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<8>, flip in : UInt<128>, out : UInt<128>, flip wen : UInt<1>, flip ren : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst Memo of Memo @[AggregateMem.scala 11:11]
    Memo.io is invalid
    Memo.clock <= clock
    Memo.reset <= reset
    inst Memo_1 of Memo_1 @[AggregateMem.scala 11:11]
    Memo_1.io is invalid
    Memo_1.clock <= clock
    Memo_1.reset <= reset
    inst Memo_2 of Memo_2 @[AggregateMem.scala 11:11]
    Memo_2.io is invalid
    Memo_2.clock <= clock
    Memo_2.reset <= reset
    inst Memo_3 of Memo_3 @[AggregateMem.scala 11:11]
    Memo_3.io is invalid
    Memo_3.clock <= clock
    Memo_3.reset <= reset
    inst Memo_4 of Memo_4 @[AggregateMem.scala 11:11]
    Memo_4.io is invalid
    Memo_4.clock <= clock
    Memo_4.reset <= reset
    inst Memo_5 of Memo_5 @[AggregateMem.scala 11:11]
    Memo_5.io is invalid
    Memo_5.clock <= clock
    Memo_5.reset <= reset
    inst Memo_6 of Memo_6 @[AggregateMem.scala 11:11]
    Memo_6.io is invalid
    Memo_6.clock <= clock
    Memo_6.reset <= reset
    inst Memo_7 of Memo_7 @[AggregateMem.scala 11:11]
    Memo_7.io is invalid
    Memo_7.clock <= clock
    Memo_7.reset <= reset
    Memo.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_1.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_1.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_1.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_1.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_2.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_2.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_2.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_2.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_3.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_3.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_3.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_3.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_4.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_4.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_4.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_4.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_5.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_5.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_5.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_5.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_6.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_6.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_6.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_6.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_7.io.ren <= io.ren @[AggregateMem.scala 33:19]
    Memo_7.io.wen <= io.wen @[AggregateMem.scala 34:19]
    Memo_7.io.rdAddr <= io.addr @[AggregateMem.scala 35:22]
    Memo_7.io.wrAddr <= io.addr @[AggregateMem.scala 36:22]
    node _T_8 = bits(io.in, 15, 0) @[AggregateMem.scala 39:88]
    node _T_9 = cat(UInt<2>("h00"), _T_8) @[Cat.scala 30:58]
    Memo.io.wrData <= _T_9 @[AggregateMem.scala 39:23]
    node _T_11 = bits(io.in, 31, 16) @[AggregateMem.scala 39:88]
    node _T_12 = cat(UInt<2>("h00"), _T_11) @[Cat.scala 30:58]
    Memo_1.io.wrData <= _T_12 @[AggregateMem.scala 39:23]
    node _T_14 = bits(io.in, 47, 32) @[AggregateMem.scala 39:88]
    node _T_15 = cat(UInt<2>("h00"), _T_14) @[Cat.scala 30:58]
    Memo_2.io.wrData <= _T_15 @[AggregateMem.scala 39:23]
    node _T_17 = bits(io.in, 63, 48) @[AggregateMem.scala 39:88]
    node _T_18 = cat(UInt<2>("h00"), _T_17) @[Cat.scala 30:58]
    Memo_3.io.wrData <= _T_18 @[AggregateMem.scala 39:23]
    node _T_20 = bits(io.in, 79, 64) @[AggregateMem.scala 39:88]
    node _T_21 = cat(UInt<2>("h00"), _T_20) @[Cat.scala 30:58]
    Memo_4.io.wrData <= _T_21 @[AggregateMem.scala 39:23]
    node _T_23 = bits(io.in, 95, 80) @[AggregateMem.scala 39:88]
    node _T_24 = cat(UInt<2>("h00"), _T_23) @[Cat.scala 30:58]
    Memo_5.io.wrData <= _T_24 @[AggregateMem.scala 39:23]
    node _T_26 = bits(io.in, 111, 96) @[AggregateMem.scala 39:88]
    node _T_27 = cat(UInt<2>("h00"), _T_26) @[Cat.scala 30:58]
    Memo_6.io.wrData <= _T_27 @[AggregateMem.scala 39:23]
    node _T_29 = bits(io.in, 127, 112) @[AggregateMem.scala 39:88]
    node _T_30 = cat(UInt<2>("h00"), _T_29) @[Cat.scala 30:58]
    Memo_7.io.wrData <= _T_30 @[AggregateMem.scala 39:23]
    node _T_31 = bits(Memo_7.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_32 = bits(Memo_6.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_33 = bits(Memo_5.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_34 = bits(Memo_4.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_35 = bits(Memo_3.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_36 = bits(Memo_2.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_37 = bits(Memo_1.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_38 = bits(Memo.io.rdData, 15, 0) @[AggregateMem.scala 41:64]
    node _T_39 = cat(_T_37, _T_38) @[Cat.scala 30:58]
    node _T_40 = cat(_T_35, _T_36) @[Cat.scala 30:58]
    node _T_41 = cat(_T_40, _T_39) @[Cat.scala 30:58]
    node _T_42 = cat(_T_33, _T_34) @[Cat.scala 30:58]
    node _T_43 = cat(_T_31, _T_32) @[Cat.scala 30:58]
    node _T_44 = cat(_T_43, _T_42) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_41) @[Cat.scala 30:58]
    io.out <= _T_45 @[AggregateMem.scala 41:9]
    
  module BinaryBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<4>, flip push : UInt<1>, out : UInt<32>, flip pop : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg wPos : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[BinaryBuffer.scala 23:19]
    reg rPos : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[BinaryBuffer.scala 24:19]
    reg mem : UInt<4>[64], clock @[BinaryBuffer.scala 26:14]
    node _T_79 = cat(mem[6], mem[7]) @[Cat.scala 30:58]
    node _T_80 = cat(mem[4], mem[5]) @[Cat.scala 30:58]
    node _T_81 = cat(_T_80, _T_79) @[Cat.scala 30:58]
    node _T_82 = cat(mem[2], mem[3]) @[Cat.scala 30:58]
    node _T_83 = cat(mem[0], mem[1]) @[Cat.scala 30:58]
    node _T_84 = cat(_T_83, _T_82) @[Cat.scala 30:58]
    node _T_85 = cat(_T_84, _T_81) @[Cat.scala 30:58]
    node _T_86 = cat(mem[14], mem[15]) @[Cat.scala 30:58]
    node _T_87 = cat(mem[12], mem[13]) @[Cat.scala 30:58]
    node _T_88 = cat(_T_87, _T_86) @[Cat.scala 30:58]
    node _T_89 = cat(mem[10], mem[11]) @[Cat.scala 30:58]
    node _T_90 = cat(mem[8], mem[9]) @[Cat.scala 30:58]
    node _T_91 = cat(_T_90, _T_89) @[Cat.scala 30:58]
    node _T_92 = cat(_T_91, _T_88) @[Cat.scala 30:58]
    node _T_93 = cat(mem[22], mem[23]) @[Cat.scala 30:58]
    node _T_94 = cat(mem[20], mem[21]) @[Cat.scala 30:58]
    node _T_95 = cat(_T_94, _T_93) @[Cat.scala 30:58]
    node _T_96 = cat(mem[18], mem[19]) @[Cat.scala 30:58]
    node _T_97 = cat(mem[16], mem[17]) @[Cat.scala 30:58]
    node _T_98 = cat(_T_97, _T_96) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, _T_95) @[Cat.scala 30:58]
    node _T_100 = cat(mem[30], mem[31]) @[Cat.scala 30:58]
    node _T_101 = cat(mem[28], mem[29]) @[Cat.scala 30:58]
    node _T_102 = cat(_T_101, _T_100) @[Cat.scala 30:58]
    node _T_103 = cat(mem[26], mem[27]) @[Cat.scala 30:58]
    node _T_104 = cat(mem[24], mem[25]) @[Cat.scala 30:58]
    node _T_105 = cat(_T_104, _T_103) @[Cat.scala 30:58]
    node _T_106 = cat(_T_105, _T_102) @[Cat.scala 30:58]
    node _T_107 = cat(mem[38], mem[39]) @[Cat.scala 30:58]
    node _T_108 = cat(mem[36], mem[37]) @[Cat.scala 30:58]
    node _T_109 = cat(_T_108, _T_107) @[Cat.scala 30:58]
    node _T_110 = cat(mem[34], mem[35]) @[Cat.scala 30:58]
    node _T_111 = cat(mem[32], mem[33]) @[Cat.scala 30:58]
    node _T_112 = cat(_T_111, _T_110) @[Cat.scala 30:58]
    node _T_113 = cat(_T_112, _T_109) @[Cat.scala 30:58]
    node _T_114 = cat(mem[46], mem[47]) @[Cat.scala 30:58]
    node _T_115 = cat(mem[44], mem[45]) @[Cat.scala 30:58]
    node _T_116 = cat(_T_115, _T_114) @[Cat.scala 30:58]
    node _T_117 = cat(mem[42], mem[43]) @[Cat.scala 30:58]
    node _T_118 = cat(mem[40], mem[41]) @[Cat.scala 30:58]
    node _T_119 = cat(_T_118, _T_117) @[Cat.scala 30:58]
    node _T_120 = cat(_T_119, _T_116) @[Cat.scala 30:58]
    node _T_121 = cat(mem[54], mem[55]) @[Cat.scala 30:58]
    node _T_122 = cat(mem[52], mem[53]) @[Cat.scala 30:58]
    node _T_123 = cat(_T_122, _T_121) @[Cat.scala 30:58]
    node _T_124 = cat(mem[50], mem[51]) @[Cat.scala 30:58]
    node _T_125 = cat(mem[48], mem[49]) @[Cat.scala 30:58]
    node _T_126 = cat(_T_125, _T_124) @[Cat.scala 30:58]
    node _T_127 = cat(_T_126, _T_123) @[Cat.scala 30:58]
    node _T_128 = cat(mem[62], mem[63]) @[Cat.scala 30:58]
    node _T_129 = cat(mem[60], mem[61]) @[Cat.scala 30:58]
    node _T_130 = cat(_T_129, _T_128) @[Cat.scala 30:58]
    node _T_131 = cat(mem[58], mem[59]) @[Cat.scala 30:58]
    node _T_132 = cat(mem[56], mem[57]) @[Cat.scala 30:58]
    node _T_133 = cat(_T_132, _T_131) @[Cat.scala 30:58]
    node _T_134 = cat(_T_133, _T_130) @[Cat.scala 30:58]
    wire catMem : UInt<32>[8] @[BinaryBuffer.scala 27:17]
    catMem is invalid @[BinaryBuffer.scala 27:17]
    catMem[0] <= _T_85 @[BinaryBuffer.scala 27:17]
    catMem[1] <= _T_92 @[BinaryBuffer.scala 27:17]
    catMem[2] <= _T_99 @[BinaryBuffer.scala 27:17]
    catMem[3] <= _T_106 @[BinaryBuffer.scala 27:17]
    catMem[4] <= _T_113 @[BinaryBuffer.scala 27:17]
    catMem[5] <= _T_120 @[BinaryBuffer.scala 27:17]
    catMem[6] <= _T_127 @[BinaryBuffer.scala 27:17]
    catMem[7] <= _T_134 @[BinaryBuffer.scala 27:17]
    when io.push : @[BinaryBuffer.scala 29:16]
      mem[wPos] <= io.in @[BinaryBuffer.scala 30:14]
      node _T_149 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 31:15]
      node _T_150 = tail(_T_149, 1) @[BinaryBuffer.scala 31:15]
      wPos <= _T_150 @[BinaryBuffer.scala 31:9]
      skip @[BinaryBuffer.scala 29:16]
    when io.pop : @[BinaryBuffer.scala 34:15]
      node _T_152 = add(rPos, UInt<1>("h01")) @[BinaryBuffer.scala 35:15]
      node _T_153 = tail(_T_152, 1) @[BinaryBuffer.scala 35:15]
      rPos <= _T_153 @[BinaryBuffer.scala 35:9]
      skip @[BinaryBuffer.scala 34:15]
    io.out <= catMem[rPos] @[BinaryBuffer.scala 38:9]
    
  module XNOR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<32>, flip in2 : UInt<32>[4], out : UInt<32>[4]}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_21 = xor(io.in1, io.in2[0]) @[XNOR.scala 18:27]
    node _T_22 = not(_T_21) @[XNOR.scala 18:18]
    io.out[0] <= _T_22 @[XNOR.scala 18:15]
    node _T_23 = xor(io.in1, io.in2[1]) @[XNOR.scala 18:27]
    node _T_24 = not(_T_23) @[XNOR.scala 18:18]
    io.out[1] <= _T_24 @[XNOR.scala 18:15]
    node _T_25 = xor(io.in1, io.in2[2]) @[XNOR.scala 18:27]
    node _T_26 = not(_T_25) @[XNOR.scala 18:18]
    io.out[2] <= _T_26 @[XNOR.scala 18:15]
    node _T_27 = xor(io.in1, io.in2[3]) @[XNOR.scala 18:27]
    node _T_28 = not(_T_27) @[XNOR.scala 18:18]
    io.out[3] <= _T_28 @[XNOR.scala 18:15]
    
  module MeanBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>[4], flip cntInverse65536 : UInt<16>, flip reset : UInt<1>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg acc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MeanBuffer.scala 19:20]
    node _T_17 = gt(io.in[0], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_19 = sub(asSInt(UInt<1>("h00")), io.in[0]) @[MeanBuffer.scala 17:42]
    node _T_20 = tail(_T_19, 1) @[MeanBuffer.scala 17:42]
    node _T_21 = asSInt(_T_20) @[MeanBuffer.scala 17:42]
    node _T_22 = mux(_T_17, io.in[0], _T_21) @[MeanBuffer.scala 17:25]
    node _T_23 = asUInt(_T_22) @[MeanBuffer.scala 17:53]
    node _T_25 = gt(io.in[1], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_27 = sub(asSInt(UInt<1>("h00")), io.in[1]) @[MeanBuffer.scala 17:42]
    node _T_28 = tail(_T_27, 1) @[MeanBuffer.scala 17:42]
    node _T_29 = asSInt(_T_28) @[MeanBuffer.scala 17:42]
    node _T_30 = mux(_T_25, io.in[1], _T_29) @[MeanBuffer.scala 17:25]
    node _T_31 = asUInt(_T_30) @[MeanBuffer.scala 17:53]
    node _T_33 = gt(io.in[2], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_35 = sub(asSInt(UInt<1>("h00")), io.in[2]) @[MeanBuffer.scala 17:42]
    node _T_36 = tail(_T_35, 1) @[MeanBuffer.scala 17:42]
    node _T_37 = asSInt(_T_36) @[MeanBuffer.scala 17:42]
    node _T_38 = mux(_T_33, io.in[2], _T_37) @[MeanBuffer.scala 17:25]
    node _T_39 = asUInt(_T_38) @[MeanBuffer.scala 17:53]
    node _T_41 = gt(io.in[3], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_43 = sub(asSInt(UInt<1>("h00")), io.in[3]) @[MeanBuffer.scala 17:42]
    node _T_44 = tail(_T_43, 1) @[MeanBuffer.scala 17:42]
    node _T_45 = asSInt(_T_44) @[MeanBuffer.scala 17:42]
    node _T_46 = mux(_T_41, io.in[3], _T_45) @[MeanBuffer.scala 17:25]
    node _T_47 = asUInt(_T_46) @[MeanBuffer.scala 17:53]
    node _T_48 = add(_T_23, _T_31) @[ArraySum.scala 13:14]
    node _T_49 = tail(_T_48, 1) @[ArraySum.scala 13:14]
    node _T_50 = add(_T_39, _T_47) @[ArraySum.scala 13:14]
    node _T_51 = tail(_T_50, 1) @[ArraySum.scala 13:14]
    node _T_52 = add(_T_49, _T_51) @[ArraySum.scala 13:14]
    node absSum = tail(_T_52, 1) @[ArraySum.scala 13:14]
    node _T_54 = eq(io.reset, UInt<1>("h00")) @[MeanBuffer.scala 22:8]
    when _T_54 : @[MeanBuffer.scala 22:21]
      node _T_55 = add(acc, absSum) @[MeanBuffer.scala 23:16]
      node _T_56 = tail(_T_55, 1) @[MeanBuffer.scala 23:16]
      acc <= _T_56 @[MeanBuffer.scala 23:9]
      skip @[MeanBuffer.scala 22:21]
    node _T_58 = eq(_T_54, UInt<1>("h00")) @[MeanBuffer.scala 22:21]
    when _T_58 : @[MeanBuffer.scala 24:5]
      acc <= absSum @[MeanBuffer.scala 25:9]
      skip @[MeanBuffer.scala 24:5]
    node _T_59 = mul(acc, io.cntInverse65536) @[MeanBuffer.scala 27:18]
    node _T_60 = shr(_T_59, 16) @[MeanBuffer.scala 27:39]
    io.out <= _T_60 @[MeanBuffer.scala 27:10]
    
  module DelayedOutput : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, flip update : UInt<1>, output : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h01"))) @[DelayedOutput.scala 16:18]
    io.output <= reg @[DelayedOutput.scala 17:12]
    when io.update : @[DelayedOutput.scala 18:18]
      reg <= io.input @[DelayedOutput.scala 19:8]
      skip @[DelayedOutput.scala 18:18]
    
  module MaxBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip en : UInt<1>, flip in : SInt<32>[4], flip offset : UInt<4>, out : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg idxReg : UInt<4>, clock @[MaxBuffer.scala 18:17]
    reg dataReg : SInt<32>, clock @[MaxBuffer.scala 19:18]
    io.out <= idxReg @[MaxBuffer.scala 21:9]
    node _T_18 = add(UInt<1>("h00"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_19 = tail(_T_18, 1) @[MaxBuffer.scala 32:56]
    node _T_21 = add(UInt<1>("h01"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_22 = tail(_T_21, 1) @[MaxBuffer.scala 32:56]
    node _T_24 = add(UInt<2>("h02"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_25 = tail(_T_24, 1) @[MaxBuffer.scala 32:56]
    node _T_27 = add(UInt<2>("h03"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_28 = tail(_T_27, 1) @[MaxBuffer.scala 32:56]
    node _T_29 = gt(io.in[0], io.in[1]) @[MaxBuffer.scala 27:28]
    node _T_30 = mux(_T_29, _T_19, _T_22) @[MaxBuffer.scala 28:13]
    node _T_31 = mux(_T_29, io.in[0], io.in[1]) @[MaxBuffer.scala 28:47]
    node _T_32 = gt(io.in[2], io.in[3]) @[MaxBuffer.scala 27:28]
    node _T_33 = mux(_T_32, _T_25, _T_28) @[MaxBuffer.scala 28:13]
    node _T_34 = mux(_T_32, io.in[2], io.in[3]) @[MaxBuffer.scala 28:47]
    node _T_35 = gt(_T_31, _T_34) @[MaxBuffer.scala 27:28]
    node _T_36 = mux(_T_35, _T_30, _T_33) @[MaxBuffer.scala 28:13]
    node _T_37 = mux(_T_35, _T_31, _T_34) @[MaxBuffer.scala 28:47]
    node cmp2 = gt(dataReg, _T_37) @[MaxBuffer.scala 34:20]
    when io.en : @[MaxBuffer.scala 36:15]
      node _T_39 = eq(io.reset, UInt<1>("h00")) @[MaxBuffer.scala 37:10]
      when _T_39 : @[MaxBuffer.scala 37:23]
        node _T_40 = mux(cmp2, dataReg, _T_37) @[MaxBuffer.scala 38:21]
        dataReg <= _T_40 @[MaxBuffer.scala 38:15]
        node _T_41 = mux(cmp2, idxReg, _T_36) @[MaxBuffer.scala 39:19]
        idxReg <= _T_41 @[MaxBuffer.scala 39:14]
        skip @[MaxBuffer.scala 37:23]
      node _T_43 = eq(_T_39, UInt<1>("h00")) @[MaxBuffer.scala 37:23]
      when _T_43 : @[MaxBuffer.scala 40:7]
        dataReg <= _T_37 @[MaxBuffer.scala 41:15]
        idxReg <= _T_36 @[MaxBuffer.scala 42:13]
        skip @[MaxBuffer.scala 40:7]
      skip @[MaxBuffer.scala 36:15]
    
  module Accumulator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      io.out <= io.in @[Accumulator.scala 32:11]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      io.out <= io.in @[Accumulator.scala 32:11]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      io.out <= io.in @[Accumulator.scala 32:11]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      io.out <= io.in @[Accumulator.scala 32:11]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module XNORNetInference : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<4>, flip bnBufferSel : UInt<0>, flip inputSel : UInt<1>, flip inputBufferPush : UInt<1>, flip inputBufferPop : UInt<1>, flip memSel : UInt<1>, flip memAddr : UInt<8>, memOut : UInt<128>, flip memRen : UInt<1>, flip memWen : UInt<1>, flip memIn : UInt<128>, flip accEn : UInt<1>, flip accSel : UInt<5>, flip accReset : UInt<1>, flip maxClear : UInt<1>, flip maxEn : UInt<1>, flip maxOffset : UInt<4>, flip meanReset : UInt<1>, flip featureNumInverse65536 : UInt<16>, flip meanUpdate : UInt<1>, result : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst mem of AggregateMem @[XNORNetInference.scala 23:17]
    mem.io is invalid
    mem.clock <= clock
    mem.reset <= reset
    mem.io.addr <= io.memAddr @[XNORNetInference.scala 53:14]
    io.memOut <= mem.io.out @[XNORNetInference.scala 54:12]
    mem.io.ren <= io.memRen @[XNORNetInference.scala 55:13]
    mem.io.wen <= io.memWen @[XNORNetInference.scala 56:13]
    mem.io.in <= io.memIn @[XNORNetInference.scala 57:12]
    wire inputWire : UInt<4> @[XNORNetInference.scala 59:21]
    inputWire is invalid @[XNORNetInference.scala 59:21]
    inst binaryBuffer of BinaryBuffer @[XNORNetInference.scala 61:26]
    binaryBuffer.io is invalid
    binaryBuffer.clock <= clock
    binaryBuffer.reset <= reset
    node _T_24 = mux(io.inputSel, io.input, inputWire) @[XNORNetInference.scala 65:26]
    binaryBuffer.io.in <= _T_24 @[XNORNetInference.scala 65:21]
    binaryBuffer.io.push <= io.inputBufferPush @[XNORNetInference.scala 66:23]
    binaryBuffer.io.pop <= io.inputBufferPop @[XNORNetInference.scala 67:22]
    inst xnor of XNOR @[XNORNetInference.scala 69:18]
    xnor.io is invalid
    xnor.clock <= clock
    xnor.reset <= reset
    xnor.io.in1 <= binaryBuffer.io.out @[XNORNetInference.scala 72:14]
    wire _T_35 : UInt<32>[4] @[XNORNetInference.scala 78:20]
    _T_35 is invalid @[XNORNetInference.scala 78:20]
    wire _T_48 : UInt<128>
    _T_48 is invalid
    _T_48 <= mem.io.out
    node _T_49 = bits(_T_48, 31, 0) @[XNORNetInference.scala 78:20]
    _T_35[0] <= _T_49 @[XNORNetInference.scala 78:20]
    node _T_50 = bits(_T_48, 63, 32) @[XNORNetInference.scala 78:20]
    _T_35[1] <= _T_50 @[XNORNetInference.scala 78:20]
    node _T_51 = bits(_T_48, 95, 64) @[XNORNetInference.scala 78:20]
    _T_35[2] <= _T_51 @[XNORNetInference.scala 78:20]
    node _T_52 = bits(_T_48, 127, 96) @[XNORNetInference.scala 78:20]
    _T_35[3] <= _T_52 @[XNORNetInference.scala 78:20]
    wire _T_59 : UInt<32>[4] @[XNORNetInference.scala 79:8]
    _T_59 is invalid @[XNORNetInference.scala 79:8]
    _T_59[0] <= UInt<32>("h00") @[XNORNetInference.scala 79:8]
    _T_59[1] <= UInt<32>("h00") @[XNORNetInference.scala 79:8]
    _T_59[2] <= UInt<32>("h00") @[XNORNetInference.scala 79:8]
    _T_59[3] <= UInt<32>("h00") @[XNORNetInference.scala 79:8]
    node _T_66 = mux(io.memSel, _T_35, _T_59) @[XNORNetInference.scala 76:19]
    xnor.io.in2[0] <= _T_66[0] @[XNORNetInference.scala 76:14]
    xnor.io.in2[1] <= _T_66[1] @[XNORNetInference.scala 76:14]
    xnor.io.in2[2] <= _T_66[2] @[XNORNetInference.scala 76:14]
    xnor.io.in2[3] <= _T_66[3] @[XNORNetInference.scala 76:14]
    inst meanBuffer of MeanBuffer @[XNORNetInference.scala 82:24]
    meanBuffer.io is invalid
    meanBuffer.clock <= clock
    meanBuffer.reset <= reset
    inst mean of DelayedOutput @[XNORNetInference.scala 88:18]
    mean.io is invalid
    mean.clock <= clock
    mean.reset <= reset
    mean.io.update <= io.meanUpdate @[XNORNetInference.scala 89:17]
    inst maxModule of MaxBuffer @[XNORNetInference.scala 92:23]
    maxModule.io is invalid
    maxModule.clock <= clock
    maxModule.reset <= reset
    maxModule.io.en <= io.maxEn @[XNORNetInference.scala 96:18]
    maxModule.io.reset <= io.maxClear @[XNORNetInference.scala 97:21]
    maxModule.io.offset <= io.maxOffset @[XNORNetInference.scala 98:22]
    io.result <= maxModule.io.out @[XNORNetInference.scala 99:12]
    inst Accumulator of Accumulator @[XNORNetInference.scala 103:21]
    Accumulator.io is invalid
    Accumulator.clock <= clock
    Accumulator.reset <= reset
    node _T_83 = bits(xnor.io.out[0], 3, 0) @[BitSum.scala 31:51]
    node _T_84 = bits(xnor.io.out[0], 7, 4) @[BitSum.scala 31:51]
    node _T_85 = bits(xnor.io.out[0], 11, 8) @[BitSum.scala 31:51]
    node _T_86 = bits(xnor.io.out[0], 15, 12) @[BitSum.scala 31:51]
    node _T_87 = bits(xnor.io.out[0], 19, 16) @[BitSum.scala 31:51]
    node _T_88 = bits(xnor.io.out[0], 23, 20) @[BitSum.scala 31:51]
    node _T_89 = bits(xnor.io.out[0], 27, 24) @[BitSum.scala 31:51]
    node _T_90 = bits(xnor.io.out[0], 31, 28) @[BitSum.scala 31:51]
    reg _T_93 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_96 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_99 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_102 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_105 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_108 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_111 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_114 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_117 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_120 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_123 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_126 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_129 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_132 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_135 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_138 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_141 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_141 is invalid @[BitSum.scala 11:24]
    _T_141[0] <= _T_93 @[BitSum.scala 11:24]
    _T_141[1] <= _T_96 @[BitSum.scala 11:24]
    _T_141[2] <= _T_99 @[BitSum.scala 11:24]
    _T_141[3] <= _T_102 @[BitSum.scala 11:24]
    _T_141[4] <= _T_105 @[BitSum.scala 11:24]
    _T_141[5] <= _T_108 @[BitSum.scala 11:24]
    _T_141[6] <= _T_111 @[BitSum.scala 11:24]
    _T_141[7] <= _T_114 @[BitSum.scala 11:24]
    _T_141[8] <= _T_117 @[BitSum.scala 11:24]
    _T_141[9] <= _T_120 @[BitSum.scala 11:24]
    _T_141[10] <= _T_123 @[BitSum.scala 11:24]
    _T_141[11] <= _T_126 @[BitSum.scala 11:24]
    _T_141[12] <= _T_129 @[BitSum.scala 11:24]
    _T_141[13] <= _T_132 @[BitSum.scala 11:24]
    _T_141[14] <= _T_135 @[BitSum.scala 11:24]
    _T_141[15] <= _T_138 @[BitSum.scala 11:24]
    reg _T_163 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_166 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_169 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_172 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_175 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_178 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_181 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_184 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_187 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_190 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_193 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_196 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_199 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_202 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_205 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_208 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_211 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_211 is invalid @[BitSum.scala 11:24]
    _T_211[0] <= _T_163 @[BitSum.scala 11:24]
    _T_211[1] <= _T_166 @[BitSum.scala 11:24]
    _T_211[2] <= _T_169 @[BitSum.scala 11:24]
    _T_211[3] <= _T_172 @[BitSum.scala 11:24]
    _T_211[4] <= _T_175 @[BitSum.scala 11:24]
    _T_211[5] <= _T_178 @[BitSum.scala 11:24]
    _T_211[6] <= _T_181 @[BitSum.scala 11:24]
    _T_211[7] <= _T_184 @[BitSum.scala 11:24]
    _T_211[8] <= _T_187 @[BitSum.scala 11:24]
    _T_211[9] <= _T_190 @[BitSum.scala 11:24]
    _T_211[10] <= _T_193 @[BitSum.scala 11:24]
    _T_211[11] <= _T_196 @[BitSum.scala 11:24]
    _T_211[12] <= _T_199 @[BitSum.scala 11:24]
    _T_211[13] <= _T_202 @[BitSum.scala 11:24]
    _T_211[14] <= _T_205 @[BitSum.scala 11:24]
    _T_211[15] <= _T_208 @[BitSum.scala 11:24]
    reg _T_233 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_236 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_239 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_242 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_245 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_248 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_251 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_254 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_257 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_260 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_263 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_266 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_269 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_272 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_275 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_278 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_281 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_281 is invalid @[BitSum.scala 11:24]
    _T_281[0] <= _T_233 @[BitSum.scala 11:24]
    _T_281[1] <= _T_236 @[BitSum.scala 11:24]
    _T_281[2] <= _T_239 @[BitSum.scala 11:24]
    _T_281[3] <= _T_242 @[BitSum.scala 11:24]
    _T_281[4] <= _T_245 @[BitSum.scala 11:24]
    _T_281[5] <= _T_248 @[BitSum.scala 11:24]
    _T_281[6] <= _T_251 @[BitSum.scala 11:24]
    _T_281[7] <= _T_254 @[BitSum.scala 11:24]
    _T_281[8] <= _T_257 @[BitSum.scala 11:24]
    _T_281[9] <= _T_260 @[BitSum.scala 11:24]
    _T_281[10] <= _T_263 @[BitSum.scala 11:24]
    _T_281[11] <= _T_266 @[BitSum.scala 11:24]
    _T_281[12] <= _T_269 @[BitSum.scala 11:24]
    _T_281[13] <= _T_272 @[BitSum.scala 11:24]
    _T_281[14] <= _T_275 @[BitSum.scala 11:24]
    _T_281[15] <= _T_278 @[BitSum.scala 11:24]
    reg _T_303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_312 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_315 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_318 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_321 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_324 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_327 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_330 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_333 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_336 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_339 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_342 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_345 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_348 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_351 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_351 is invalid @[BitSum.scala 11:24]
    _T_351[0] <= _T_303 @[BitSum.scala 11:24]
    _T_351[1] <= _T_306 @[BitSum.scala 11:24]
    _T_351[2] <= _T_309 @[BitSum.scala 11:24]
    _T_351[3] <= _T_312 @[BitSum.scala 11:24]
    _T_351[4] <= _T_315 @[BitSum.scala 11:24]
    _T_351[5] <= _T_318 @[BitSum.scala 11:24]
    _T_351[6] <= _T_321 @[BitSum.scala 11:24]
    _T_351[7] <= _T_324 @[BitSum.scala 11:24]
    _T_351[8] <= _T_327 @[BitSum.scala 11:24]
    _T_351[9] <= _T_330 @[BitSum.scala 11:24]
    _T_351[10] <= _T_333 @[BitSum.scala 11:24]
    _T_351[11] <= _T_336 @[BitSum.scala 11:24]
    _T_351[12] <= _T_339 @[BitSum.scala 11:24]
    _T_351[13] <= _T_342 @[BitSum.scala 11:24]
    _T_351[14] <= _T_345 @[BitSum.scala 11:24]
    _T_351[15] <= _T_348 @[BitSum.scala 11:24]
    reg _T_373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_382 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_385 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_388 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_391 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_394 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_397 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_400 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_403 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_406 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_409 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_412 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_415 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_418 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_421 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_421 is invalid @[BitSum.scala 11:24]
    _T_421[0] <= _T_373 @[BitSum.scala 11:24]
    _T_421[1] <= _T_376 @[BitSum.scala 11:24]
    _T_421[2] <= _T_379 @[BitSum.scala 11:24]
    _T_421[3] <= _T_382 @[BitSum.scala 11:24]
    _T_421[4] <= _T_385 @[BitSum.scala 11:24]
    _T_421[5] <= _T_388 @[BitSum.scala 11:24]
    _T_421[6] <= _T_391 @[BitSum.scala 11:24]
    _T_421[7] <= _T_394 @[BitSum.scala 11:24]
    _T_421[8] <= _T_397 @[BitSum.scala 11:24]
    _T_421[9] <= _T_400 @[BitSum.scala 11:24]
    _T_421[10] <= _T_403 @[BitSum.scala 11:24]
    _T_421[11] <= _T_406 @[BitSum.scala 11:24]
    _T_421[12] <= _T_409 @[BitSum.scala 11:24]
    _T_421[13] <= _T_412 @[BitSum.scala 11:24]
    _T_421[14] <= _T_415 @[BitSum.scala 11:24]
    _T_421[15] <= _T_418 @[BitSum.scala 11:24]
    reg _T_443 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_446 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_449 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_452 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_455 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_458 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_461 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_464 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_467 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_470 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_473 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_476 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_479 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_482 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_485 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_488 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_491 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_491 is invalid @[BitSum.scala 11:24]
    _T_491[0] <= _T_443 @[BitSum.scala 11:24]
    _T_491[1] <= _T_446 @[BitSum.scala 11:24]
    _T_491[2] <= _T_449 @[BitSum.scala 11:24]
    _T_491[3] <= _T_452 @[BitSum.scala 11:24]
    _T_491[4] <= _T_455 @[BitSum.scala 11:24]
    _T_491[5] <= _T_458 @[BitSum.scala 11:24]
    _T_491[6] <= _T_461 @[BitSum.scala 11:24]
    _T_491[7] <= _T_464 @[BitSum.scala 11:24]
    _T_491[8] <= _T_467 @[BitSum.scala 11:24]
    _T_491[9] <= _T_470 @[BitSum.scala 11:24]
    _T_491[10] <= _T_473 @[BitSum.scala 11:24]
    _T_491[11] <= _T_476 @[BitSum.scala 11:24]
    _T_491[12] <= _T_479 @[BitSum.scala 11:24]
    _T_491[13] <= _T_482 @[BitSum.scala 11:24]
    _T_491[14] <= _T_485 @[BitSum.scala 11:24]
    _T_491[15] <= _T_488 @[BitSum.scala 11:24]
    reg _T_513 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_516 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_519 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_522 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_525 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_528 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_531 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_534 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_537 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_540 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_543 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_546 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_549 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_552 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_555 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_558 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_561 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_561 is invalid @[BitSum.scala 11:24]
    _T_561[0] <= _T_513 @[BitSum.scala 11:24]
    _T_561[1] <= _T_516 @[BitSum.scala 11:24]
    _T_561[2] <= _T_519 @[BitSum.scala 11:24]
    _T_561[3] <= _T_522 @[BitSum.scala 11:24]
    _T_561[4] <= _T_525 @[BitSum.scala 11:24]
    _T_561[5] <= _T_528 @[BitSum.scala 11:24]
    _T_561[6] <= _T_531 @[BitSum.scala 11:24]
    _T_561[7] <= _T_534 @[BitSum.scala 11:24]
    _T_561[8] <= _T_537 @[BitSum.scala 11:24]
    _T_561[9] <= _T_540 @[BitSum.scala 11:24]
    _T_561[10] <= _T_543 @[BitSum.scala 11:24]
    _T_561[11] <= _T_546 @[BitSum.scala 11:24]
    _T_561[12] <= _T_549 @[BitSum.scala 11:24]
    _T_561[13] <= _T_552 @[BitSum.scala 11:24]
    _T_561[14] <= _T_555 @[BitSum.scala 11:24]
    _T_561[15] <= _T_558 @[BitSum.scala 11:24]
    reg _T_583 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_586 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_589 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_592 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_595 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_598 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_601 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_604 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_607 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_610 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_613 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_616 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_619 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_622 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_625 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_628 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_631 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_631 is invalid @[BitSum.scala 11:24]
    _T_631[0] <= _T_583 @[BitSum.scala 11:24]
    _T_631[1] <= _T_586 @[BitSum.scala 11:24]
    _T_631[2] <= _T_589 @[BitSum.scala 11:24]
    _T_631[3] <= _T_592 @[BitSum.scala 11:24]
    _T_631[4] <= _T_595 @[BitSum.scala 11:24]
    _T_631[5] <= _T_598 @[BitSum.scala 11:24]
    _T_631[6] <= _T_601 @[BitSum.scala 11:24]
    _T_631[7] <= _T_604 @[BitSum.scala 11:24]
    _T_631[8] <= _T_607 @[BitSum.scala 11:24]
    _T_631[9] <= _T_610 @[BitSum.scala 11:24]
    _T_631[10] <= _T_613 @[BitSum.scala 11:24]
    _T_631[11] <= _T_616 @[BitSum.scala 11:24]
    _T_631[12] <= _T_619 @[BitSum.scala 11:24]
    _T_631[13] <= _T_622 @[BitSum.scala 11:24]
    _T_631[14] <= _T_625 @[BitSum.scala 11:24]
    _T_631[15] <= _T_628 @[BitSum.scala 11:24]
    node _T_651 = add(_T_141[_T_83], _T_211[_T_84]) @[BitSum.scala 18:14]
    node _T_652 = tail(_T_651, 1) @[BitSum.scala 18:14]
    node _T_653 = asSInt(_T_652) @[BitSum.scala 18:14]
    node _T_654 = add(_T_281[_T_85], _T_351[_T_86]) @[BitSum.scala 18:14]
    node _T_655 = tail(_T_654, 1) @[BitSum.scala 18:14]
    node _T_656 = asSInt(_T_655) @[BitSum.scala 18:14]
    node _T_657 = add(_T_421[_T_87], _T_491[_T_88]) @[BitSum.scala 18:14]
    node _T_658 = tail(_T_657, 1) @[BitSum.scala 18:14]
    node _T_659 = asSInt(_T_658) @[BitSum.scala 18:14]
    node _T_660 = add(_T_561[_T_89], _T_631[_T_90]) @[BitSum.scala 18:14]
    node _T_661 = tail(_T_660, 1) @[BitSum.scala 18:14]
    node _T_662 = asSInt(_T_661) @[BitSum.scala 18:14]
    node _T_663 = add(_T_653, _T_656) @[BitSum.scala 18:14]
    node _T_664 = tail(_T_663, 1) @[BitSum.scala 18:14]
    node _T_665 = asSInt(_T_664) @[BitSum.scala 18:14]
    node _T_666 = add(_T_659, _T_662) @[BitSum.scala 18:14]
    node _T_667 = tail(_T_666, 1) @[BitSum.scala 18:14]
    node _T_668 = asSInt(_T_667) @[BitSum.scala 18:14]
    node _T_669 = add(_T_665, _T_668) @[BitSum.scala 18:14]
    node _T_670 = tail(_T_669, 1) @[BitSum.scala 18:14]
    node _T_671 = asSInt(_T_670) @[BitSum.scala 18:14]
    Accumulator.io.in <= _T_671 @[XNORNetInference.scala 106:15]
    Accumulator.io.sel <= io.accSel @[XNORNetInference.scala 110:16]
    Accumulator.io.reset <= io.accReset @[XNORNetInference.scala 111:18]
    Accumulator.io.en <= io.accEn @[XNORNetInference.scala 112:14]
    inst MulAdd of MulAdd @[XNORNetInference.scala 115:24]
    MulAdd.io is invalid
    MulAdd.clock <= clock
    MulAdd.reset <= reset
    node _T_673 = bits(mem.io.out, 127, 96) @[XNORNetInference.scala 126:15]
    node _T_674 = mux(io.memSel, UInt<32>("h00"), _T_673) @[XNORNetInference.scala 123:23]
    node _T_675 = bits(_T_674, 31, 16) @[XNORNetInference.scala 128:28]
    node _T_676 = asSInt(_T_675) @[XNORNetInference.scala 128:101]
    MulAdd.io.a <= _T_676 @[XNORNetInference.scala 128:19]
    node _T_677 = bits(_T_674, 15, 0) @[XNORNetInference.scala 129:28]
    node _T_678 = asSInt(_T_677) @[XNORNetInference.scala 129:71]
    MulAdd.io.c <= _T_678 @[XNORNetInference.scala 129:19]
    MulAdd.io.m <= mean.io.output @[XNORNetInference.scala 142:16]
    MulAdd.io.b <= Accumulator.io.out @[XNORNetInference.scala 143:16]
    meanBuffer.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 144:24]
    maxModule.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 145:23]
    node signs_0 = bits(MulAdd.io.r, 31, 31) @[XNORNetInference.scala 146:16]
    inst Accumulator_1 of Accumulator_1 @[XNORNetInference.scala 103:21]
    Accumulator_1.io is invalid
    Accumulator_1.clock <= clock
    Accumulator_1.reset <= reset
    node _T_679 = bits(xnor.io.out[1], 3, 0) @[BitSum.scala 31:51]
    node _T_680 = bits(xnor.io.out[1], 7, 4) @[BitSum.scala 31:51]
    node _T_681 = bits(xnor.io.out[1], 11, 8) @[BitSum.scala 31:51]
    node _T_682 = bits(xnor.io.out[1], 15, 12) @[BitSum.scala 31:51]
    node _T_683 = bits(xnor.io.out[1], 19, 16) @[BitSum.scala 31:51]
    node _T_684 = bits(xnor.io.out[1], 23, 20) @[BitSum.scala 31:51]
    node _T_685 = bits(xnor.io.out[1], 27, 24) @[BitSum.scala 31:51]
    node _T_686 = bits(xnor.io.out[1], 31, 28) @[BitSum.scala 31:51]
    reg _T_689 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_692 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_695 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_698 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_701 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_704 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_707 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_710 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_713 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_716 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_719 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_722 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_725 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_728 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_731 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_734 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_737 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_737 is invalid @[BitSum.scala 11:24]
    _T_737[0] <= _T_689 @[BitSum.scala 11:24]
    _T_737[1] <= _T_692 @[BitSum.scala 11:24]
    _T_737[2] <= _T_695 @[BitSum.scala 11:24]
    _T_737[3] <= _T_698 @[BitSum.scala 11:24]
    _T_737[4] <= _T_701 @[BitSum.scala 11:24]
    _T_737[5] <= _T_704 @[BitSum.scala 11:24]
    _T_737[6] <= _T_707 @[BitSum.scala 11:24]
    _T_737[7] <= _T_710 @[BitSum.scala 11:24]
    _T_737[8] <= _T_713 @[BitSum.scala 11:24]
    _T_737[9] <= _T_716 @[BitSum.scala 11:24]
    _T_737[10] <= _T_719 @[BitSum.scala 11:24]
    _T_737[11] <= _T_722 @[BitSum.scala 11:24]
    _T_737[12] <= _T_725 @[BitSum.scala 11:24]
    _T_737[13] <= _T_728 @[BitSum.scala 11:24]
    _T_737[14] <= _T_731 @[BitSum.scala 11:24]
    _T_737[15] <= _T_734 @[BitSum.scala 11:24]
    reg _T_759 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_762 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_765 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_768 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_771 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_774 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_777 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_780 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_783 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_786 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_789 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_792 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_795 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_798 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_801 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_804 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_807 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_807 is invalid @[BitSum.scala 11:24]
    _T_807[0] <= _T_759 @[BitSum.scala 11:24]
    _T_807[1] <= _T_762 @[BitSum.scala 11:24]
    _T_807[2] <= _T_765 @[BitSum.scala 11:24]
    _T_807[3] <= _T_768 @[BitSum.scala 11:24]
    _T_807[4] <= _T_771 @[BitSum.scala 11:24]
    _T_807[5] <= _T_774 @[BitSum.scala 11:24]
    _T_807[6] <= _T_777 @[BitSum.scala 11:24]
    _T_807[7] <= _T_780 @[BitSum.scala 11:24]
    _T_807[8] <= _T_783 @[BitSum.scala 11:24]
    _T_807[9] <= _T_786 @[BitSum.scala 11:24]
    _T_807[10] <= _T_789 @[BitSum.scala 11:24]
    _T_807[11] <= _T_792 @[BitSum.scala 11:24]
    _T_807[12] <= _T_795 @[BitSum.scala 11:24]
    _T_807[13] <= _T_798 @[BitSum.scala 11:24]
    _T_807[14] <= _T_801 @[BitSum.scala 11:24]
    _T_807[15] <= _T_804 @[BitSum.scala 11:24]
    reg _T_829 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_832 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_835 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_838 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_841 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_844 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_847 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_850 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_853 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_856 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_859 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_862 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_865 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_868 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_871 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_874 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_877 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_877 is invalid @[BitSum.scala 11:24]
    _T_877[0] <= _T_829 @[BitSum.scala 11:24]
    _T_877[1] <= _T_832 @[BitSum.scala 11:24]
    _T_877[2] <= _T_835 @[BitSum.scala 11:24]
    _T_877[3] <= _T_838 @[BitSum.scala 11:24]
    _T_877[4] <= _T_841 @[BitSum.scala 11:24]
    _T_877[5] <= _T_844 @[BitSum.scala 11:24]
    _T_877[6] <= _T_847 @[BitSum.scala 11:24]
    _T_877[7] <= _T_850 @[BitSum.scala 11:24]
    _T_877[8] <= _T_853 @[BitSum.scala 11:24]
    _T_877[9] <= _T_856 @[BitSum.scala 11:24]
    _T_877[10] <= _T_859 @[BitSum.scala 11:24]
    _T_877[11] <= _T_862 @[BitSum.scala 11:24]
    _T_877[12] <= _T_865 @[BitSum.scala 11:24]
    _T_877[13] <= _T_868 @[BitSum.scala 11:24]
    _T_877[14] <= _T_871 @[BitSum.scala 11:24]
    _T_877[15] <= _T_874 @[BitSum.scala 11:24]
    reg _T_899 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_902 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_905 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_908 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_911 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_914 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_917 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_920 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_923 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_926 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_929 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_932 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_935 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_938 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_941 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_944 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_947 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_947 is invalid @[BitSum.scala 11:24]
    _T_947[0] <= _T_899 @[BitSum.scala 11:24]
    _T_947[1] <= _T_902 @[BitSum.scala 11:24]
    _T_947[2] <= _T_905 @[BitSum.scala 11:24]
    _T_947[3] <= _T_908 @[BitSum.scala 11:24]
    _T_947[4] <= _T_911 @[BitSum.scala 11:24]
    _T_947[5] <= _T_914 @[BitSum.scala 11:24]
    _T_947[6] <= _T_917 @[BitSum.scala 11:24]
    _T_947[7] <= _T_920 @[BitSum.scala 11:24]
    _T_947[8] <= _T_923 @[BitSum.scala 11:24]
    _T_947[9] <= _T_926 @[BitSum.scala 11:24]
    _T_947[10] <= _T_929 @[BitSum.scala 11:24]
    _T_947[11] <= _T_932 @[BitSum.scala 11:24]
    _T_947[12] <= _T_935 @[BitSum.scala 11:24]
    _T_947[13] <= _T_938 @[BitSum.scala 11:24]
    _T_947[14] <= _T_941 @[BitSum.scala 11:24]
    _T_947[15] <= _T_944 @[BitSum.scala 11:24]
    reg _T_969 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_972 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_975 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_978 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_981 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_984 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_987 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_990 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_993 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_996 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_999 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1002 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1005 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1008 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1011 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1014 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1017 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1017 is invalid @[BitSum.scala 11:24]
    _T_1017[0] <= _T_969 @[BitSum.scala 11:24]
    _T_1017[1] <= _T_972 @[BitSum.scala 11:24]
    _T_1017[2] <= _T_975 @[BitSum.scala 11:24]
    _T_1017[3] <= _T_978 @[BitSum.scala 11:24]
    _T_1017[4] <= _T_981 @[BitSum.scala 11:24]
    _T_1017[5] <= _T_984 @[BitSum.scala 11:24]
    _T_1017[6] <= _T_987 @[BitSum.scala 11:24]
    _T_1017[7] <= _T_990 @[BitSum.scala 11:24]
    _T_1017[8] <= _T_993 @[BitSum.scala 11:24]
    _T_1017[9] <= _T_996 @[BitSum.scala 11:24]
    _T_1017[10] <= _T_999 @[BitSum.scala 11:24]
    _T_1017[11] <= _T_1002 @[BitSum.scala 11:24]
    _T_1017[12] <= _T_1005 @[BitSum.scala 11:24]
    _T_1017[13] <= _T_1008 @[BitSum.scala 11:24]
    _T_1017[14] <= _T_1011 @[BitSum.scala 11:24]
    _T_1017[15] <= _T_1014 @[BitSum.scala 11:24]
    reg _T_1039 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1042 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1045 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1048 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1051 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1054 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1057 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1060 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1063 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1066 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1069 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1072 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1075 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1078 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1081 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1084 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1087 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1087 is invalid @[BitSum.scala 11:24]
    _T_1087[0] <= _T_1039 @[BitSum.scala 11:24]
    _T_1087[1] <= _T_1042 @[BitSum.scala 11:24]
    _T_1087[2] <= _T_1045 @[BitSum.scala 11:24]
    _T_1087[3] <= _T_1048 @[BitSum.scala 11:24]
    _T_1087[4] <= _T_1051 @[BitSum.scala 11:24]
    _T_1087[5] <= _T_1054 @[BitSum.scala 11:24]
    _T_1087[6] <= _T_1057 @[BitSum.scala 11:24]
    _T_1087[7] <= _T_1060 @[BitSum.scala 11:24]
    _T_1087[8] <= _T_1063 @[BitSum.scala 11:24]
    _T_1087[9] <= _T_1066 @[BitSum.scala 11:24]
    _T_1087[10] <= _T_1069 @[BitSum.scala 11:24]
    _T_1087[11] <= _T_1072 @[BitSum.scala 11:24]
    _T_1087[12] <= _T_1075 @[BitSum.scala 11:24]
    _T_1087[13] <= _T_1078 @[BitSum.scala 11:24]
    _T_1087[14] <= _T_1081 @[BitSum.scala 11:24]
    _T_1087[15] <= _T_1084 @[BitSum.scala 11:24]
    reg _T_1109 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1112 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1115 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1118 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1121 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1124 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1127 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1130 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1133 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1136 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1139 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1142 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1145 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1148 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1151 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1154 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1157 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1157 is invalid @[BitSum.scala 11:24]
    _T_1157[0] <= _T_1109 @[BitSum.scala 11:24]
    _T_1157[1] <= _T_1112 @[BitSum.scala 11:24]
    _T_1157[2] <= _T_1115 @[BitSum.scala 11:24]
    _T_1157[3] <= _T_1118 @[BitSum.scala 11:24]
    _T_1157[4] <= _T_1121 @[BitSum.scala 11:24]
    _T_1157[5] <= _T_1124 @[BitSum.scala 11:24]
    _T_1157[6] <= _T_1127 @[BitSum.scala 11:24]
    _T_1157[7] <= _T_1130 @[BitSum.scala 11:24]
    _T_1157[8] <= _T_1133 @[BitSum.scala 11:24]
    _T_1157[9] <= _T_1136 @[BitSum.scala 11:24]
    _T_1157[10] <= _T_1139 @[BitSum.scala 11:24]
    _T_1157[11] <= _T_1142 @[BitSum.scala 11:24]
    _T_1157[12] <= _T_1145 @[BitSum.scala 11:24]
    _T_1157[13] <= _T_1148 @[BitSum.scala 11:24]
    _T_1157[14] <= _T_1151 @[BitSum.scala 11:24]
    _T_1157[15] <= _T_1154 @[BitSum.scala 11:24]
    reg _T_1179 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1182 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1185 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1188 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1191 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1194 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1197 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1200 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1203 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1206 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1209 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1212 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1215 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1218 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1221 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1224 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1227 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1227 is invalid @[BitSum.scala 11:24]
    _T_1227[0] <= _T_1179 @[BitSum.scala 11:24]
    _T_1227[1] <= _T_1182 @[BitSum.scala 11:24]
    _T_1227[2] <= _T_1185 @[BitSum.scala 11:24]
    _T_1227[3] <= _T_1188 @[BitSum.scala 11:24]
    _T_1227[4] <= _T_1191 @[BitSum.scala 11:24]
    _T_1227[5] <= _T_1194 @[BitSum.scala 11:24]
    _T_1227[6] <= _T_1197 @[BitSum.scala 11:24]
    _T_1227[7] <= _T_1200 @[BitSum.scala 11:24]
    _T_1227[8] <= _T_1203 @[BitSum.scala 11:24]
    _T_1227[9] <= _T_1206 @[BitSum.scala 11:24]
    _T_1227[10] <= _T_1209 @[BitSum.scala 11:24]
    _T_1227[11] <= _T_1212 @[BitSum.scala 11:24]
    _T_1227[12] <= _T_1215 @[BitSum.scala 11:24]
    _T_1227[13] <= _T_1218 @[BitSum.scala 11:24]
    _T_1227[14] <= _T_1221 @[BitSum.scala 11:24]
    _T_1227[15] <= _T_1224 @[BitSum.scala 11:24]
    node _T_1247 = add(_T_737[_T_679], _T_807[_T_680]) @[BitSum.scala 18:14]
    node _T_1248 = tail(_T_1247, 1) @[BitSum.scala 18:14]
    node _T_1249 = asSInt(_T_1248) @[BitSum.scala 18:14]
    node _T_1250 = add(_T_877[_T_681], _T_947[_T_682]) @[BitSum.scala 18:14]
    node _T_1251 = tail(_T_1250, 1) @[BitSum.scala 18:14]
    node _T_1252 = asSInt(_T_1251) @[BitSum.scala 18:14]
    node _T_1253 = add(_T_1017[_T_683], _T_1087[_T_684]) @[BitSum.scala 18:14]
    node _T_1254 = tail(_T_1253, 1) @[BitSum.scala 18:14]
    node _T_1255 = asSInt(_T_1254) @[BitSum.scala 18:14]
    node _T_1256 = add(_T_1157[_T_685], _T_1227[_T_686]) @[BitSum.scala 18:14]
    node _T_1257 = tail(_T_1256, 1) @[BitSum.scala 18:14]
    node _T_1258 = asSInt(_T_1257) @[BitSum.scala 18:14]
    node _T_1259 = add(_T_1249, _T_1252) @[BitSum.scala 18:14]
    node _T_1260 = tail(_T_1259, 1) @[BitSum.scala 18:14]
    node _T_1261 = asSInt(_T_1260) @[BitSum.scala 18:14]
    node _T_1262 = add(_T_1255, _T_1258) @[BitSum.scala 18:14]
    node _T_1263 = tail(_T_1262, 1) @[BitSum.scala 18:14]
    node _T_1264 = asSInt(_T_1263) @[BitSum.scala 18:14]
    node _T_1265 = add(_T_1261, _T_1264) @[BitSum.scala 18:14]
    node _T_1266 = tail(_T_1265, 1) @[BitSum.scala 18:14]
    node _T_1267 = asSInt(_T_1266) @[BitSum.scala 18:14]
    Accumulator_1.io.in <= _T_1267 @[XNORNetInference.scala 106:15]
    Accumulator_1.io.sel <= io.accSel @[XNORNetInference.scala 110:16]
    Accumulator_1.io.reset <= io.accReset @[XNORNetInference.scala 111:18]
    Accumulator_1.io.en <= io.accEn @[XNORNetInference.scala 112:14]
    inst MulAdd_1 of MulAdd_1 @[XNORNetInference.scala 115:24]
    MulAdd_1.io is invalid
    MulAdd_1.clock <= clock
    MulAdd_1.reset <= reset
    node _T_1269 = bits(mem.io.out, 95, 64) @[XNORNetInference.scala 126:15]
    node _T_1270 = mux(io.memSel, UInt<32>("h00"), _T_1269) @[XNORNetInference.scala 123:23]
    node _T_1271 = bits(_T_1270, 31, 16) @[XNORNetInference.scala 128:28]
    node _T_1272 = asSInt(_T_1271) @[XNORNetInference.scala 128:101]
    MulAdd_1.io.a <= _T_1272 @[XNORNetInference.scala 128:19]
    node _T_1273 = bits(_T_1270, 15, 0) @[XNORNetInference.scala 129:28]
    node _T_1274 = asSInt(_T_1273) @[XNORNetInference.scala 129:71]
    MulAdd_1.io.c <= _T_1274 @[XNORNetInference.scala 129:19]
    MulAdd_1.io.m <= mean.io.output @[XNORNetInference.scala 142:16]
    MulAdd_1.io.b <= Accumulator_1.io.out @[XNORNetInference.scala 143:16]
    meanBuffer.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 144:24]
    maxModule.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 145:23]
    node signs_1 = bits(MulAdd_1.io.r, 31, 31) @[XNORNetInference.scala 146:16]
    inst Accumulator_2 of Accumulator_2 @[XNORNetInference.scala 103:21]
    Accumulator_2.io is invalid
    Accumulator_2.clock <= clock
    Accumulator_2.reset <= reset
    node _T_1275 = bits(xnor.io.out[2], 3, 0) @[BitSum.scala 31:51]
    node _T_1276 = bits(xnor.io.out[2], 7, 4) @[BitSum.scala 31:51]
    node _T_1277 = bits(xnor.io.out[2], 11, 8) @[BitSum.scala 31:51]
    node _T_1278 = bits(xnor.io.out[2], 15, 12) @[BitSum.scala 31:51]
    node _T_1279 = bits(xnor.io.out[2], 19, 16) @[BitSum.scala 31:51]
    node _T_1280 = bits(xnor.io.out[2], 23, 20) @[BitSum.scala 31:51]
    node _T_1281 = bits(xnor.io.out[2], 27, 24) @[BitSum.scala 31:51]
    node _T_1282 = bits(xnor.io.out[2], 31, 28) @[BitSum.scala 31:51]
    reg _T_1285 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1288 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1291 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1294 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1297 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1300 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1312 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1315 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1318 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1321 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1324 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1327 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1330 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1333 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1333 is invalid @[BitSum.scala 11:24]
    _T_1333[0] <= _T_1285 @[BitSum.scala 11:24]
    _T_1333[1] <= _T_1288 @[BitSum.scala 11:24]
    _T_1333[2] <= _T_1291 @[BitSum.scala 11:24]
    _T_1333[3] <= _T_1294 @[BitSum.scala 11:24]
    _T_1333[4] <= _T_1297 @[BitSum.scala 11:24]
    _T_1333[5] <= _T_1300 @[BitSum.scala 11:24]
    _T_1333[6] <= _T_1303 @[BitSum.scala 11:24]
    _T_1333[7] <= _T_1306 @[BitSum.scala 11:24]
    _T_1333[8] <= _T_1309 @[BitSum.scala 11:24]
    _T_1333[9] <= _T_1312 @[BitSum.scala 11:24]
    _T_1333[10] <= _T_1315 @[BitSum.scala 11:24]
    _T_1333[11] <= _T_1318 @[BitSum.scala 11:24]
    _T_1333[12] <= _T_1321 @[BitSum.scala 11:24]
    _T_1333[13] <= _T_1324 @[BitSum.scala 11:24]
    _T_1333[14] <= _T_1327 @[BitSum.scala 11:24]
    _T_1333[15] <= _T_1330 @[BitSum.scala 11:24]
    reg _T_1355 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1358 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1361 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1364 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1367 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1370 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1382 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1385 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1388 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1391 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1394 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1397 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1400 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1403 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1403 is invalid @[BitSum.scala 11:24]
    _T_1403[0] <= _T_1355 @[BitSum.scala 11:24]
    _T_1403[1] <= _T_1358 @[BitSum.scala 11:24]
    _T_1403[2] <= _T_1361 @[BitSum.scala 11:24]
    _T_1403[3] <= _T_1364 @[BitSum.scala 11:24]
    _T_1403[4] <= _T_1367 @[BitSum.scala 11:24]
    _T_1403[5] <= _T_1370 @[BitSum.scala 11:24]
    _T_1403[6] <= _T_1373 @[BitSum.scala 11:24]
    _T_1403[7] <= _T_1376 @[BitSum.scala 11:24]
    _T_1403[8] <= _T_1379 @[BitSum.scala 11:24]
    _T_1403[9] <= _T_1382 @[BitSum.scala 11:24]
    _T_1403[10] <= _T_1385 @[BitSum.scala 11:24]
    _T_1403[11] <= _T_1388 @[BitSum.scala 11:24]
    _T_1403[12] <= _T_1391 @[BitSum.scala 11:24]
    _T_1403[13] <= _T_1394 @[BitSum.scala 11:24]
    _T_1403[14] <= _T_1397 @[BitSum.scala 11:24]
    _T_1403[15] <= _T_1400 @[BitSum.scala 11:24]
    reg _T_1425 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1428 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1431 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1434 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1437 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1440 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1443 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1446 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1449 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1452 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1455 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1458 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1461 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1464 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1467 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1470 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1473 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1473 is invalid @[BitSum.scala 11:24]
    _T_1473[0] <= _T_1425 @[BitSum.scala 11:24]
    _T_1473[1] <= _T_1428 @[BitSum.scala 11:24]
    _T_1473[2] <= _T_1431 @[BitSum.scala 11:24]
    _T_1473[3] <= _T_1434 @[BitSum.scala 11:24]
    _T_1473[4] <= _T_1437 @[BitSum.scala 11:24]
    _T_1473[5] <= _T_1440 @[BitSum.scala 11:24]
    _T_1473[6] <= _T_1443 @[BitSum.scala 11:24]
    _T_1473[7] <= _T_1446 @[BitSum.scala 11:24]
    _T_1473[8] <= _T_1449 @[BitSum.scala 11:24]
    _T_1473[9] <= _T_1452 @[BitSum.scala 11:24]
    _T_1473[10] <= _T_1455 @[BitSum.scala 11:24]
    _T_1473[11] <= _T_1458 @[BitSum.scala 11:24]
    _T_1473[12] <= _T_1461 @[BitSum.scala 11:24]
    _T_1473[13] <= _T_1464 @[BitSum.scala 11:24]
    _T_1473[14] <= _T_1467 @[BitSum.scala 11:24]
    _T_1473[15] <= _T_1470 @[BitSum.scala 11:24]
    reg _T_1495 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1498 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1501 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1504 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1507 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1510 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1513 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1516 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1519 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1522 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1525 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1528 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1531 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1534 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1537 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1540 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1543 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1543 is invalid @[BitSum.scala 11:24]
    _T_1543[0] <= _T_1495 @[BitSum.scala 11:24]
    _T_1543[1] <= _T_1498 @[BitSum.scala 11:24]
    _T_1543[2] <= _T_1501 @[BitSum.scala 11:24]
    _T_1543[3] <= _T_1504 @[BitSum.scala 11:24]
    _T_1543[4] <= _T_1507 @[BitSum.scala 11:24]
    _T_1543[5] <= _T_1510 @[BitSum.scala 11:24]
    _T_1543[6] <= _T_1513 @[BitSum.scala 11:24]
    _T_1543[7] <= _T_1516 @[BitSum.scala 11:24]
    _T_1543[8] <= _T_1519 @[BitSum.scala 11:24]
    _T_1543[9] <= _T_1522 @[BitSum.scala 11:24]
    _T_1543[10] <= _T_1525 @[BitSum.scala 11:24]
    _T_1543[11] <= _T_1528 @[BitSum.scala 11:24]
    _T_1543[12] <= _T_1531 @[BitSum.scala 11:24]
    _T_1543[13] <= _T_1534 @[BitSum.scala 11:24]
    _T_1543[14] <= _T_1537 @[BitSum.scala 11:24]
    _T_1543[15] <= _T_1540 @[BitSum.scala 11:24]
    reg _T_1565 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1568 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1571 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1574 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1577 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1580 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1583 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1586 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1589 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1592 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1595 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1598 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1601 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1604 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1607 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1610 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1613 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1613 is invalid @[BitSum.scala 11:24]
    _T_1613[0] <= _T_1565 @[BitSum.scala 11:24]
    _T_1613[1] <= _T_1568 @[BitSum.scala 11:24]
    _T_1613[2] <= _T_1571 @[BitSum.scala 11:24]
    _T_1613[3] <= _T_1574 @[BitSum.scala 11:24]
    _T_1613[4] <= _T_1577 @[BitSum.scala 11:24]
    _T_1613[5] <= _T_1580 @[BitSum.scala 11:24]
    _T_1613[6] <= _T_1583 @[BitSum.scala 11:24]
    _T_1613[7] <= _T_1586 @[BitSum.scala 11:24]
    _T_1613[8] <= _T_1589 @[BitSum.scala 11:24]
    _T_1613[9] <= _T_1592 @[BitSum.scala 11:24]
    _T_1613[10] <= _T_1595 @[BitSum.scala 11:24]
    _T_1613[11] <= _T_1598 @[BitSum.scala 11:24]
    _T_1613[12] <= _T_1601 @[BitSum.scala 11:24]
    _T_1613[13] <= _T_1604 @[BitSum.scala 11:24]
    _T_1613[14] <= _T_1607 @[BitSum.scala 11:24]
    _T_1613[15] <= _T_1610 @[BitSum.scala 11:24]
    reg _T_1635 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1638 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1641 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1644 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1647 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1650 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1653 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1656 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1659 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1662 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1665 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1668 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1671 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1674 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1677 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1680 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1683 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1683 is invalid @[BitSum.scala 11:24]
    _T_1683[0] <= _T_1635 @[BitSum.scala 11:24]
    _T_1683[1] <= _T_1638 @[BitSum.scala 11:24]
    _T_1683[2] <= _T_1641 @[BitSum.scala 11:24]
    _T_1683[3] <= _T_1644 @[BitSum.scala 11:24]
    _T_1683[4] <= _T_1647 @[BitSum.scala 11:24]
    _T_1683[5] <= _T_1650 @[BitSum.scala 11:24]
    _T_1683[6] <= _T_1653 @[BitSum.scala 11:24]
    _T_1683[7] <= _T_1656 @[BitSum.scala 11:24]
    _T_1683[8] <= _T_1659 @[BitSum.scala 11:24]
    _T_1683[9] <= _T_1662 @[BitSum.scala 11:24]
    _T_1683[10] <= _T_1665 @[BitSum.scala 11:24]
    _T_1683[11] <= _T_1668 @[BitSum.scala 11:24]
    _T_1683[12] <= _T_1671 @[BitSum.scala 11:24]
    _T_1683[13] <= _T_1674 @[BitSum.scala 11:24]
    _T_1683[14] <= _T_1677 @[BitSum.scala 11:24]
    _T_1683[15] <= _T_1680 @[BitSum.scala 11:24]
    reg _T_1705 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1708 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1711 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1714 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1717 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1720 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1723 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1726 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1729 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1732 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1735 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1738 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1741 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1744 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1747 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1750 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1753 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1753 is invalid @[BitSum.scala 11:24]
    _T_1753[0] <= _T_1705 @[BitSum.scala 11:24]
    _T_1753[1] <= _T_1708 @[BitSum.scala 11:24]
    _T_1753[2] <= _T_1711 @[BitSum.scala 11:24]
    _T_1753[3] <= _T_1714 @[BitSum.scala 11:24]
    _T_1753[4] <= _T_1717 @[BitSum.scala 11:24]
    _T_1753[5] <= _T_1720 @[BitSum.scala 11:24]
    _T_1753[6] <= _T_1723 @[BitSum.scala 11:24]
    _T_1753[7] <= _T_1726 @[BitSum.scala 11:24]
    _T_1753[8] <= _T_1729 @[BitSum.scala 11:24]
    _T_1753[9] <= _T_1732 @[BitSum.scala 11:24]
    _T_1753[10] <= _T_1735 @[BitSum.scala 11:24]
    _T_1753[11] <= _T_1738 @[BitSum.scala 11:24]
    _T_1753[12] <= _T_1741 @[BitSum.scala 11:24]
    _T_1753[13] <= _T_1744 @[BitSum.scala 11:24]
    _T_1753[14] <= _T_1747 @[BitSum.scala 11:24]
    _T_1753[15] <= _T_1750 @[BitSum.scala 11:24]
    reg _T_1775 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1778 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1781 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1784 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1787 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1790 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1793 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1796 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1799 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1802 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1805 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1808 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1811 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1814 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1817 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1820 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1823 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1823 is invalid @[BitSum.scala 11:24]
    _T_1823[0] <= _T_1775 @[BitSum.scala 11:24]
    _T_1823[1] <= _T_1778 @[BitSum.scala 11:24]
    _T_1823[2] <= _T_1781 @[BitSum.scala 11:24]
    _T_1823[3] <= _T_1784 @[BitSum.scala 11:24]
    _T_1823[4] <= _T_1787 @[BitSum.scala 11:24]
    _T_1823[5] <= _T_1790 @[BitSum.scala 11:24]
    _T_1823[6] <= _T_1793 @[BitSum.scala 11:24]
    _T_1823[7] <= _T_1796 @[BitSum.scala 11:24]
    _T_1823[8] <= _T_1799 @[BitSum.scala 11:24]
    _T_1823[9] <= _T_1802 @[BitSum.scala 11:24]
    _T_1823[10] <= _T_1805 @[BitSum.scala 11:24]
    _T_1823[11] <= _T_1808 @[BitSum.scala 11:24]
    _T_1823[12] <= _T_1811 @[BitSum.scala 11:24]
    _T_1823[13] <= _T_1814 @[BitSum.scala 11:24]
    _T_1823[14] <= _T_1817 @[BitSum.scala 11:24]
    _T_1823[15] <= _T_1820 @[BitSum.scala 11:24]
    node _T_1843 = add(_T_1333[_T_1275], _T_1403[_T_1276]) @[BitSum.scala 18:14]
    node _T_1844 = tail(_T_1843, 1) @[BitSum.scala 18:14]
    node _T_1845 = asSInt(_T_1844) @[BitSum.scala 18:14]
    node _T_1846 = add(_T_1473[_T_1277], _T_1543[_T_1278]) @[BitSum.scala 18:14]
    node _T_1847 = tail(_T_1846, 1) @[BitSum.scala 18:14]
    node _T_1848 = asSInt(_T_1847) @[BitSum.scala 18:14]
    node _T_1849 = add(_T_1613[_T_1279], _T_1683[_T_1280]) @[BitSum.scala 18:14]
    node _T_1850 = tail(_T_1849, 1) @[BitSum.scala 18:14]
    node _T_1851 = asSInt(_T_1850) @[BitSum.scala 18:14]
    node _T_1852 = add(_T_1753[_T_1281], _T_1823[_T_1282]) @[BitSum.scala 18:14]
    node _T_1853 = tail(_T_1852, 1) @[BitSum.scala 18:14]
    node _T_1854 = asSInt(_T_1853) @[BitSum.scala 18:14]
    node _T_1855 = add(_T_1845, _T_1848) @[BitSum.scala 18:14]
    node _T_1856 = tail(_T_1855, 1) @[BitSum.scala 18:14]
    node _T_1857 = asSInt(_T_1856) @[BitSum.scala 18:14]
    node _T_1858 = add(_T_1851, _T_1854) @[BitSum.scala 18:14]
    node _T_1859 = tail(_T_1858, 1) @[BitSum.scala 18:14]
    node _T_1860 = asSInt(_T_1859) @[BitSum.scala 18:14]
    node _T_1861 = add(_T_1857, _T_1860) @[BitSum.scala 18:14]
    node _T_1862 = tail(_T_1861, 1) @[BitSum.scala 18:14]
    node _T_1863 = asSInt(_T_1862) @[BitSum.scala 18:14]
    Accumulator_2.io.in <= _T_1863 @[XNORNetInference.scala 106:15]
    Accumulator_2.io.sel <= io.accSel @[XNORNetInference.scala 110:16]
    Accumulator_2.io.reset <= io.accReset @[XNORNetInference.scala 111:18]
    Accumulator_2.io.en <= io.accEn @[XNORNetInference.scala 112:14]
    inst MulAdd_2 of MulAdd_2 @[XNORNetInference.scala 115:24]
    MulAdd_2.io is invalid
    MulAdd_2.clock <= clock
    MulAdd_2.reset <= reset
    node _T_1865 = bits(mem.io.out, 63, 32) @[XNORNetInference.scala 126:15]
    node _T_1866 = mux(io.memSel, UInt<32>("h00"), _T_1865) @[XNORNetInference.scala 123:23]
    node _T_1867 = bits(_T_1866, 31, 16) @[XNORNetInference.scala 128:28]
    node _T_1868 = asSInt(_T_1867) @[XNORNetInference.scala 128:101]
    MulAdd_2.io.a <= _T_1868 @[XNORNetInference.scala 128:19]
    node _T_1869 = bits(_T_1866, 15, 0) @[XNORNetInference.scala 129:28]
    node _T_1870 = asSInt(_T_1869) @[XNORNetInference.scala 129:71]
    MulAdd_2.io.c <= _T_1870 @[XNORNetInference.scala 129:19]
    MulAdd_2.io.m <= mean.io.output @[XNORNetInference.scala 142:16]
    MulAdd_2.io.b <= Accumulator_2.io.out @[XNORNetInference.scala 143:16]
    meanBuffer.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 144:24]
    maxModule.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 145:23]
    node signs_2 = bits(MulAdd_2.io.r, 31, 31) @[XNORNetInference.scala 146:16]
    inst Accumulator_3 of Accumulator_3 @[XNORNetInference.scala 103:21]
    Accumulator_3.io is invalid
    Accumulator_3.clock <= clock
    Accumulator_3.reset <= reset
    node _T_1871 = bits(xnor.io.out[3], 3, 0) @[BitSum.scala 31:51]
    node _T_1872 = bits(xnor.io.out[3], 7, 4) @[BitSum.scala 31:51]
    node _T_1873 = bits(xnor.io.out[3], 11, 8) @[BitSum.scala 31:51]
    node _T_1874 = bits(xnor.io.out[3], 15, 12) @[BitSum.scala 31:51]
    node _T_1875 = bits(xnor.io.out[3], 19, 16) @[BitSum.scala 31:51]
    node _T_1876 = bits(xnor.io.out[3], 23, 20) @[BitSum.scala 31:51]
    node _T_1877 = bits(xnor.io.out[3], 27, 24) @[BitSum.scala 31:51]
    node _T_1878 = bits(xnor.io.out[3], 31, 28) @[BitSum.scala 31:51]
    reg _T_1881 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1884 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1887 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1890 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1893 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1896 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1899 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1902 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1905 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1908 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1911 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1914 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1917 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1920 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1923 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1926 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1929 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1929 is invalid @[BitSum.scala 11:24]
    _T_1929[0] <= _T_1881 @[BitSum.scala 11:24]
    _T_1929[1] <= _T_1884 @[BitSum.scala 11:24]
    _T_1929[2] <= _T_1887 @[BitSum.scala 11:24]
    _T_1929[3] <= _T_1890 @[BitSum.scala 11:24]
    _T_1929[4] <= _T_1893 @[BitSum.scala 11:24]
    _T_1929[5] <= _T_1896 @[BitSum.scala 11:24]
    _T_1929[6] <= _T_1899 @[BitSum.scala 11:24]
    _T_1929[7] <= _T_1902 @[BitSum.scala 11:24]
    _T_1929[8] <= _T_1905 @[BitSum.scala 11:24]
    _T_1929[9] <= _T_1908 @[BitSum.scala 11:24]
    _T_1929[10] <= _T_1911 @[BitSum.scala 11:24]
    _T_1929[11] <= _T_1914 @[BitSum.scala 11:24]
    _T_1929[12] <= _T_1917 @[BitSum.scala 11:24]
    _T_1929[13] <= _T_1920 @[BitSum.scala 11:24]
    _T_1929[14] <= _T_1923 @[BitSum.scala 11:24]
    _T_1929[15] <= _T_1926 @[BitSum.scala 11:24]
    reg _T_1951 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1954 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1957 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1960 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1963 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1966 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1969 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1972 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1975 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1978 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1981 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1984 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1987 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1990 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1993 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1996 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1999 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1999 is invalid @[BitSum.scala 11:24]
    _T_1999[0] <= _T_1951 @[BitSum.scala 11:24]
    _T_1999[1] <= _T_1954 @[BitSum.scala 11:24]
    _T_1999[2] <= _T_1957 @[BitSum.scala 11:24]
    _T_1999[3] <= _T_1960 @[BitSum.scala 11:24]
    _T_1999[4] <= _T_1963 @[BitSum.scala 11:24]
    _T_1999[5] <= _T_1966 @[BitSum.scala 11:24]
    _T_1999[6] <= _T_1969 @[BitSum.scala 11:24]
    _T_1999[7] <= _T_1972 @[BitSum.scala 11:24]
    _T_1999[8] <= _T_1975 @[BitSum.scala 11:24]
    _T_1999[9] <= _T_1978 @[BitSum.scala 11:24]
    _T_1999[10] <= _T_1981 @[BitSum.scala 11:24]
    _T_1999[11] <= _T_1984 @[BitSum.scala 11:24]
    _T_1999[12] <= _T_1987 @[BitSum.scala 11:24]
    _T_1999[13] <= _T_1990 @[BitSum.scala 11:24]
    _T_1999[14] <= _T_1993 @[BitSum.scala 11:24]
    _T_1999[15] <= _T_1996 @[BitSum.scala 11:24]
    reg _T_2021 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2024 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2027 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2030 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2033 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2036 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2039 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2042 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2045 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2048 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2051 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2054 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2057 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2060 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2063 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2066 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2069 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2069 is invalid @[BitSum.scala 11:24]
    _T_2069[0] <= _T_2021 @[BitSum.scala 11:24]
    _T_2069[1] <= _T_2024 @[BitSum.scala 11:24]
    _T_2069[2] <= _T_2027 @[BitSum.scala 11:24]
    _T_2069[3] <= _T_2030 @[BitSum.scala 11:24]
    _T_2069[4] <= _T_2033 @[BitSum.scala 11:24]
    _T_2069[5] <= _T_2036 @[BitSum.scala 11:24]
    _T_2069[6] <= _T_2039 @[BitSum.scala 11:24]
    _T_2069[7] <= _T_2042 @[BitSum.scala 11:24]
    _T_2069[8] <= _T_2045 @[BitSum.scala 11:24]
    _T_2069[9] <= _T_2048 @[BitSum.scala 11:24]
    _T_2069[10] <= _T_2051 @[BitSum.scala 11:24]
    _T_2069[11] <= _T_2054 @[BitSum.scala 11:24]
    _T_2069[12] <= _T_2057 @[BitSum.scala 11:24]
    _T_2069[13] <= _T_2060 @[BitSum.scala 11:24]
    _T_2069[14] <= _T_2063 @[BitSum.scala 11:24]
    _T_2069[15] <= _T_2066 @[BitSum.scala 11:24]
    reg _T_2091 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2094 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2097 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2100 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2103 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2106 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2109 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2112 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2115 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2118 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2121 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2124 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2127 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2130 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2133 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2136 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2139 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2139 is invalid @[BitSum.scala 11:24]
    _T_2139[0] <= _T_2091 @[BitSum.scala 11:24]
    _T_2139[1] <= _T_2094 @[BitSum.scala 11:24]
    _T_2139[2] <= _T_2097 @[BitSum.scala 11:24]
    _T_2139[3] <= _T_2100 @[BitSum.scala 11:24]
    _T_2139[4] <= _T_2103 @[BitSum.scala 11:24]
    _T_2139[5] <= _T_2106 @[BitSum.scala 11:24]
    _T_2139[6] <= _T_2109 @[BitSum.scala 11:24]
    _T_2139[7] <= _T_2112 @[BitSum.scala 11:24]
    _T_2139[8] <= _T_2115 @[BitSum.scala 11:24]
    _T_2139[9] <= _T_2118 @[BitSum.scala 11:24]
    _T_2139[10] <= _T_2121 @[BitSum.scala 11:24]
    _T_2139[11] <= _T_2124 @[BitSum.scala 11:24]
    _T_2139[12] <= _T_2127 @[BitSum.scala 11:24]
    _T_2139[13] <= _T_2130 @[BitSum.scala 11:24]
    _T_2139[14] <= _T_2133 @[BitSum.scala 11:24]
    _T_2139[15] <= _T_2136 @[BitSum.scala 11:24]
    reg _T_2161 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2164 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2167 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2170 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2173 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2176 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2179 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2182 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2185 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2188 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2191 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2194 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2197 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2200 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2203 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2206 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2209 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2209 is invalid @[BitSum.scala 11:24]
    _T_2209[0] <= _T_2161 @[BitSum.scala 11:24]
    _T_2209[1] <= _T_2164 @[BitSum.scala 11:24]
    _T_2209[2] <= _T_2167 @[BitSum.scala 11:24]
    _T_2209[3] <= _T_2170 @[BitSum.scala 11:24]
    _T_2209[4] <= _T_2173 @[BitSum.scala 11:24]
    _T_2209[5] <= _T_2176 @[BitSum.scala 11:24]
    _T_2209[6] <= _T_2179 @[BitSum.scala 11:24]
    _T_2209[7] <= _T_2182 @[BitSum.scala 11:24]
    _T_2209[8] <= _T_2185 @[BitSum.scala 11:24]
    _T_2209[9] <= _T_2188 @[BitSum.scala 11:24]
    _T_2209[10] <= _T_2191 @[BitSum.scala 11:24]
    _T_2209[11] <= _T_2194 @[BitSum.scala 11:24]
    _T_2209[12] <= _T_2197 @[BitSum.scala 11:24]
    _T_2209[13] <= _T_2200 @[BitSum.scala 11:24]
    _T_2209[14] <= _T_2203 @[BitSum.scala 11:24]
    _T_2209[15] <= _T_2206 @[BitSum.scala 11:24]
    reg _T_2231 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2234 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2237 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2240 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2243 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2246 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2249 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2252 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2255 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2258 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2261 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2264 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2267 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2270 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2273 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2276 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2279 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2279 is invalid @[BitSum.scala 11:24]
    _T_2279[0] <= _T_2231 @[BitSum.scala 11:24]
    _T_2279[1] <= _T_2234 @[BitSum.scala 11:24]
    _T_2279[2] <= _T_2237 @[BitSum.scala 11:24]
    _T_2279[3] <= _T_2240 @[BitSum.scala 11:24]
    _T_2279[4] <= _T_2243 @[BitSum.scala 11:24]
    _T_2279[5] <= _T_2246 @[BitSum.scala 11:24]
    _T_2279[6] <= _T_2249 @[BitSum.scala 11:24]
    _T_2279[7] <= _T_2252 @[BitSum.scala 11:24]
    _T_2279[8] <= _T_2255 @[BitSum.scala 11:24]
    _T_2279[9] <= _T_2258 @[BitSum.scala 11:24]
    _T_2279[10] <= _T_2261 @[BitSum.scala 11:24]
    _T_2279[11] <= _T_2264 @[BitSum.scala 11:24]
    _T_2279[12] <= _T_2267 @[BitSum.scala 11:24]
    _T_2279[13] <= _T_2270 @[BitSum.scala 11:24]
    _T_2279[14] <= _T_2273 @[BitSum.scala 11:24]
    _T_2279[15] <= _T_2276 @[BitSum.scala 11:24]
    reg _T_2301 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2304 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2307 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2310 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2313 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2316 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2319 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2322 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2325 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2328 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2331 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2334 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2337 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2340 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2343 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2346 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2349 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2349 is invalid @[BitSum.scala 11:24]
    _T_2349[0] <= _T_2301 @[BitSum.scala 11:24]
    _T_2349[1] <= _T_2304 @[BitSum.scala 11:24]
    _T_2349[2] <= _T_2307 @[BitSum.scala 11:24]
    _T_2349[3] <= _T_2310 @[BitSum.scala 11:24]
    _T_2349[4] <= _T_2313 @[BitSum.scala 11:24]
    _T_2349[5] <= _T_2316 @[BitSum.scala 11:24]
    _T_2349[6] <= _T_2319 @[BitSum.scala 11:24]
    _T_2349[7] <= _T_2322 @[BitSum.scala 11:24]
    _T_2349[8] <= _T_2325 @[BitSum.scala 11:24]
    _T_2349[9] <= _T_2328 @[BitSum.scala 11:24]
    _T_2349[10] <= _T_2331 @[BitSum.scala 11:24]
    _T_2349[11] <= _T_2334 @[BitSum.scala 11:24]
    _T_2349[12] <= _T_2337 @[BitSum.scala 11:24]
    _T_2349[13] <= _T_2340 @[BitSum.scala 11:24]
    _T_2349[14] <= _T_2343 @[BitSum.scala 11:24]
    _T_2349[15] <= _T_2346 @[BitSum.scala 11:24]
    reg _T_2371 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2374 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2377 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2380 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2383 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2386 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2389 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2392 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2395 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2398 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2401 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2404 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2407 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2410 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2413 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2416 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2419 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2419 is invalid @[BitSum.scala 11:24]
    _T_2419[0] <= _T_2371 @[BitSum.scala 11:24]
    _T_2419[1] <= _T_2374 @[BitSum.scala 11:24]
    _T_2419[2] <= _T_2377 @[BitSum.scala 11:24]
    _T_2419[3] <= _T_2380 @[BitSum.scala 11:24]
    _T_2419[4] <= _T_2383 @[BitSum.scala 11:24]
    _T_2419[5] <= _T_2386 @[BitSum.scala 11:24]
    _T_2419[6] <= _T_2389 @[BitSum.scala 11:24]
    _T_2419[7] <= _T_2392 @[BitSum.scala 11:24]
    _T_2419[8] <= _T_2395 @[BitSum.scala 11:24]
    _T_2419[9] <= _T_2398 @[BitSum.scala 11:24]
    _T_2419[10] <= _T_2401 @[BitSum.scala 11:24]
    _T_2419[11] <= _T_2404 @[BitSum.scala 11:24]
    _T_2419[12] <= _T_2407 @[BitSum.scala 11:24]
    _T_2419[13] <= _T_2410 @[BitSum.scala 11:24]
    _T_2419[14] <= _T_2413 @[BitSum.scala 11:24]
    _T_2419[15] <= _T_2416 @[BitSum.scala 11:24]
    node _T_2439 = add(_T_1929[_T_1871], _T_1999[_T_1872]) @[BitSum.scala 18:14]
    node _T_2440 = tail(_T_2439, 1) @[BitSum.scala 18:14]
    node _T_2441 = asSInt(_T_2440) @[BitSum.scala 18:14]
    node _T_2442 = add(_T_2069[_T_1873], _T_2139[_T_1874]) @[BitSum.scala 18:14]
    node _T_2443 = tail(_T_2442, 1) @[BitSum.scala 18:14]
    node _T_2444 = asSInt(_T_2443) @[BitSum.scala 18:14]
    node _T_2445 = add(_T_2209[_T_1875], _T_2279[_T_1876]) @[BitSum.scala 18:14]
    node _T_2446 = tail(_T_2445, 1) @[BitSum.scala 18:14]
    node _T_2447 = asSInt(_T_2446) @[BitSum.scala 18:14]
    node _T_2448 = add(_T_2349[_T_1877], _T_2419[_T_1878]) @[BitSum.scala 18:14]
    node _T_2449 = tail(_T_2448, 1) @[BitSum.scala 18:14]
    node _T_2450 = asSInt(_T_2449) @[BitSum.scala 18:14]
    node _T_2451 = add(_T_2441, _T_2444) @[BitSum.scala 18:14]
    node _T_2452 = tail(_T_2451, 1) @[BitSum.scala 18:14]
    node _T_2453 = asSInt(_T_2452) @[BitSum.scala 18:14]
    node _T_2454 = add(_T_2447, _T_2450) @[BitSum.scala 18:14]
    node _T_2455 = tail(_T_2454, 1) @[BitSum.scala 18:14]
    node _T_2456 = asSInt(_T_2455) @[BitSum.scala 18:14]
    node _T_2457 = add(_T_2453, _T_2456) @[BitSum.scala 18:14]
    node _T_2458 = tail(_T_2457, 1) @[BitSum.scala 18:14]
    node _T_2459 = asSInt(_T_2458) @[BitSum.scala 18:14]
    Accumulator_3.io.in <= _T_2459 @[XNORNetInference.scala 106:15]
    Accumulator_3.io.sel <= io.accSel @[XNORNetInference.scala 110:16]
    Accumulator_3.io.reset <= io.accReset @[XNORNetInference.scala 111:18]
    Accumulator_3.io.en <= io.accEn @[XNORNetInference.scala 112:14]
    inst MulAdd_3 of MulAdd_3 @[XNORNetInference.scala 115:24]
    MulAdd_3.io is invalid
    MulAdd_3.clock <= clock
    MulAdd_3.reset <= reset
    node _T_2461 = bits(mem.io.out, 31, 0) @[XNORNetInference.scala 126:15]
    node _T_2462 = mux(io.memSel, UInt<32>("h00"), _T_2461) @[XNORNetInference.scala 123:23]
    node _T_2463 = bits(_T_2462, 31, 16) @[XNORNetInference.scala 128:28]
    node _T_2464 = asSInt(_T_2463) @[XNORNetInference.scala 128:101]
    MulAdd_3.io.a <= _T_2464 @[XNORNetInference.scala 128:19]
    node _T_2465 = bits(_T_2462, 15, 0) @[XNORNetInference.scala 129:28]
    node _T_2466 = asSInt(_T_2465) @[XNORNetInference.scala 129:71]
    MulAdd_3.io.c <= _T_2466 @[XNORNetInference.scala 129:19]
    MulAdd_3.io.m <= mean.io.output @[XNORNetInference.scala 142:16]
    MulAdd_3.io.b <= Accumulator_3.io.out @[XNORNetInference.scala 143:16]
    meanBuffer.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 144:24]
    maxModule.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 145:23]
    node signs_3 = bits(MulAdd_3.io.r, 31, 31) @[XNORNetInference.scala 146:16]
    node _T_2467 = cat(signs_2, signs_3) @[Cat.scala 30:58]
    node _T_2468 = cat(signs_0, signs_1) @[Cat.scala 30:58]
    node _T_2469 = cat(_T_2468, _T_2467) @[Cat.scala 30:58]
    inputWire <= _T_2469 @[XNORNetInference.scala 150:12]
    meanBuffer.io.reset <= io.meanReset @[XNORNetInference.scala 152:22]
    meanBuffer.io.cntInverse65536 <= io.featureNumInverse65536 @[XNORNetInference.scala 153:32]
    mean.io.input <= meanBuffer.io.out @[XNORNetInference.scala 154:16]
    
  module IglooScheduler : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip en : UInt<1>, flip inputOffset : UInt<8>, flip memOffset : UInt<8>, finished : UInt<1>, result : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst hw of XNORNetInference @[IglooScheduler.scala 75:18]
    hw.io is invalid
    hw.clock <= clock
    hw.reset <= reset
    hw.io.memRen <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
    hw.io.memWen <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
    io.result <= hw.io.result @[IglooScheduler.scala 81:12]
    reg currentLayer : UInt<4>, clock @[IglooScheduler.scala 83:25]
    node _T_15 = eq(UInt<1>("h01"), currentLayer) @[Mux.scala 46:19]
    node _T_16 = mux(_T_15, UInt<4>("h0c"), UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_17 = eq(UInt<1>("h00"), currentLayer) @[Mux.scala 46:19]
    node currentFeatureCnt = mux(_T_17, UInt<7>("h060"), _T_16) @[Mux.scala 46:16]
    node accWidth = div(currentFeatureCnt, UInt<3>("h04")) @[IglooScheduler.scala 88:36]
    node _T_24 = eq(UInt<1>("h01"), currentLayer) @[Mux.scala 46:19]
    node _T_25 = mux(_T_24, UInt<2>("h03"), UInt<1>("h00")) @[Mux.scala 46:16]
    node _T_26 = eq(UInt<1>("h00"), currentLayer) @[Mux.scala 46:19]
    node inputRound = mux(_T_26, UInt<4>("h08"), _T_25) @[Mux.scala 46:16]
    node currentTotalRound = mul(accWidth, inputRound) @[IglooScheduler.scala 93:33]
    node _T_28 = eq(currentLayer, UInt<1>("h01")) @[IglooScheduler.scala 96:33]
    node lastLayer = mux(_T_28, UInt<1>("h01"), UInt<1>("h00")) @[IglooScheduler.scala 96:20]
    hw.io.maxEn <= lastLayer @[IglooScheduler.scala 97:14]
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[IglooScheduler.scala 99:20]
    reg substate : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IglooScheduler.scala 100:23]
    node _T_35 = bits(hw.io.memOut, 127, 0) @[IglooScheduler.scala 115:33]
    wire inputBuffer : UInt<4>[32] @[IglooScheduler.scala 115:67]
    inputBuffer is invalid @[IglooScheduler.scala 115:67]
    wire _T_142 : UInt<128>
    _T_142 is invalid
    _T_142 <= _T_35
    node _T_143 = bits(_T_142, 3, 0) @[IglooScheduler.scala 115:67]
    inputBuffer[0] <= _T_143 @[IglooScheduler.scala 115:67]
    node _T_144 = bits(_T_142, 7, 4) @[IglooScheduler.scala 115:67]
    inputBuffer[1] <= _T_144 @[IglooScheduler.scala 115:67]
    node _T_145 = bits(_T_142, 11, 8) @[IglooScheduler.scala 115:67]
    inputBuffer[2] <= _T_145 @[IglooScheduler.scala 115:67]
    node _T_146 = bits(_T_142, 15, 12) @[IglooScheduler.scala 115:67]
    inputBuffer[3] <= _T_146 @[IglooScheduler.scala 115:67]
    node _T_147 = bits(_T_142, 19, 16) @[IglooScheduler.scala 115:67]
    inputBuffer[4] <= _T_147 @[IglooScheduler.scala 115:67]
    node _T_148 = bits(_T_142, 23, 20) @[IglooScheduler.scala 115:67]
    inputBuffer[5] <= _T_148 @[IglooScheduler.scala 115:67]
    node _T_149 = bits(_T_142, 27, 24) @[IglooScheduler.scala 115:67]
    inputBuffer[6] <= _T_149 @[IglooScheduler.scala 115:67]
    node _T_150 = bits(_T_142, 31, 28) @[IglooScheduler.scala 115:67]
    inputBuffer[7] <= _T_150 @[IglooScheduler.scala 115:67]
    node _T_151 = bits(_T_142, 35, 32) @[IglooScheduler.scala 115:67]
    inputBuffer[8] <= _T_151 @[IglooScheduler.scala 115:67]
    node _T_152 = bits(_T_142, 39, 36) @[IglooScheduler.scala 115:67]
    inputBuffer[9] <= _T_152 @[IglooScheduler.scala 115:67]
    node _T_153 = bits(_T_142, 43, 40) @[IglooScheduler.scala 115:67]
    inputBuffer[10] <= _T_153 @[IglooScheduler.scala 115:67]
    node _T_154 = bits(_T_142, 47, 44) @[IglooScheduler.scala 115:67]
    inputBuffer[11] <= _T_154 @[IglooScheduler.scala 115:67]
    node _T_155 = bits(_T_142, 51, 48) @[IglooScheduler.scala 115:67]
    inputBuffer[12] <= _T_155 @[IglooScheduler.scala 115:67]
    node _T_156 = bits(_T_142, 55, 52) @[IglooScheduler.scala 115:67]
    inputBuffer[13] <= _T_156 @[IglooScheduler.scala 115:67]
    node _T_157 = bits(_T_142, 59, 56) @[IglooScheduler.scala 115:67]
    inputBuffer[14] <= _T_157 @[IglooScheduler.scala 115:67]
    node _T_158 = bits(_T_142, 63, 60) @[IglooScheduler.scala 115:67]
    inputBuffer[15] <= _T_158 @[IglooScheduler.scala 115:67]
    node _T_159 = bits(_T_142, 67, 64) @[IglooScheduler.scala 115:67]
    inputBuffer[16] <= _T_159 @[IglooScheduler.scala 115:67]
    node _T_160 = bits(_T_142, 71, 68) @[IglooScheduler.scala 115:67]
    inputBuffer[17] <= _T_160 @[IglooScheduler.scala 115:67]
    node _T_161 = bits(_T_142, 75, 72) @[IglooScheduler.scala 115:67]
    inputBuffer[18] <= _T_161 @[IglooScheduler.scala 115:67]
    node _T_162 = bits(_T_142, 79, 76) @[IglooScheduler.scala 115:67]
    inputBuffer[19] <= _T_162 @[IglooScheduler.scala 115:67]
    node _T_163 = bits(_T_142, 83, 80) @[IglooScheduler.scala 115:67]
    inputBuffer[20] <= _T_163 @[IglooScheduler.scala 115:67]
    node _T_164 = bits(_T_142, 87, 84) @[IglooScheduler.scala 115:67]
    inputBuffer[21] <= _T_164 @[IglooScheduler.scala 115:67]
    node _T_165 = bits(_T_142, 91, 88) @[IglooScheduler.scala 115:67]
    inputBuffer[22] <= _T_165 @[IglooScheduler.scala 115:67]
    node _T_166 = bits(_T_142, 95, 92) @[IglooScheduler.scala 115:67]
    inputBuffer[23] <= _T_166 @[IglooScheduler.scala 115:67]
    node _T_167 = bits(_T_142, 99, 96) @[IglooScheduler.scala 115:67]
    inputBuffer[24] <= _T_167 @[IglooScheduler.scala 115:67]
    node _T_168 = bits(_T_142, 103, 100) @[IglooScheduler.scala 115:67]
    inputBuffer[25] <= _T_168 @[IglooScheduler.scala 115:67]
    node _T_169 = bits(_T_142, 107, 104) @[IglooScheduler.scala 115:67]
    inputBuffer[26] <= _T_169 @[IglooScheduler.scala 115:67]
    node _T_170 = bits(_T_142, 111, 108) @[IglooScheduler.scala 115:67]
    inputBuffer[27] <= _T_170 @[IglooScheduler.scala 115:67]
    node _T_171 = bits(_T_142, 115, 112) @[IglooScheduler.scala 115:67]
    inputBuffer[28] <= _T_171 @[IglooScheduler.scala 115:67]
    node _T_172 = bits(_T_142, 119, 116) @[IglooScheduler.scala 115:67]
    inputBuffer[29] <= _T_172 @[IglooScheduler.scala 115:67]
    node _T_173 = bits(_T_142, 123, 120) @[IglooScheduler.scala 115:67]
    inputBuffer[30] <= _T_173 @[IglooScheduler.scala 115:67]
    node _T_174 = bits(_T_142, 127, 124) @[IglooScheduler.scala 115:67]
    inputBuffer[31] <= _T_174 @[IglooScheduler.scala 115:67]
    reg maxOffsetReg : UInt<4>, clock @[IglooScheduler.scala 118:23]
    hw.io.maxOffset <= maxOffsetReg @[IglooScheduler.scala 119:18]
    when io.en : @[IglooScheduler.scala 121:15]
      node _T_177 = eq(state, UInt<8>("h00")) @[IglooScheduler.scala 103:25]
      when _T_177 : @[IglooScheduler.scala 122:21]
        hw.io.memSel <= UInt<1>("h01") @[IglooScheduler.scala 123:20]
        hw.io.inputSel <= UInt<1>("h01") @[IglooScheduler.scala 124:22]
        hw.io.memAddr <= io.inputOffset @[IglooScheduler.scala 125:21]
        currentLayer <= UInt<1>("h00") @[IglooScheduler.scala 126:19]
        state <= UInt<8>("h01") @[IglooScheduler.scala 105:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
        skip @[IglooScheduler.scala 122:21]
      node _T_186 = eq(state, UInt<8>("h01")) @[IglooScheduler.scala 103:25]
      when _T_186 : @[IglooScheduler.scala 130:20]
        state <= UInt<8>("h02") @[IglooScheduler.scala 105:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
        skip @[IglooScheduler.scala 130:20]
      node _T_190 = eq(state, UInt<8>("h02")) @[IglooScheduler.scala 103:25]
      when _T_190 : @[IglooScheduler.scala 133:26]
        hw.io.inputBufferPush <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
        hw.io.inputBufferPop <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
        node _T_194 = lt(substate, UInt<5>("h01f")) @[IglooScheduler.scala 139:21]
        when _T_194 : @[IglooScheduler.scala 139:47]
          node _T_196 = sub(UInt<5>("h01f"), substate) @[IglooScheduler.scala 140:59]
          node _T_197 = asUInt(_T_196) @[IglooScheduler.scala 140:59]
          node _T_198 = tail(_T_197, 1) @[IglooScheduler.scala 140:59]
          node _T_201 = bits(_T_198, 4, 0)
          hw.io.input <= inputBuffer[_T_201] @[IglooScheduler.scala 140:21]
          node _T_203 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 107:30]
          node _T_204 = tail(_T_203, 1) @[IglooScheduler.scala 107:30]
          substate <= _T_204 @[IglooScheduler.scala 107:20]
          skip @[IglooScheduler.scala 139:47]
        node _T_206 = eq(substate, UInt<5>("h01f")) @[IglooScheduler.scala 142:27]
        node _T_208 = eq(_T_194, UInt<1>("h00")) @[IglooScheduler.scala 139:47]
        node _T_209 = and(_T_208, _T_206) @[IglooScheduler.scala 142:55]
        when _T_209 : @[IglooScheduler.scala 142:55]
          node _T_211 = sub(UInt<5>("h01f"), substate) @[IglooScheduler.scala 143:59]
          node _T_212 = asUInt(_T_211) @[IglooScheduler.scala 143:59]
          node _T_213 = tail(_T_212, 1) @[IglooScheduler.scala 143:59]
          node _T_216 = bits(_T_213, 4, 0)
          hw.io.input <= inputBuffer[_T_216] @[IglooScheduler.scala 143:21]
          hw.io.memAddr <= io.memOffset @[IglooScheduler.scala 144:23]
          state <= UInt<8>("h03") @[IglooScheduler.scala 105:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
          skip @[IglooScheduler.scala 142:55]
        skip @[IglooScheduler.scala 133:26]
      node _T_220 = eq(state, UInt<8>("h03")) @[IglooScheduler.scala 103:25]
      when _T_220 : @[IglooScheduler.scala 148:28]
        hw.io.inputBufferPush <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
        hw.io.inputSel <= UInt<1>("h00") @[IglooScheduler.scala 151:22]
        hw.io.accEn <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
        hw.io.accReset <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
        hw.io.accSel <= UInt<1>("h00") @[IglooScheduler.scala 155:20]
        node _T_226 = add(io.memOffset, UInt<1>("h01")) @[IglooScheduler.scala 157:34]
        node _T_227 = tail(_T_226, 1) @[IglooScheduler.scala 157:34]
        hw.io.memAddr <= _T_227 @[IglooScheduler.scala 157:20]
        state <= UInt<8>("h04") @[IglooScheduler.scala 105:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
        skip @[IglooScheduler.scala 148:28]
      node _T_231 = eq(state, UInt<8>("h04")) @[IglooScheduler.scala 103:25]
      when _T_231 : @[IglooScheduler.scala 161:20]
        node _T_233 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 165:30]
        node _T_234 = tail(_T_233, 1) @[IglooScheduler.scala 165:30]
        node _T_235 = rem(_T_234, accWidth) @[IglooScheduler.scala 165:35]
        hw.io.accSel <= _T_235 @[IglooScheduler.scala 165:19]
        node _T_236 = add(io.memOffset, substate) @[IglooScheduler.scala 167:34]
        node _T_237 = tail(_T_236, 1) @[IglooScheduler.scala 167:34]
        node _T_239 = add(_T_237, UInt<2>("h02")) @[IglooScheduler.scala 167:43]
        node _T_240 = tail(_T_239, 1) @[IglooScheduler.scala 167:43]
        hw.io.memAddr <= _T_240 @[IglooScheduler.scala 167:20]
        node _T_242 = sub(currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 168:38]
        node _T_243 = asUInt(_T_242) @[IglooScheduler.scala 168:38]
        node _T_244 = tail(_T_243, 1) @[IglooScheduler.scala 168:38]
        node _T_245 = lt(substate, _T_244) @[IglooScheduler.scala 168:20]
        when _T_245 : @[IglooScheduler.scala 168:43]
          node _T_247 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 107:30]
          node _T_248 = tail(_T_247, 1) @[IglooScheduler.scala 107:30]
          substate <= _T_248 @[IglooScheduler.scala 107:20]
          skip @[IglooScheduler.scala 168:43]
        node _T_250 = sub(currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 171:46]
        node _T_251 = asUInt(_T_250) @[IglooScheduler.scala 171:46]
        node _T_252 = tail(_T_251, 1) @[IglooScheduler.scala 171:46]
        node _T_253 = eq(substate, _T_252) @[IglooScheduler.scala 171:26]
        node _T_255 = eq(_T_245, UInt<1>("h00")) @[IglooScheduler.scala 168:43]
        node _T_256 = and(_T_255, _T_253) @[IglooScheduler.scala 171:51]
        when _T_256 : @[IglooScheduler.scala 171:51]
          hw.io.memSel <= UInt<1>("h00") @[IglooScheduler.scala 173:21]
          hw.io.inputBufferPush <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
          state <= UInt<8>("h05") @[IglooScheduler.scala 105:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
          hw.io.maxClear <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
          maxOffsetReg <= UInt<1>("h00") @[IglooScheduler.scala 180:21]
          hw.io.accEn <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
          skip @[IglooScheduler.scala 171:51]
        node _T_263 = rem(substate, accWidth) @[IglooScheduler.scala 184:20]
        node _T_265 = sub(accWidth, UInt<2>("h02")) @[IglooScheduler.scala 184:40]
        node _T_266 = asUInt(_T_265) @[IglooScheduler.scala 184:40]
        node _T_267 = tail(_T_266, 1) @[IglooScheduler.scala 184:40]
        node _T_268 = eq(_T_263, _T_267) @[IglooScheduler.scala 184:29]
        when _T_268 : @[IglooScheduler.scala 184:45]
          hw.io.inputBufferPop <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
          skip @[IglooScheduler.scala 184:45]
        node _T_270 = rem(substate, accWidth) @[IglooScheduler.scala 187:26]
        node _T_272 = sub(accWidth, UInt<1>("h01")) @[IglooScheduler.scala 187:46]
        node _T_273 = asUInt(_T_272) @[IglooScheduler.scala 187:46]
        node _T_274 = tail(_T_273, 1) @[IglooScheduler.scala 187:46]
        node _T_275 = eq(_T_270, _T_274) @[IglooScheduler.scala 187:35]
        node _T_277 = eq(_T_268, UInt<1>("h00")) @[IglooScheduler.scala 184:45]
        node _T_278 = and(_T_277, _T_275) @[IglooScheduler.scala 187:51]
        when _T_278 : @[IglooScheduler.scala 187:51]
          hw.io.inputBufferPop <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
          skip @[IglooScheduler.scala 187:51]
        skip @[IglooScheduler.scala 161:20]
      node _T_281 = eq(state, UInt<8>("h05")) @[IglooScheduler.scala 103:25]
      when _T_281 : @[IglooScheduler.scala 191:18]
        node _T_283 = sub(accWidth, UInt<1>("h01")) @[IglooScheduler.scala 192:31]
        node _T_284 = asUInt(_T_283) @[IglooScheduler.scala 192:31]
        node _T_285 = tail(_T_284, 1) @[IglooScheduler.scala 192:31]
        node _T_286 = eq(substate, _T_285) @[IglooScheduler.scala 192:20]
        when _T_286 : @[IglooScheduler.scala 192:36]
          when lastLayer : @[IglooScheduler.scala 195:25]
            io.finished <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
            hw.io.maxEn <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
            state <= UInt<8>("h06") @[IglooScheduler.scala 105:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
            skip @[IglooScheduler.scala 195:25]
          node _T_292 = eq(lastLayer, UInt<1>("h00")) @[IglooScheduler.scala 195:25]
          when _T_292 : @[IglooScheduler.scala 200:11]
            node _T_294 = add(currentLayer, UInt<1>("h01")) @[IglooScheduler.scala 203:37]
            node _T_295 = tail(_T_294, 1) @[IglooScheduler.scala 203:37]
            currentLayer <= _T_295 @[IglooScheduler.scala 203:23]
            hw.io.inputBufferPush <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
            hw.io.accReset <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
            hw.io.accEn <= UInt<1>("h01") @[IglooScheduler.scala 109:20]
            hw.io.accSel <= UInt<1>("h00") @[IglooScheduler.scala 211:24]
            state <= UInt<8>("h04") @[IglooScheduler.scala 105:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 105:50]
            skip @[IglooScheduler.scala 200:11]
          skip @[IglooScheduler.scala 192:36]
        node _T_303 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 217:29]
        node _T_304 = tail(_T_303, 1) @[IglooScheduler.scala 217:29]
        hw.io.accSel <= _T_304 @[IglooScheduler.scala 217:19]
        node _T_305 = add(io.memOffset, substate) @[IglooScheduler.scala 219:34]
        node _T_306 = tail(_T_305, 1) @[IglooScheduler.scala 219:34]
        node _T_307 = add(_T_306, currentTotalRound) @[IglooScheduler.scala 219:43]
        node _T_308 = tail(_T_307, 1) @[IglooScheduler.scala 219:43]
        node _T_310 = add(_T_308, UInt<2>("h02")) @[IglooScheduler.scala 219:61]
        node _T_311 = tail(_T_310, 1) @[IglooScheduler.scala 219:61]
        hw.io.memAddr <= _T_311 @[IglooScheduler.scala 219:20]
        hw.io.maxClear <= UInt<1>("h00") @[IglooScheduler.scala 110:22]
        node _T_314 = add(maxOffsetReg, UInt<3>("h04")) @[IglooScheduler.scala 223:33]
        node _T_315 = tail(_T_314, 1) @[IglooScheduler.scala 223:33]
        maxOffsetReg <= _T_315 @[IglooScheduler.scala 223:19]
        node _T_317 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 107:30]
        node _T_318 = tail(_T_317, 1) @[IglooScheduler.scala 107:30]
        substate <= _T_318 @[IglooScheduler.scala 107:20]
        skip @[IglooScheduler.scala 191:18]
      skip @[IglooScheduler.scala 121:15]
    
