;buildInfoPackage: chisel3, version: 3.0-SNAPSHOT, scalaVersion: 2.11.11, sbtVersion: 0.13.15, builtAtString: 2017-05-30 21:57:15.424, builtAtMillis: 1496181435424
circuit IglooScheduler : 
  module Memo : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_4 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_5 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_6 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module Memo_7 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wen : UInt<1>, flip wrAddr : UInt<8>, flip wrData : UInt<18>, flip ren : UInt<1>, flip rdAddr : UInt<8>, rdData : UInt<18>}
    
    clock is invalid
    reset is invalid
    io is invalid
    cmem mem : UInt<18>[256] @[Memo.scala 15:16]
    when io.wen : @[Memo.scala 18:17]
      infer mport _T_10 = mem[io.wrAddr], clock
      _T_10 <= io.wrData @[Memo.scala 18:34]
      skip @[Memo.scala 18:17]
    io.rdData <= UInt<1>("h00") @[Memo.scala 21:13]
    when io.ren : @[Memo.scala 22:17]
      infer mport _T_12 = mem[io.rdAddr], clock
      io.rdData <= _T_12 @[Memo.scala 22:29]
      skip @[Memo.scala 22:17]
    
  module AggregateMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip addr : UInt<8>, flip waddr : UInt<8>, flip in : UInt<128>, out : UInt<128>, flip wen : UInt<1>, flip ren : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst Memo of Memo @[AggregateMem.scala 11:11]
    Memo.io is invalid
    Memo.clock <= clock
    Memo.reset <= reset
    inst Memo_1 of Memo_1 @[AggregateMem.scala 11:11]
    Memo_1.io is invalid
    Memo_1.clock <= clock
    Memo_1.reset <= reset
    inst Memo_2 of Memo_2 @[AggregateMem.scala 11:11]
    Memo_2.io is invalid
    Memo_2.clock <= clock
    Memo_2.reset <= reset
    inst Memo_3 of Memo_3 @[AggregateMem.scala 11:11]
    Memo_3.io is invalid
    Memo_3.clock <= clock
    Memo_3.reset <= reset
    inst Memo_4 of Memo_4 @[AggregateMem.scala 11:11]
    Memo_4.io is invalid
    Memo_4.clock <= clock
    Memo_4.reset <= reset
    inst Memo_5 of Memo_5 @[AggregateMem.scala 11:11]
    Memo_5.io is invalid
    Memo_5.clock <= clock
    Memo_5.reset <= reset
    inst Memo_6 of Memo_6 @[AggregateMem.scala 11:11]
    Memo_6.io is invalid
    Memo_6.clock <= clock
    Memo_6.reset <= reset
    inst Memo_7 of Memo_7 @[AggregateMem.scala 11:11]
    Memo_7.io is invalid
    Memo_7.clock <= clock
    Memo_7.reset <= reset
    Memo.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_1.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_1.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_1.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_1.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_2.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_2.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_2.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_2.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_3.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_3.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_3.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_3.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_4.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_4.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_4.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_4.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_5.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_5.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_5.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_5.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_6.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_6.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_6.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_6.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    Memo_7.io.ren <= io.ren @[AggregateMem.scala 34:19]
    Memo_7.io.wen <= io.wen @[AggregateMem.scala 35:19]
    Memo_7.io.rdAddr <= io.addr @[AggregateMem.scala 36:22]
    Memo_7.io.wrAddr <= io.waddr @[AggregateMem.scala 37:22]
    node _T_9 = bits(io.in, 15, 0) @[AggregateMem.scala 40:88]
    node _T_10 = cat(UInt<2>("h00"), _T_9) @[Cat.scala 30:58]
    Memo.io.wrData <= _T_10 @[AggregateMem.scala 40:23]
    node _T_12 = bits(io.in, 31, 16) @[AggregateMem.scala 40:88]
    node _T_13 = cat(UInt<2>("h00"), _T_12) @[Cat.scala 30:58]
    Memo_1.io.wrData <= _T_13 @[AggregateMem.scala 40:23]
    node _T_15 = bits(io.in, 47, 32) @[AggregateMem.scala 40:88]
    node _T_16 = cat(UInt<2>("h00"), _T_15) @[Cat.scala 30:58]
    Memo_2.io.wrData <= _T_16 @[AggregateMem.scala 40:23]
    node _T_18 = bits(io.in, 63, 48) @[AggregateMem.scala 40:88]
    node _T_19 = cat(UInt<2>("h00"), _T_18) @[Cat.scala 30:58]
    Memo_3.io.wrData <= _T_19 @[AggregateMem.scala 40:23]
    node _T_21 = bits(io.in, 79, 64) @[AggregateMem.scala 40:88]
    node _T_22 = cat(UInt<2>("h00"), _T_21) @[Cat.scala 30:58]
    Memo_4.io.wrData <= _T_22 @[AggregateMem.scala 40:23]
    node _T_24 = bits(io.in, 95, 80) @[AggregateMem.scala 40:88]
    node _T_25 = cat(UInt<2>("h00"), _T_24) @[Cat.scala 30:58]
    Memo_5.io.wrData <= _T_25 @[AggregateMem.scala 40:23]
    node _T_27 = bits(io.in, 111, 96) @[AggregateMem.scala 40:88]
    node _T_28 = cat(UInt<2>("h00"), _T_27) @[Cat.scala 30:58]
    Memo_6.io.wrData <= _T_28 @[AggregateMem.scala 40:23]
    node _T_30 = bits(io.in, 127, 112) @[AggregateMem.scala 40:88]
    node _T_31 = cat(UInt<2>("h00"), _T_30) @[Cat.scala 30:58]
    Memo_7.io.wrData <= _T_31 @[AggregateMem.scala 40:23]
    node _T_32 = bits(Memo_7.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_33 = bits(Memo_6.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_34 = bits(Memo_5.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_35 = bits(Memo_4.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_36 = bits(Memo_3.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_37 = bits(Memo_2.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_38 = bits(Memo_1.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_39 = bits(Memo.io.rdData, 15, 0) @[AggregateMem.scala 42:64]
    node _T_40 = cat(_T_38, _T_39) @[Cat.scala 30:58]
    node _T_41 = cat(_T_36, _T_37) @[Cat.scala 30:58]
    node _T_42 = cat(_T_41, _T_40) @[Cat.scala 30:58]
    node _T_43 = cat(_T_34, _T_35) @[Cat.scala 30:58]
    node _T_44 = cat(_T_32, _T_33) @[Cat.scala 30:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 30:58]
    node _T_46 = cat(_T_45, _T_42) @[Cat.scala 30:58]
    io.out <= _T_46 @[AggregateMem.scala 42:9]
    
  module BinaryBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip in : UInt<4>, flip fastin : UInt<128>, flip push : UInt<1>, flip fastpush : UInt<1>, out : UInt<32>, flip pop : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg wPos : UInt<6>, clock @[BinaryBuffer.scala 26:15]
    reg rPos : UInt<3>, clock @[BinaryBuffer.scala 27:15]
    reg mem : UInt<4>[64], clock @[BinaryBuffer.scala 29:14]
    node _T_80 = cat(mem[6], mem[7]) @[Cat.scala 30:58]
    node _T_81 = cat(mem[4], mem[5]) @[Cat.scala 30:58]
    node _T_82 = cat(_T_81, _T_80) @[Cat.scala 30:58]
    node _T_83 = cat(mem[2], mem[3]) @[Cat.scala 30:58]
    node _T_84 = cat(mem[0], mem[1]) @[Cat.scala 30:58]
    node _T_85 = cat(_T_84, _T_83) @[Cat.scala 30:58]
    node _T_86 = cat(_T_85, _T_82) @[Cat.scala 30:58]
    node _T_87 = cat(mem[14], mem[15]) @[Cat.scala 30:58]
    node _T_88 = cat(mem[12], mem[13]) @[Cat.scala 30:58]
    node _T_89 = cat(_T_88, _T_87) @[Cat.scala 30:58]
    node _T_90 = cat(mem[10], mem[11]) @[Cat.scala 30:58]
    node _T_91 = cat(mem[8], mem[9]) @[Cat.scala 30:58]
    node _T_92 = cat(_T_91, _T_90) @[Cat.scala 30:58]
    node _T_93 = cat(_T_92, _T_89) @[Cat.scala 30:58]
    node _T_94 = cat(mem[22], mem[23]) @[Cat.scala 30:58]
    node _T_95 = cat(mem[20], mem[21]) @[Cat.scala 30:58]
    node _T_96 = cat(_T_95, _T_94) @[Cat.scala 30:58]
    node _T_97 = cat(mem[18], mem[19]) @[Cat.scala 30:58]
    node _T_98 = cat(mem[16], mem[17]) @[Cat.scala 30:58]
    node _T_99 = cat(_T_98, _T_97) @[Cat.scala 30:58]
    node _T_100 = cat(_T_99, _T_96) @[Cat.scala 30:58]
    node _T_101 = cat(mem[30], mem[31]) @[Cat.scala 30:58]
    node _T_102 = cat(mem[28], mem[29]) @[Cat.scala 30:58]
    node _T_103 = cat(_T_102, _T_101) @[Cat.scala 30:58]
    node _T_104 = cat(mem[26], mem[27]) @[Cat.scala 30:58]
    node _T_105 = cat(mem[24], mem[25]) @[Cat.scala 30:58]
    node _T_106 = cat(_T_105, _T_104) @[Cat.scala 30:58]
    node _T_107 = cat(_T_106, _T_103) @[Cat.scala 30:58]
    node _T_108 = cat(mem[38], mem[39]) @[Cat.scala 30:58]
    node _T_109 = cat(mem[36], mem[37]) @[Cat.scala 30:58]
    node _T_110 = cat(_T_109, _T_108) @[Cat.scala 30:58]
    node _T_111 = cat(mem[34], mem[35]) @[Cat.scala 30:58]
    node _T_112 = cat(mem[32], mem[33]) @[Cat.scala 30:58]
    node _T_113 = cat(_T_112, _T_111) @[Cat.scala 30:58]
    node _T_114 = cat(_T_113, _T_110) @[Cat.scala 30:58]
    node _T_115 = cat(mem[46], mem[47]) @[Cat.scala 30:58]
    node _T_116 = cat(mem[44], mem[45]) @[Cat.scala 30:58]
    node _T_117 = cat(_T_116, _T_115) @[Cat.scala 30:58]
    node _T_118 = cat(mem[42], mem[43]) @[Cat.scala 30:58]
    node _T_119 = cat(mem[40], mem[41]) @[Cat.scala 30:58]
    node _T_120 = cat(_T_119, _T_118) @[Cat.scala 30:58]
    node _T_121 = cat(_T_120, _T_117) @[Cat.scala 30:58]
    node _T_122 = cat(mem[54], mem[55]) @[Cat.scala 30:58]
    node _T_123 = cat(mem[52], mem[53]) @[Cat.scala 30:58]
    node _T_124 = cat(_T_123, _T_122) @[Cat.scala 30:58]
    node _T_125 = cat(mem[50], mem[51]) @[Cat.scala 30:58]
    node _T_126 = cat(mem[48], mem[49]) @[Cat.scala 30:58]
    node _T_127 = cat(_T_126, _T_125) @[Cat.scala 30:58]
    node _T_128 = cat(_T_127, _T_124) @[Cat.scala 30:58]
    node _T_129 = cat(mem[62], mem[63]) @[Cat.scala 30:58]
    node _T_130 = cat(mem[60], mem[61]) @[Cat.scala 30:58]
    node _T_131 = cat(_T_130, _T_129) @[Cat.scala 30:58]
    node _T_132 = cat(mem[58], mem[59]) @[Cat.scala 30:58]
    node _T_133 = cat(mem[56], mem[57]) @[Cat.scala 30:58]
    node _T_134 = cat(_T_133, _T_132) @[Cat.scala 30:58]
    node _T_135 = cat(_T_134, _T_131) @[Cat.scala 30:58]
    wire catMem : UInt<32>[8] @[BinaryBuffer.scala 30:17]
    catMem is invalid @[BinaryBuffer.scala 30:17]
    catMem[0] <= _T_86 @[BinaryBuffer.scala 30:17]
    catMem[1] <= _T_93 @[BinaryBuffer.scala 30:17]
    catMem[2] <= _T_100 @[BinaryBuffer.scala 30:17]
    catMem[3] <= _T_107 @[BinaryBuffer.scala 30:17]
    catMem[4] <= _T_114 @[BinaryBuffer.scala 30:17]
    catMem[5] <= _T_121 @[BinaryBuffer.scala 30:17]
    catMem[6] <= _T_128 @[BinaryBuffer.scala 30:17]
    catMem[7] <= _T_135 @[BinaryBuffer.scala 30:17]
    node _T_149 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 32:23]
    node _T_150 = and(io.fastpush, _T_149) @[BinaryBuffer.scala 32:20]
    when _T_150 : @[BinaryBuffer.scala 32:35]
      node _T_152 = add(wPos, UInt<1>("h00")) @[BinaryBuffer.scala 34:15]
      node _T_153 = tail(_T_152, 1) @[BinaryBuffer.scala 34:15]
      node _T_155 = bits(io.fastin, 127, 124) @[BinaryBuffer.scala 34:31]
      mem[_T_153] <= _T_155 @[BinaryBuffer.scala 34:20]
      node _T_157 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 34:15]
      node _T_158 = tail(_T_157, 1) @[BinaryBuffer.scala 34:15]
      node _T_160 = bits(io.fastin, 123, 120) @[BinaryBuffer.scala 34:31]
      mem[_T_158] <= _T_160 @[BinaryBuffer.scala 34:20]
      node _T_162 = add(wPos, UInt<2>("h02")) @[BinaryBuffer.scala 34:15]
      node _T_163 = tail(_T_162, 1) @[BinaryBuffer.scala 34:15]
      node _T_165 = bits(io.fastin, 119, 116) @[BinaryBuffer.scala 34:31]
      mem[_T_163] <= _T_165 @[BinaryBuffer.scala 34:20]
      node _T_167 = add(wPos, UInt<2>("h03")) @[BinaryBuffer.scala 34:15]
      node _T_168 = tail(_T_167, 1) @[BinaryBuffer.scala 34:15]
      node _T_170 = bits(io.fastin, 115, 112) @[BinaryBuffer.scala 34:31]
      mem[_T_168] <= _T_170 @[BinaryBuffer.scala 34:20]
      node _T_172 = add(wPos, UInt<3>("h04")) @[BinaryBuffer.scala 34:15]
      node _T_173 = tail(_T_172, 1) @[BinaryBuffer.scala 34:15]
      node _T_175 = bits(io.fastin, 111, 108) @[BinaryBuffer.scala 34:31]
      mem[_T_173] <= _T_175 @[BinaryBuffer.scala 34:20]
      node _T_177 = add(wPos, UInt<3>("h05")) @[BinaryBuffer.scala 34:15]
      node _T_178 = tail(_T_177, 1) @[BinaryBuffer.scala 34:15]
      node _T_180 = bits(io.fastin, 107, 104) @[BinaryBuffer.scala 34:31]
      mem[_T_178] <= _T_180 @[BinaryBuffer.scala 34:20]
      node _T_182 = add(wPos, UInt<3>("h06")) @[BinaryBuffer.scala 34:15]
      node _T_183 = tail(_T_182, 1) @[BinaryBuffer.scala 34:15]
      node _T_185 = bits(io.fastin, 103, 100) @[BinaryBuffer.scala 34:31]
      mem[_T_183] <= _T_185 @[BinaryBuffer.scala 34:20]
      node _T_187 = add(wPos, UInt<3>("h07")) @[BinaryBuffer.scala 34:15]
      node _T_188 = tail(_T_187, 1) @[BinaryBuffer.scala 34:15]
      node _T_190 = bits(io.fastin, 99, 96) @[BinaryBuffer.scala 34:31]
      mem[_T_188] <= _T_190 @[BinaryBuffer.scala 34:20]
      node _T_192 = add(wPos, UInt<4>("h08")) @[BinaryBuffer.scala 34:15]
      node _T_193 = tail(_T_192, 1) @[BinaryBuffer.scala 34:15]
      node _T_195 = bits(io.fastin, 95, 92) @[BinaryBuffer.scala 34:31]
      mem[_T_193] <= _T_195 @[BinaryBuffer.scala 34:20]
      node _T_197 = add(wPos, UInt<4>("h09")) @[BinaryBuffer.scala 34:15]
      node _T_198 = tail(_T_197, 1) @[BinaryBuffer.scala 34:15]
      node _T_200 = bits(io.fastin, 91, 88) @[BinaryBuffer.scala 34:31]
      mem[_T_198] <= _T_200 @[BinaryBuffer.scala 34:20]
      node _T_202 = add(wPos, UInt<4>("h0a")) @[BinaryBuffer.scala 34:15]
      node _T_203 = tail(_T_202, 1) @[BinaryBuffer.scala 34:15]
      node _T_205 = bits(io.fastin, 87, 84) @[BinaryBuffer.scala 34:31]
      mem[_T_203] <= _T_205 @[BinaryBuffer.scala 34:20]
      node _T_207 = add(wPos, UInt<4>("h0b")) @[BinaryBuffer.scala 34:15]
      node _T_208 = tail(_T_207, 1) @[BinaryBuffer.scala 34:15]
      node _T_210 = bits(io.fastin, 83, 80) @[BinaryBuffer.scala 34:31]
      mem[_T_208] <= _T_210 @[BinaryBuffer.scala 34:20]
      node _T_212 = add(wPos, UInt<4>("h0c")) @[BinaryBuffer.scala 34:15]
      node _T_213 = tail(_T_212, 1) @[BinaryBuffer.scala 34:15]
      node _T_215 = bits(io.fastin, 79, 76) @[BinaryBuffer.scala 34:31]
      mem[_T_213] <= _T_215 @[BinaryBuffer.scala 34:20]
      node _T_217 = add(wPos, UInt<4>("h0d")) @[BinaryBuffer.scala 34:15]
      node _T_218 = tail(_T_217, 1) @[BinaryBuffer.scala 34:15]
      node _T_220 = bits(io.fastin, 75, 72) @[BinaryBuffer.scala 34:31]
      mem[_T_218] <= _T_220 @[BinaryBuffer.scala 34:20]
      node _T_222 = add(wPos, UInt<4>("h0e")) @[BinaryBuffer.scala 34:15]
      node _T_223 = tail(_T_222, 1) @[BinaryBuffer.scala 34:15]
      node _T_225 = bits(io.fastin, 71, 68) @[BinaryBuffer.scala 34:31]
      mem[_T_223] <= _T_225 @[BinaryBuffer.scala 34:20]
      node _T_227 = add(wPos, UInt<4>("h0f")) @[BinaryBuffer.scala 34:15]
      node _T_228 = tail(_T_227, 1) @[BinaryBuffer.scala 34:15]
      node _T_230 = bits(io.fastin, 67, 64) @[BinaryBuffer.scala 34:31]
      mem[_T_228] <= _T_230 @[BinaryBuffer.scala 34:20]
      node _T_232 = add(wPos, UInt<5>("h010")) @[BinaryBuffer.scala 34:15]
      node _T_233 = tail(_T_232, 1) @[BinaryBuffer.scala 34:15]
      node _T_235 = bits(io.fastin, 63, 60) @[BinaryBuffer.scala 34:31]
      mem[_T_233] <= _T_235 @[BinaryBuffer.scala 34:20]
      node _T_237 = add(wPos, UInt<5>("h011")) @[BinaryBuffer.scala 34:15]
      node _T_238 = tail(_T_237, 1) @[BinaryBuffer.scala 34:15]
      node _T_240 = bits(io.fastin, 59, 56) @[BinaryBuffer.scala 34:31]
      mem[_T_238] <= _T_240 @[BinaryBuffer.scala 34:20]
      node _T_242 = add(wPos, UInt<5>("h012")) @[BinaryBuffer.scala 34:15]
      node _T_243 = tail(_T_242, 1) @[BinaryBuffer.scala 34:15]
      node _T_245 = bits(io.fastin, 55, 52) @[BinaryBuffer.scala 34:31]
      mem[_T_243] <= _T_245 @[BinaryBuffer.scala 34:20]
      node _T_247 = add(wPos, UInt<5>("h013")) @[BinaryBuffer.scala 34:15]
      node _T_248 = tail(_T_247, 1) @[BinaryBuffer.scala 34:15]
      node _T_250 = bits(io.fastin, 51, 48) @[BinaryBuffer.scala 34:31]
      mem[_T_248] <= _T_250 @[BinaryBuffer.scala 34:20]
      node _T_252 = add(wPos, UInt<5>("h014")) @[BinaryBuffer.scala 34:15]
      node _T_253 = tail(_T_252, 1) @[BinaryBuffer.scala 34:15]
      node _T_255 = bits(io.fastin, 47, 44) @[BinaryBuffer.scala 34:31]
      mem[_T_253] <= _T_255 @[BinaryBuffer.scala 34:20]
      node _T_257 = add(wPos, UInt<5>("h015")) @[BinaryBuffer.scala 34:15]
      node _T_258 = tail(_T_257, 1) @[BinaryBuffer.scala 34:15]
      node _T_260 = bits(io.fastin, 43, 40) @[BinaryBuffer.scala 34:31]
      mem[_T_258] <= _T_260 @[BinaryBuffer.scala 34:20]
      node _T_262 = add(wPos, UInt<5>("h016")) @[BinaryBuffer.scala 34:15]
      node _T_263 = tail(_T_262, 1) @[BinaryBuffer.scala 34:15]
      node _T_265 = bits(io.fastin, 39, 36) @[BinaryBuffer.scala 34:31]
      mem[_T_263] <= _T_265 @[BinaryBuffer.scala 34:20]
      node _T_267 = add(wPos, UInt<5>("h017")) @[BinaryBuffer.scala 34:15]
      node _T_268 = tail(_T_267, 1) @[BinaryBuffer.scala 34:15]
      node _T_270 = bits(io.fastin, 35, 32) @[BinaryBuffer.scala 34:31]
      mem[_T_268] <= _T_270 @[BinaryBuffer.scala 34:20]
      node _T_272 = add(wPos, UInt<5>("h018")) @[BinaryBuffer.scala 34:15]
      node _T_273 = tail(_T_272, 1) @[BinaryBuffer.scala 34:15]
      node _T_275 = bits(io.fastin, 31, 28) @[BinaryBuffer.scala 34:31]
      mem[_T_273] <= _T_275 @[BinaryBuffer.scala 34:20]
      node _T_277 = add(wPos, UInt<5>("h019")) @[BinaryBuffer.scala 34:15]
      node _T_278 = tail(_T_277, 1) @[BinaryBuffer.scala 34:15]
      node _T_280 = bits(io.fastin, 27, 24) @[BinaryBuffer.scala 34:31]
      mem[_T_278] <= _T_280 @[BinaryBuffer.scala 34:20]
      node _T_282 = add(wPos, UInt<5>("h01a")) @[BinaryBuffer.scala 34:15]
      node _T_283 = tail(_T_282, 1) @[BinaryBuffer.scala 34:15]
      node _T_285 = bits(io.fastin, 23, 20) @[BinaryBuffer.scala 34:31]
      mem[_T_283] <= _T_285 @[BinaryBuffer.scala 34:20]
      node _T_287 = add(wPos, UInt<5>("h01b")) @[BinaryBuffer.scala 34:15]
      node _T_288 = tail(_T_287, 1) @[BinaryBuffer.scala 34:15]
      node _T_290 = bits(io.fastin, 19, 16) @[BinaryBuffer.scala 34:31]
      mem[_T_288] <= _T_290 @[BinaryBuffer.scala 34:20]
      node _T_292 = add(wPos, UInt<5>("h01c")) @[BinaryBuffer.scala 34:15]
      node _T_293 = tail(_T_292, 1) @[BinaryBuffer.scala 34:15]
      node _T_295 = bits(io.fastin, 15, 12) @[BinaryBuffer.scala 34:31]
      mem[_T_293] <= _T_295 @[BinaryBuffer.scala 34:20]
      node _T_297 = add(wPos, UInt<5>("h01d")) @[BinaryBuffer.scala 34:15]
      node _T_298 = tail(_T_297, 1) @[BinaryBuffer.scala 34:15]
      node _T_300 = bits(io.fastin, 11, 8) @[BinaryBuffer.scala 34:31]
      mem[_T_298] <= _T_300 @[BinaryBuffer.scala 34:20]
      node _T_302 = add(wPos, UInt<5>("h01e")) @[BinaryBuffer.scala 34:15]
      node _T_303 = tail(_T_302, 1) @[BinaryBuffer.scala 34:15]
      node _T_305 = bits(io.fastin, 7, 4) @[BinaryBuffer.scala 34:31]
      mem[_T_303] <= _T_305 @[BinaryBuffer.scala 34:20]
      node _T_307 = add(wPos, UInt<5>("h01f")) @[BinaryBuffer.scala 34:15]
      node _T_308 = tail(_T_307, 1) @[BinaryBuffer.scala 34:15]
      node _T_310 = bits(io.fastin, 3, 0) @[BinaryBuffer.scala 34:31]
      mem[_T_308] <= _T_310 @[BinaryBuffer.scala 34:20]
      node _T_312 = add(wPos, UInt<6>("h020")) @[BinaryBuffer.scala 36:15]
      node _T_313 = tail(_T_312, 1) @[BinaryBuffer.scala 36:15]
      wPos <= _T_313 @[BinaryBuffer.scala 36:9]
      skip @[BinaryBuffer.scala 32:35]
    node _T_315 = eq(_T_150, UInt<1>("h00")) @[BinaryBuffer.scala 32:35]
    when _T_315 : @[BinaryBuffer.scala 37:5]
      when io.push : @[BinaryBuffer.scala 38:19]
        node _T_317 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 39:12]
        when _T_317 : @[BinaryBuffer.scala 39:25]
          mem[wPos] <= io.in @[BinaryBuffer.scala 40:19]
          node _T_320 = add(wPos, UInt<1>("h01")) @[BinaryBuffer.scala 41:22]
          node _T_321 = tail(_T_320, 1) @[BinaryBuffer.scala 41:22]
          wPos <= _T_321 @[BinaryBuffer.scala 41:14]
          skip @[BinaryBuffer.scala 39:25]
        node _T_323 = eq(_T_317, UInt<1>("h00")) @[BinaryBuffer.scala 39:25]
        when _T_323 : @[BinaryBuffer.scala 42:9]
          mem[0] <= io.in @[BinaryBuffer.scala 43:16]
          wPos <= UInt<1>("h01") @[BinaryBuffer.scala 44:14]
          rPos <= UInt<1>("h00") @[BinaryBuffer.scala 45:14]
          skip @[BinaryBuffer.scala 42:9]
        skip @[BinaryBuffer.scala 38:19]
      when io.pop : @[BinaryBuffer.scala 49:18]
        node _T_327 = eq(io.reset, UInt<1>("h00")) @[BinaryBuffer.scala 50:12]
        when _T_327 : @[BinaryBuffer.scala 50:25]
          node _T_329 = add(rPos, UInt<1>("h01")) @[BinaryBuffer.scala 51:22]
          node _T_330 = tail(_T_329, 1) @[BinaryBuffer.scala 51:22]
          rPos <= _T_330 @[BinaryBuffer.scala 51:14]
          skip @[BinaryBuffer.scala 50:25]
        node _T_332 = eq(_T_327, UInt<1>("h00")) @[BinaryBuffer.scala 50:25]
        when _T_332 : @[BinaryBuffer.scala 52:9]
          rPos <= UInt<1>("h01") @[BinaryBuffer.scala 53:14]
          wPos <= UInt<1>("h00") @[BinaryBuffer.scala 54:14]
          skip @[BinaryBuffer.scala 52:9]
        skip @[BinaryBuffer.scala 49:18]
      skip @[BinaryBuffer.scala 37:5]
    node _T_336 = eq(io.pop, UInt<1>("h00")) @[BinaryBuffer.scala 58:20]
    node _T_337 = and(io.reset, _T_336) @[BinaryBuffer.scala 58:17]
    node _T_339 = eq(io.push, UInt<1>("h00")) @[BinaryBuffer.scala 58:33]
    node _T_340 = and(_T_337, _T_339) @[BinaryBuffer.scala 58:30]
    when _T_340 : @[BinaryBuffer.scala 58:44]
      wPos <= UInt<1>("h00") @[BinaryBuffer.scala 59:9]
      rPos <= UInt<1>("h00") @[BinaryBuffer.scala 60:9]
      skip @[BinaryBuffer.scala 58:44]
    io.out <= catMem[rPos] @[BinaryBuffer.scala 63:9]
    
  module XNOR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in1 : UInt<32>, flip in2 : UInt<32>[4], out : UInt<32>[4]}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_21 = xor(io.in1, io.in2[0]) @[XNOR.scala 18:27]
    node _T_22 = not(_T_21) @[XNOR.scala 18:18]
    io.out[0] <= _T_22 @[XNOR.scala 18:15]
    node _T_23 = xor(io.in1, io.in2[1]) @[XNOR.scala 18:27]
    node _T_24 = not(_T_23) @[XNOR.scala 18:18]
    io.out[1] <= _T_24 @[XNOR.scala 18:15]
    node _T_25 = xor(io.in1, io.in2[2]) @[XNOR.scala 18:27]
    node _T_26 = not(_T_25) @[XNOR.scala 18:18]
    io.out[2] <= _T_26 @[XNOR.scala 18:15]
    node _T_27 = xor(io.in1, io.in2[3]) @[XNOR.scala 18:27]
    node _T_28 = not(_T_27) @[XNOR.scala 18:18]
    io.out[3] <= _T_28 @[XNOR.scala 18:15]
    
  module MeanBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>[4], flip cntInverse65536 : UInt<16>, flip reset : UInt<1>, out : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg acc : UInt<32>, clock @[MeanBuffer.scala 19:16]
    node _T_16 = gt(io.in[0], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_18 = sub(asSInt(UInt<1>("h00")), io.in[0]) @[MeanBuffer.scala 17:42]
    node _T_19 = tail(_T_18, 1) @[MeanBuffer.scala 17:42]
    node _T_20 = asSInt(_T_19) @[MeanBuffer.scala 17:42]
    node _T_21 = mux(_T_16, io.in[0], _T_20) @[MeanBuffer.scala 17:25]
    node _T_22 = asUInt(_T_21) @[MeanBuffer.scala 17:53]
    node _T_24 = gt(io.in[1], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_26 = sub(asSInt(UInt<1>("h00")), io.in[1]) @[MeanBuffer.scala 17:42]
    node _T_27 = tail(_T_26, 1) @[MeanBuffer.scala 17:42]
    node _T_28 = asSInt(_T_27) @[MeanBuffer.scala 17:42]
    node _T_29 = mux(_T_24, io.in[1], _T_28) @[MeanBuffer.scala 17:25]
    node _T_30 = asUInt(_T_29) @[MeanBuffer.scala 17:53]
    node _T_32 = gt(io.in[2], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_34 = sub(asSInt(UInt<1>("h00")), io.in[2]) @[MeanBuffer.scala 17:42]
    node _T_35 = tail(_T_34, 1) @[MeanBuffer.scala 17:42]
    node _T_36 = asSInt(_T_35) @[MeanBuffer.scala 17:42]
    node _T_37 = mux(_T_32, io.in[2], _T_36) @[MeanBuffer.scala 17:25]
    node _T_38 = asUInt(_T_37) @[MeanBuffer.scala 17:53]
    node _T_40 = gt(io.in[3], asSInt(UInt<1>("h00"))) @[MeanBuffer.scala 17:28]
    node _T_42 = sub(asSInt(UInt<1>("h00")), io.in[3]) @[MeanBuffer.scala 17:42]
    node _T_43 = tail(_T_42, 1) @[MeanBuffer.scala 17:42]
    node _T_44 = asSInt(_T_43) @[MeanBuffer.scala 17:42]
    node _T_45 = mux(_T_40, io.in[3], _T_44) @[MeanBuffer.scala 17:25]
    node _T_46 = asUInt(_T_45) @[MeanBuffer.scala 17:53]
    node _T_47 = add(_T_22, _T_30) @[ArraySum.scala 13:14]
    node _T_48 = tail(_T_47, 1) @[ArraySum.scala 13:14]
    node _T_49 = add(_T_38, _T_46) @[ArraySum.scala 13:14]
    node _T_50 = tail(_T_49, 1) @[ArraySum.scala 13:14]
    node _T_51 = add(_T_48, _T_50) @[ArraySum.scala 13:14]
    node absSum = tail(_T_51, 1) @[ArraySum.scala 13:14]
    node _T_53 = eq(io.reset, UInt<1>("h00")) @[MeanBuffer.scala 22:8]
    when _T_53 : @[MeanBuffer.scala 22:21]
      node _T_54 = add(acc, absSum) @[MeanBuffer.scala 23:16]
      node _T_55 = tail(_T_54, 1) @[MeanBuffer.scala 23:16]
      acc <= _T_55 @[MeanBuffer.scala 23:9]
      skip @[MeanBuffer.scala 22:21]
    node _T_57 = eq(_T_53, UInt<1>("h00")) @[MeanBuffer.scala 22:21]
    when _T_57 : @[MeanBuffer.scala 24:5]
      acc <= absSum @[MeanBuffer.scala 25:9]
      skip @[MeanBuffer.scala 24:5]
    node _T_58 = mul(acc, io.cntInverse65536) @[MeanBuffer.scala 27:18]
    node _T_59 = shr(_T_58, 16) @[MeanBuffer.scala 27:39]
    io.out <= _T_59 @[MeanBuffer.scala 27:10]
    
  module DelayedOutput : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip input : UInt<32>, flip update : UInt<1>, output : UInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg reg : UInt<32>, clock @[DelayedOutput.scala 17:14]
    io.output <= reg @[DelayedOutput.scala 18:12]
    when io.update : @[DelayedOutput.scala 19:18]
      reg <= io.input @[DelayedOutput.scala 20:8]
      skip @[DelayedOutput.scala 19:18]
    node _T_8 = eq(io.update, UInt<1>("h00")) @[DelayedOutput.scala 19:18]
    node _T_9 = and(_T_8, io.reset) @[DelayedOutput.scala 21:24]
    when _T_9 : @[DelayedOutput.scala 21:24]
      reg <= UInt<32>("h01") @[DelayedOutput.scala 22:8]
      skip @[DelayedOutput.scala 21:24]
    
  module MaxBuffer : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip reset : UInt<1>, flip en : UInt<1>, flip in : SInt<32>[4], flip offset : UInt<4>, out : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg idxReg : UInt<4>, clock @[MaxBuffer.scala 18:17]
    reg dataReg : SInt<32>, clock @[MaxBuffer.scala 19:18]
    io.out <= idxReg @[MaxBuffer.scala 21:9]
    node _T_18 = add(UInt<1>("h00"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_19 = tail(_T_18, 1) @[MaxBuffer.scala 32:56]
    node _T_21 = add(UInt<1>("h01"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_22 = tail(_T_21, 1) @[MaxBuffer.scala 32:56]
    node _T_24 = add(UInt<2>("h02"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_25 = tail(_T_24, 1) @[MaxBuffer.scala 32:56]
    node _T_27 = add(UInt<2>("h03"), io.offset) @[MaxBuffer.scala 32:56]
    node _T_28 = tail(_T_27, 1) @[MaxBuffer.scala 32:56]
    node _T_29 = gt(io.in[0], io.in[1]) @[MaxBuffer.scala 27:28]
    node _T_30 = mux(_T_29, _T_19, _T_22) @[MaxBuffer.scala 28:13]
    node _T_31 = mux(_T_29, io.in[0], io.in[1]) @[MaxBuffer.scala 28:47]
    node _T_32 = gt(io.in[2], io.in[3]) @[MaxBuffer.scala 27:28]
    node _T_33 = mux(_T_32, _T_25, _T_28) @[MaxBuffer.scala 28:13]
    node _T_34 = mux(_T_32, io.in[2], io.in[3]) @[MaxBuffer.scala 28:47]
    node _T_35 = gt(_T_31, _T_34) @[MaxBuffer.scala 27:28]
    node _T_36 = mux(_T_35, _T_30, _T_33) @[MaxBuffer.scala 28:13]
    node _T_37 = mux(_T_35, _T_31, _T_34) @[MaxBuffer.scala 28:47]
    node cmp2 = gt(dataReg, _T_37) @[MaxBuffer.scala 34:20]
    when io.en : @[MaxBuffer.scala 36:15]
      node _T_39 = eq(io.reset, UInt<1>("h00")) @[MaxBuffer.scala 37:10]
      when _T_39 : @[MaxBuffer.scala 37:23]
        node _T_40 = mux(cmp2, dataReg, _T_37) @[MaxBuffer.scala 38:21]
        dataReg <= _T_40 @[MaxBuffer.scala 38:15]
        node _T_41 = mux(cmp2, idxReg, _T_36) @[MaxBuffer.scala 39:19]
        idxReg <= _T_41 @[MaxBuffer.scala 39:14]
        skip @[MaxBuffer.scala 37:23]
      node _T_43 = eq(_T_39, UInt<1>("h00")) @[MaxBuffer.scala 37:23]
      when _T_43 : @[MaxBuffer.scala 40:7]
        dataReg <= _T_37 @[MaxBuffer.scala 41:15]
        idxReg <= _T_36 @[MaxBuffer.scala 42:13]
        skip @[MaxBuffer.scala 40:7]
      skip @[MaxBuffer.scala 36:15]
    
  module Accumulator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module Accumulator_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : SInt<32>, out : SInt<32>, flip sel : UInt<5>, flip en : UInt<1>, flip reset : UInt<1>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg accumulator : SInt<32>[32], clock @[Accumulator.scala 20:24]
    node _T_46 = eq(io.reset, UInt<1>("h00")) @[Accumulator.scala 23:17]
    node _T_47 = and(io.en, _T_46) @[Accumulator.scala 23:14]
    when _T_47 : @[Accumulator.scala 23:30]
      node _T_48 = add(accumulator[io.sel], io.in) @[Accumulator.scala 24:16]
      node _T_49 = tail(_T_48, 1) @[Accumulator.scala 24:16]
      node _T_50 = asSInt(_T_49) @[Accumulator.scala 24:16]
      accumulator[io.sel] <= _T_50 @[Accumulator.scala 24:9]
      skip @[Accumulator.scala 23:30]
    io.out <= accumulator[io.sel] @[Accumulator.scala 27:10]
    node _T_51 = and(io.en, io.reset) @[Accumulator.scala 29:14]
    when _T_51 : @[Accumulator.scala 29:26]
      node _T_53 = eq(UInt<1>("h00"), io.sel) @[Accumulator.scala 31:30]
      node _T_55 = mux(_T_53, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[0] <= _T_55 @[Accumulator.scala 31:21]
      node _T_57 = eq(UInt<1>("h01"), io.sel) @[Accumulator.scala 31:30]
      node _T_59 = mux(_T_57, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[1] <= _T_59 @[Accumulator.scala 31:21]
      node _T_61 = eq(UInt<2>("h02"), io.sel) @[Accumulator.scala 31:30]
      node _T_63 = mux(_T_61, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[2] <= _T_63 @[Accumulator.scala 31:21]
      node _T_65 = eq(UInt<2>("h03"), io.sel) @[Accumulator.scala 31:30]
      node _T_67 = mux(_T_65, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[3] <= _T_67 @[Accumulator.scala 31:21]
      node _T_69 = eq(UInt<3>("h04"), io.sel) @[Accumulator.scala 31:30]
      node _T_71 = mux(_T_69, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[4] <= _T_71 @[Accumulator.scala 31:21]
      node _T_73 = eq(UInt<3>("h05"), io.sel) @[Accumulator.scala 31:30]
      node _T_75 = mux(_T_73, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[5] <= _T_75 @[Accumulator.scala 31:21]
      node _T_77 = eq(UInt<3>("h06"), io.sel) @[Accumulator.scala 31:30]
      node _T_79 = mux(_T_77, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[6] <= _T_79 @[Accumulator.scala 31:21]
      node _T_81 = eq(UInt<3>("h07"), io.sel) @[Accumulator.scala 31:30]
      node _T_83 = mux(_T_81, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[7] <= _T_83 @[Accumulator.scala 31:21]
      node _T_85 = eq(UInt<4>("h08"), io.sel) @[Accumulator.scala 31:30]
      node _T_87 = mux(_T_85, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[8] <= _T_87 @[Accumulator.scala 31:21]
      node _T_89 = eq(UInt<4>("h09"), io.sel) @[Accumulator.scala 31:30]
      node _T_91 = mux(_T_89, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[9] <= _T_91 @[Accumulator.scala 31:21]
      node _T_93 = eq(UInt<4>("h0a"), io.sel) @[Accumulator.scala 31:30]
      node _T_95 = mux(_T_93, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[10] <= _T_95 @[Accumulator.scala 31:21]
      node _T_97 = eq(UInt<4>("h0b"), io.sel) @[Accumulator.scala 31:30]
      node _T_99 = mux(_T_97, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[11] <= _T_99 @[Accumulator.scala 31:21]
      node _T_101 = eq(UInt<4>("h0c"), io.sel) @[Accumulator.scala 31:30]
      node _T_103 = mux(_T_101, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[12] <= _T_103 @[Accumulator.scala 31:21]
      node _T_105 = eq(UInt<4>("h0d"), io.sel) @[Accumulator.scala 31:30]
      node _T_107 = mux(_T_105, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[13] <= _T_107 @[Accumulator.scala 31:21]
      node _T_109 = eq(UInt<4>("h0e"), io.sel) @[Accumulator.scala 31:30]
      node _T_111 = mux(_T_109, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[14] <= _T_111 @[Accumulator.scala 31:21]
      node _T_113 = eq(UInt<4>("h0f"), io.sel) @[Accumulator.scala 31:30]
      node _T_115 = mux(_T_113, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[15] <= _T_115 @[Accumulator.scala 31:21]
      node _T_117 = eq(UInt<5>("h010"), io.sel) @[Accumulator.scala 31:30]
      node _T_119 = mux(_T_117, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[16] <= _T_119 @[Accumulator.scala 31:21]
      node _T_121 = eq(UInt<5>("h011"), io.sel) @[Accumulator.scala 31:30]
      node _T_123 = mux(_T_121, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[17] <= _T_123 @[Accumulator.scala 31:21]
      node _T_125 = eq(UInt<5>("h012"), io.sel) @[Accumulator.scala 31:30]
      node _T_127 = mux(_T_125, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[18] <= _T_127 @[Accumulator.scala 31:21]
      node _T_129 = eq(UInt<5>("h013"), io.sel) @[Accumulator.scala 31:30]
      node _T_131 = mux(_T_129, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[19] <= _T_131 @[Accumulator.scala 31:21]
      node _T_133 = eq(UInt<5>("h014"), io.sel) @[Accumulator.scala 31:30]
      node _T_135 = mux(_T_133, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[20] <= _T_135 @[Accumulator.scala 31:21]
      node _T_137 = eq(UInt<5>("h015"), io.sel) @[Accumulator.scala 31:30]
      node _T_139 = mux(_T_137, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[21] <= _T_139 @[Accumulator.scala 31:21]
      node _T_141 = eq(UInt<5>("h016"), io.sel) @[Accumulator.scala 31:30]
      node _T_143 = mux(_T_141, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[22] <= _T_143 @[Accumulator.scala 31:21]
      node _T_145 = eq(UInt<5>("h017"), io.sel) @[Accumulator.scala 31:30]
      node _T_147 = mux(_T_145, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[23] <= _T_147 @[Accumulator.scala 31:21]
      node _T_149 = eq(UInt<5>("h018"), io.sel) @[Accumulator.scala 31:30]
      node _T_151 = mux(_T_149, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[24] <= _T_151 @[Accumulator.scala 31:21]
      node _T_153 = eq(UInt<5>("h019"), io.sel) @[Accumulator.scala 31:30]
      node _T_155 = mux(_T_153, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[25] <= _T_155 @[Accumulator.scala 31:21]
      node _T_157 = eq(UInt<5>("h01a"), io.sel) @[Accumulator.scala 31:30]
      node _T_159 = mux(_T_157, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[26] <= _T_159 @[Accumulator.scala 31:21]
      node _T_161 = eq(UInt<5>("h01b"), io.sel) @[Accumulator.scala 31:30]
      node _T_163 = mux(_T_161, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[27] <= _T_163 @[Accumulator.scala 31:21]
      node _T_165 = eq(UInt<5>("h01c"), io.sel) @[Accumulator.scala 31:30]
      node _T_167 = mux(_T_165, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[28] <= _T_167 @[Accumulator.scala 31:21]
      node _T_169 = eq(UInt<5>("h01d"), io.sel) @[Accumulator.scala 31:30]
      node _T_171 = mux(_T_169, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[29] <= _T_171 @[Accumulator.scala 31:21]
      node _T_173 = eq(UInt<5>("h01e"), io.sel) @[Accumulator.scala 31:30]
      node _T_175 = mux(_T_173, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[30] <= _T_175 @[Accumulator.scala 31:21]
      node _T_177 = eq(UInt<5>("h01f"), io.sel) @[Accumulator.scala 31:30]
      node _T_179 = mux(_T_177, io.in, asSInt(UInt<1>("h00"))) @[Accumulator.scala 31:26]
      accumulator[31] <= _T_179 @[Accumulator.scala 31:21]
      skip @[Accumulator.scala 29:26]
    
  module MulAdd_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : SInt<16>, flip b : SInt<16>, flip m : UInt<32>, flip c : SInt<16>, r : SInt<32>}
    
    clock is invalid
    reset is invalid
    io is invalid
    node _T_7 = mul(io.a, io.b) @[MulAdd.scala 17:13]
    node _T_8 = cvt(io.m) @[MulAdd.scala 17:18]
    node _T_9 = mul(_T_7, _T_8) @[MulAdd.scala 17:18]
    node _T_10 = tail(_T_9, 1) @[MulAdd.scala 17:18]
    node _T_11 = asSInt(_T_10) @[MulAdd.scala 17:18]
    node _T_12 = add(_T_11, io.c) @[MulAdd.scala 17:23]
    node _T_13 = tail(_T_12, 1) @[MulAdd.scala 17:23]
    node _T_14 = asSInt(_T_13) @[MulAdd.scala 17:23]
    io.r <= _T_14 @[MulAdd.scala 17:7]
    
  module XNORNetInference : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<128>, flip inputPush : UInt<1>, flip inputBufferPush : UInt<1>, flip inputBufferPop : UInt<1>, flip inputBufferReset : UInt<1>, flip memAddr : UInt<8>, memOut : UInt<128>, flip memWen : UInt<1>, flip memIn : UInt<128>, flip memWAddr : UInt<8>, flip accEn : UInt<1>, flip accSel : UInt<5>, flip accReset : UInt<1>, flip maxReset : UInt<1>, flip maxEn : UInt<1>, flip maxOffset : UInt<4>, flip featureNumInverse65536 : UInt<16>, flip meanReset : UInt<1>, flip meanUpdate : UInt<1>, result : UInt<4>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst mem of AggregateMem @[XNORNetInference.scala 24:17]
    mem.io is invalid
    mem.clock <= clock
    mem.reset <= reset
    mem.io.addr <= io.memAddr @[XNORNetInference.scala 61:14]
    io.memOut <= mem.io.out @[XNORNetInference.scala 62:12]
    mem.io.ren <= UInt<1>("h01") @[XNORNetInference.scala 63:13]
    mem.io.wen <= io.memWen @[XNORNetInference.scala 64:13]
    mem.io.in <= io.memIn @[XNORNetInference.scala 65:12]
    mem.io.waddr <= io.memWAddr @[XNORNetInference.scala 66:15]
    wire inputWire : UInt<4> @[XNORNetInference.scala 68:21]
    inputWire is invalid @[XNORNetInference.scala 68:21]
    inst binaryBuffer of BinaryBuffer @[XNORNetInference.scala 70:26]
    binaryBuffer.io is invalid
    binaryBuffer.clock <= clock
    binaryBuffer.reset <= reset
    binaryBuffer.io.in <= inputWire @[XNORNetInference.scala 75:21]
    binaryBuffer.io.push <= io.inputBufferPush @[XNORNetInference.scala 76:23]
    binaryBuffer.io.pop <= io.inputBufferPop @[XNORNetInference.scala 77:22]
    binaryBuffer.io.reset <= io.inputBufferReset @[XNORNetInference.scala 78:24]
    binaryBuffer.io.fastpush <= io.inputPush @[XNORNetInference.scala 79:27]
    binaryBuffer.io.fastin <= io.input @[XNORNetInference.scala 80:25]
    inst xnor of XNOR @[XNORNetInference.scala 84:18]
    xnor.io is invalid
    xnor.clock <= clock
    xnor.reset <= reset
    xnor.io.in1 <= binaryBuffer.io.out @[XNORNetInference.scala 87:14]
    wire _T_34 : UInt<32>[4] @[XNORNetInference.scala 88:35]
    _T_34 is invalid @[XNORNetInference.scala 88:35]
    wire _T_47 : UInt<128>
    _T_47 is invalid
    _T_47 <= mem.io.out
    node _T_48 = bits(_T_47, 31, 0) @[XNORNetInference.scala 88:35]
    _T_34[0] <= _T_48 @[XNORNetInference.scala 88:35]
    node _T_49 = bits(_T_47, 63, 32) @[XNORNetInference.scala 88:35]
    _T_34[1] <= _T_49 @[XNORNetInference.scala 88:35]
    node _T_50 = bits(_T_47, 95, 64) @[XNORNetInference.scala 88:35]
    _T_34[2] <= _T_50 @[XNORNetInference.scala 88:35]
    node _T_51 = bits(_T_47, 127, 96) @[XNORNetInference.scala 88:35]
    _T_34[3] <= _T_51 @[XNORNetInference.scala 88:35]
    xnor.io.in2[0] <= _T_34[0] @[XNORNetInference.scala 88:14]
    xnor.io.in2[1] <= _T_34[1] @[XNORNetInference.scala 88:14]
    xnor.io.in2[2] <= _T_34[2] @[XNORNetInference.scala 88:14]
    xnor.io.in2[3] <= _T_34[3] @[XNORNetInference.scala 88:14]
    inst meanBuffer of MeanBuffer @[XNORNetInference.scala 93:24]
    meanBuffer.io is invalid
    meanBuffer.clock <= clock
    meanBuffer.reset <= reset
    inst mean of DelayedOutput @[XNORNetInference.scala 100:18]
    mean.io is invalid
    mean.clock <= clock
    mean.reset <= reset
    mean.io.update <= io.meanUpdate @[XNORNetInference.scala 101:17]
    mean.io.reset <= io.meanReset @[XNORNetInference.scala 102:16]
    mean.io.input <= meanBuffer.io.out @[XNORNetInference.scala 103:16]
    inst maxModule of MaxBuffer @[XNORNetInference.scala 107:23]
    maxModule.io is invalid
    maxModule.clock <= clock
    maxModule.reset <= reset
    maxModule.io.en <= io.maxEn @[XNORNetInference.scala 111:18]
    maxModule.io.reset <= io.maxReset @[XNORNetInference.scala 112:21]
    maxModule.io.offset <= io.maxOffset @[XNORNetInference.scala 113:22]
    io.result <= maxModule.io.out @[XNORNetInference.scala 114:12]
    inst Accumulator of Accumulator @[XNORNetInference.scala 119:21]
    Accumulator.io is invalid
    Accumulator.clock <= clock
    Accumulator.reset <= reset
    node _T_52 = bits(xnor.io.out[0], 3, 0) @[BitSum.scala 31:51]
    node _T_53 = bits(xnor.io.out[0], 7, 4) @[BitSum.scala 31:51]
    node _T_54 = bits(xnor.io.out[0], 11, 8) @[BitSum.scala 31:51]
    node _T_55 = bits(xnor.io.out[0], 15, 12) @[BitSum.scala 31:51]
    node _T_56 = bits(xnor.io.out[0], 19, 16) @[BitSum.scala 31:51]
    node _T_57 = bits(xnor.io.out[0], 23, 20) @[BitSum.scala 31:51]
    node _T_58 = bits(xnor.io.out[0], 27, 24) @[BitSum.scala 31:51]
    node _T_59 = bits(xnor.io.out[0], 31, 28) @[BitSum.scala 31:51]
    reg _T_62 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_65 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_68 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_71 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_74 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_77 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_80 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_83 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_86 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_89 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_92 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_95 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_98 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_101 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_104 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_107 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_110 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_110 is invalid @[BitSum.scala 11:24]
    _T_110[0] <= _T_62 @[BitSum.scala 11:24]
    _T_110[1] <= _T_65 @[BitSum.scala 11:24]
    _T_110[2] <= _T_68 @[BitSum.scala 11:24]
    _T_110[3] <= _T_71 @[BitSum.scala 11:24]
    _T_110[4] <= _T_74 @[BitSum.scala 11:24]
    _T_110[5] <= _T_77 @[BitSum.scala 11:24]
    _T_110[6] <= _T_80 @[BitSum.scala 11:24]
    _T_110[7] <= _T_83 @[BitSum.scala 11:24]
    _T_110[8] <= _T_86 @[BitSum.scala 11:24]
    _T_110[9] <= _T_89 @[BitSum.scala 11:24]
    _T_110[10] <= _T_92 @[BitSum.scala 11:24]
    _T_110[11] <= _T_95 @[BitSum.scala 11:24]
    _T_110[12] <= _T_98 @[BitSum.scala 11:24]
    _T_110[13] <= _T_101 @[BitSum.scala 11:24]
    _T_110[14] <= _T_104 @[BitSum.scala 11:24]
    _T_110[15] <= _T_107 @[BitSum.scala 11:24]
    reg _T_132 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_135 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_138 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_141 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_144 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_147 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_150 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_153 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_156 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_159 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_162 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_165 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_168 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_171 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_174 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_177 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_180 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_180 is invalid @[BitSum.scala 11:24]
    _T_180[0] <= _T_132 @[BitSum.scala 11:24]
    _T_180[1] <= _T_135 @[BitSum.scala 11:24]
    _T_180[2] <= _T_138 @[BitSum.scala 11:24]
    _T_180[3] <= _T_141 @[BitSum.scala 11:24]
    _T_180[4] <= _T_144 @[BitSum.scala 11:24]
    _T_180[5] <= _T_147 @[BitSum.scala 11:24]
    _T_180[6] <= _T_150 @[BitSum.scala 11:24]
    _T_180[7] <= _T_153 @[BitSum.scala 11:24]
    _T_180[8] <= _T_156 @[BitSum.scala 11:24]
    _T_180[9] <= _T_159 @[BitSum.scala 11:24]
    _T_180[10] <= _T_162 @[BitSum.scala 11:24]
    _T_180[11] <= _T_165 @[BitSum.scala 11:24]
    _T_180[12] <= _T_168 @[BitSum.scala 11:24]
    _T_180[13] <= _T_171 @[BitSum.scala 11:24]
    _T_180[14] <= _T_174 @[BitSum.scala 11:24]
    _T_180[15] <= _T_177 @[BitSum.scala 11:24]
    reg _T_202 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_205 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_208 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_211 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_214 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_217 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_220 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_223 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_226 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_229 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_232 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_235 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_238 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_241 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_244 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_247 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_250 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_250 is invalid @[BitSum.scala 11:24]
    _T_250[0] <= _T_202 @[BitSum.scala 11:24]
    _T_250[1] <= _T_205 @[BitSum.scala 11:24]
    _T_250[2] <= _T_208 @[BitSum.scala 11:24]
    _T_250[3] <= _T_211 @[BitSum.scala 11:24]
    _T_250[4] <= _T_214 @[BitSum.scala 11:24]
    _T_250[5] <= _T_217 @[BitSum.scala 11:24]
    _T_250[6] <= _T_220 @[BitSum.scala 11:24]
    _T_250[7] <= _T_223 @[BitSum.scala 11:24]
    _T_250[8] <= _T_226 @[BitSum.scala 11:24]
    _T_250[9] <= _T_229 @[BitSum.scala 11:24]
    _T_250[10] <= _T_232 @[BitSum.scala 11:24]
    _T_250[11] <= _T_235 @[BitSum.scala 11:24]
    _T_250[12] <= _T_238 @[BitSum.scala 11:24]
    _T_250[13] <= _T_241 @[BitSum.scala 11:24]
    _T_250[14] <= _T_244 @[BitSum.scala 11:24]
    _T_250[15] <= _T_247 @[BitSum.scala 11:24]
    reg _T_272 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_275 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_278 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_281 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_284 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_287 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_290 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_293 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_296 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_299 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_302 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_305 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_308 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_311 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_314 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_317 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_320 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_320 is invalid @[BitSum.scala 11:24]
    _T_320[0] <= _T_272 @[BitSum.scala 11:24]
    _T_320[1] <= _T_275 @[BitSum.scala 11:24]
    _T_320[2] <= _T_278 @[BitSum.scala 11:24]
    _T_320[3] <= _T_281 @[BitSum.scala 11:24]
    _T_320[4] <= _T_284 @[BitSum.scala 11:24]
    _T_320[5] <= _T_287 @[BitSum.scala 11:24]
    _T_320[6] <= _T_290 @[BitSum.scala 11:24]
    _T_320[7] <= _T_293 @[BitSum.scala 11:24]
    _T_320[8] <= _T_296 @[BitSum.scala 11:24]
    _T_320[9] <= _T_299 @[BitSum.scala 11:24]
    _T_320[10] <= _T_302 @[BitSum.scala 11:24]
    _T_320[11] <= _T_305 @[BitSum.scala 11:24]
    _T_320[12] <= _T_308 @[BitSum.scala 11:24]
    _T_320[13] <= _T_311 @[BitSum.scala 11:24]
    _T_320[14] <= _T_314 @[BitSum.scala 11:24]
    _T_320[15] <= _T_317 @[BitSum.scala 11:24]
    reg _T_342 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_345 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_348 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_351 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_354 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_357 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_360 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_363 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_366 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_369 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_372 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_375 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_378 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_381 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_384 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_387 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_390 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_390 is invalid @[BitSum.scala 11:24]
    _T_390[0] <= _T_342 @[BitSum.scala 11:24]
    _T_390[1] <= _T_345 @[BitSum.scala 11:24]
    _T_390[2] <= _T_348 @[BitSum.scala 11:24]
    _T_390[3] <= _T_351 @[BitSum.scala 11:24]
    _T_390[4] <= _T_354 @[BitSum.scala 11:24]
    _T_390[5] <= _T_357 @[BitSum.scala 11:24]
    _T_390[6] <= _T_360 @[BitSum.scala 11:24]
    _T_390[7] <= _T_363 @[BitSum.scala 11:24]
    _T_390[8] <= _T_366 @[BitSum.scala 11:24]
    _T_390[9] <= _T_369 @[BitSum.scala 11:24]
    _T_390[10] <= _T_372 @[BitSum.scala 11:24]
    _T_390[11] <= _T_375 @[BitSum.scala 11:24]
    _T_390[12] <= _T_378 @[BitSum.scala 11:24]
    _T_390[13] <= _T_381 @[BitSum.scala 11:24]
    _T_390[14] <= _T_384 @[BitSum.scala 11:24]
    _T_390[15] <= _T_387 @[BitSum.scala 11:24]
    reg _T_412 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_415 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_418 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_421 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_424 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_427 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_430 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_433 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_436 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_439 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_442 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_445 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_448 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_451 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_454 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_457 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_460 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_460 is invalid @[BitSum.scala 11:24]
    _T_460[0] <= _T_412 @[BitSum.scala 11:24]
    _T_460[1] <= _T_415 @[BitSum.scala 11:24]
    _T_460[2] <= _T_418 @[BitSum.scala 11:24]
    _T_460[3] <= _T_421 @[BitSum.scala 11:24]
    _T_460[4] <= _T_424 @[BitSum.scala 11:24]
    _T_460[5] <= _T_427 @[BitSum.scala 11:24]
    _T_460[6] <= _T_430 @[BitSum.scala 11:24]
    _T_460[7] <= _T_433 @[BitSum.scala 11:24]
    _T_460[8] <= _T_436 @[BitSum.scala 11:24]
    _T_460[9] <= _T_439 @[BitSum.scala 11:24]
    _T_460[10] <= _T_442 @[BitSum.scala 11:24]
    _T_460[11] <= _T_445 @[BitSum.scala 11:24]
    _T_460[12] <= _T_448 @[BitSum.scala 11:24]
    _T_460[13] <= _T_451 @[BitSum.scala 11:24]
    _T_460[14] <= _T_454 @[BitSum.scala 11:24]
    _T_460[15] <= _T_457 @[BitSum.scala 11:24]
    reg _T_482 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_485 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_488 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_491 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_494 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_497 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_500 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_503 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_506 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_509 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_512 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_515 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_518 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_521 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_524 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_527 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_530 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_530 is invalid @[BitSum.scala 11:24]
    _T_530[0] <= _T_482 @[BitSum.scala 11:24]
    _T_530[1] <= _T_485 @[BitSum.scala 11:24]
    _T_530[2] <= _T_488 @[BitSum.scala 11:24]
    _T_530[3] <= _T_491 @[BitSum.scala 11:24]
    _T_530[4] <= _T_494 @[BitSum.scala 11:24]
    _T_530[5] <= _T_497 @[BitSum.scala 11:24]
    _T_530[6] <= _T_500 @[BitSum.scala 11:24]
    _T_530[7] <= _T_503 @[BitSum.scala 11:24]
    _T_530[8] <= _T_506 @[BitSum.scala 11:24]
    _T_530[9] <= _T_509 @[BitSum.scala 11:24]
    _T_530[10] <= _T_512 @[BitSum.scala 11:24]
    _T_530[11] <= _T_515 @[BitSum.scala 11:24]
    _T_530[12] <= _T_518 @[BitSum.scala 11:24]
    _T_530[13] <= _T_521 @[BitSum.scala 11:24]
    _T_530[14] <= _T_524 @[BitSum.scala 11:24]
    _T_530[15] <= _T_527 @[BitSum.scala 11:24]
    reg _T_552 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_555 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_558 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_561 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_564 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_567 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_570 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_573 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_576 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_579 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_582 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_585 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_588 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_591 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_594 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_597 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_600 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_600 is invalid @[BitSum.scala 11:24]
    _T_600[0] <= _T_552 @[BitSum.scala 11:24]
    _T_600[1] <= _T_555 @[BitSum.scala 11:24]
    _T_600[2] <= _T_558 @[BitSum.scala 11:24]
    _T_600[3] <= _T_561 @[BitSum.scala 11:24]
    _T_600[4] <= _T_564 @[BitSum.scala 11:24]
    _T_600[5] <= _T_567 @[BitSum.scala 11:24]
    _T_600[6] <= _T_570 @[BitSum.scala 11:24]
    _T_600[7] <= _T_573 @[BitSum.scala 11:24]
    _T_600[8] <= _T_576 @[BitSum.scala 11:24]
    _T_600[9] <= _T_579 @[BitSum.scala 11:24]
    _T_600[10] <= _T_582 @[BitSum.scala 11:24]
    _T_600[11] <= _T_585 @[BitSum.scala 11:24]
    _T_600[12] <= _T_588 @[BitSum.scala 11:24]
    _T_600[13] <= _T_591 @[BitSum.scala 11:24]
    _T_600[14] <= _T_594 @[BitSum.scala 11:24]
    _T_600[15] <= _T_597 @[BitSum.scala 11:24]
    node _T_620 = add(_T_110[_T_52], _T_180[_T_53]) @[BitSum.scala 18:14]
    node _T_621 = tail(_T_620, 1) @[BitSum.scala 18:14]
    node _T_622 = asSInt(_T_621) @[BitSum.scala 18:14]
    node _T_623 = add(_T_250[_T_54], _T_320[_T_55]) @[BitSum.scala 18:14]
    node _T_624 = tail(_T_623, 1) @[BitSum.scala 18:14]
    node _T_625 = asSInt(_T_624) @[BitSum.scala 18:14]
    node _T_626 = add(_T_390[_T_56], _T_460[_T_57]) @[BitSum.scala 18:14]
    node _T_627 = tail(_T_626, 1) @[BitSum.scala 18:14]
    node _T_628 = asSInt(_T_627) @[BitSum.scala 18:14]
    node _T_629 = add(_T_530[_T_58], _T_600[_T_59]) @[BitSum.scala 18:14]
    node _T_630 = tail(_T_629, 1) @[BitSum.scala 18:14]
    node _T_631 = asSInt(_T_630) @[BitSum.scala 18:14]
    node _T_632 = add(_T_622, _T_625) @[BitSum.scala 18:14]
    node _T_633 = tail(_T_632, 1) @[BitSum.scala 18:14]
    node _T_634 = asSInt(_T_633) @[BitSum.scala 18:14]
    node _T_635 = add(_T_628, _T_631) @[BitSum.scala 18:14]
    node _T_636 = tail(_T_635, 1) @[BitSum.scala 18:14]
    node _T_637 = asSInt(_T_636) @[BitSum.scala 18:14]
    node _T_638 = add(_T_634, _T_637) @[BitSum.scala 18:14]
    node _T_639 = tail(_T_638, 1) @[BitSum.scala 18:14]
    node _T_640 = asSInt(_T_639) @[BitSum.scala 18:14]
    Accumulator.io.in <= _T_640 @[XNORNetInference.scala 122:15]
    Accumulator.io.sel <= io.accSel @[XNORNetInference.scala 126:16]
    Accumulator.io.reset <= io.accReset @[XNORNetInference.scala 127:18]
    Accumulator.io.en <= io.accEn @[XNORNetInference.scala 128:14]
    inst MulAdd of MulAdd @[XNORNetInference.scala 131:24]
    MulAdd.io is invalid
    MulAdd.clock <= clock
    MulAdd.reset <= reset
    node _T_641 = bits(mem.io.out, 127, 96) @[XNORNetInference.scala 139:30]
    node _T_642 = bits(_T_641, 31, 16) @[XNORNetInference.scala 141:28]
    node _T_643 = asSInt(_T_642) @[XNORNetInference.scala 141:101]
    MulAdd.io.a <= _T_643 @[XNORNetInference.scala 141:19]
    node _T_644 = bits(_T_641, 15, 0) @[XNORNetInference.scala 142:28]
    node _T_645 = asSInt(_T_644) @[XNORNetInference.scala 142:71]
    MulAdd.io.c <= _T_645 @[XNORNetInference.scala 142:19]
    MulAdd.io.m <= mean.io.output @[XNORNetInference.scala 152:16]
    MulAdd.io.b <= Accumulator.io.out @[XNORNetInference.scala 153:16]
    meanBuffer.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 154:24]
    maxModule.io.in[0] <= MulAdd.io.r @[XNORNetInference.scala 155:23]
    node signs_0 = bits(MulAdd.io.r, 31, 31) @[XNORNetInference.scala 156:16]
    inst Accumulator_1 of Accumulator_1 @[XNORNetInference.scala 119:21]
    Accumulator_1.io is invalid
    Accumulator_1.clock <= clock
    Accumulator_1.reset <= reset
    node _T_646 = bits(xnor.io.out[1], 3, 0) @[BitSum.scala 31:51]
    node _T_647 = bits(xnor.io.out[1], 7, 4) @[BitSum.scala 31:51]
    node _T_648 = bits(xnor.io.out[1], 11, 8) @[BitSum.scala 31:51]
    node _T_649 = bits(xnor.io.out[1], 15, 12) @[BitSum.scala 31:51]
    node _T_650 = bits(xnor.io.out[1], 19, 16) @[BitSum.scala 31:51]
    node _T_651 = bits(xnor.io.out[1], 23, 20) @[BitSum.scala 31:51]
    node _T_652 = bits(xnor.io.out[1], 27, 24) @[BitSum.scala 31:51]
    node _T_653 = bits(xnor.io.out[1], 31, 28) @[BitSum.scala 31:51]
    reg _T_656 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_659 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_662 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_665 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_668 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_671 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_674 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_677 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_680 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_683 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_686 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_689 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_692 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_695 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_698 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_701 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_704 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_704 is invalid @[BitSum.scala 11:24]
    _T_704[0] <= _T_656 @[BitSum.scala 11:24]
    _T_704[1] <= _T_659 @[BitSum.scala 11:24]
    _T_704[2] <= _T_662 @[BitSum.scala 11:24]
    _T_704[3] <= _T_665 @[BitSum.scala 11:24]
    _T_704[4] <= _T_668 @[BitSum.scala 11:24]
    _T_704[5] <= _T_671 @[BitSum.scala 11:24]
    _T_704[6] <= _T_674 @[BitSum.scala 11:24]
    _T_704[7] <= _T_677 @[BitSum.scala 11:24]
    _T_704[8] <= _T_680 @[BitSum.scala 11:24]
    _T_704[9] <= _T_683 @[BitSum.scala 11:24]
    _T_704[10] <= _T_686 @[BitSum.scala 11:24]
    _T_704[11] <= _T_689 @[BitSum.scala 11:24]
    _T_704[12] <= _T_692 @[BitSum.scala 11:24]
    _T_704[13] <= _T_695 @[BitSum.scala 11:24]
    _T_704[14] <= _T_698 @[BitSum.scala 11:24]
    _T_704[15] <= _T_701 @[BitSum.scala 11:24]
    reg _T_726 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_729 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_732 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_735 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_738 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_741 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_744 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_747 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_750 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_753 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_756 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_759 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_762 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_765 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_768 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_771 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_774 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_774 is invalid @[BitSum.scala 11:24]
    _T_774[0] <= _T_726 @[BitSum.scala 11:24]
    _T_774[1] <= _T_729 @[BitSum.scala 11:24]
    _T_774[2] <= _T_732 @[BitSum.scala 11:24]
    _T_774[3] <= _T_735 @[BitSum.scala 11:24]
    _T_774[4] <= _T_738 @[BitSum.scala 11:24]
    _T_774[5] <= _T_741 @[BitSum.scala 11:24]
    _T_774[6] <= _T_744 @[BitSum.scala 11:24]
    _T_774[7] <= _T_747 @[BitSum.scala 11:24]
    _T_774[8] <= _T_750 @[BitSum.scala 11:24]
    _T_774[9] <= _T_753 @[BitSum.scala 11:24]
    _T_774[10] <= _T_756 @[BitSum.scala 11:24]
    _T_774[11] <= _T_759 @[BitSum.scala 11:24]
    _T_774[12] <= _T_762 @[BitSum.scala 11:24]
    _T_774[13] <= _T_765 @[BitSum.scala 11:24]
    _T_774[14] <= _T_768 @[BitSum.scala 11:24]
    _T_774[15] <= _T_771 @[BitSum.scala 11:24]
    reg _T_796 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_799 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_802 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_805 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_808 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_811 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_814 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_817 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_820 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_823 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_826 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_829 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_832 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_835 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_838 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_841 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_844 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_844 is invalid @[BitSum.scala 11:24]
    _T_844[0] <= _T_796 @[BitSum.scala 11:24]
    _T_844[1] <= _T_799 @[BitSum.scala 11:24]
    _T_844[2] <= _T_802 @[BitSum.scala 11:24]
    _T_844[3] <= _T_805 @[BitSum.scala 11:24]
    _T_844[4] <= _T_808 @[BitSum.scala 11:24]
    _T_844[5] <= _T_811 @[BitSum.scala 11:24]
    _T_844[6] <= _T_814 @[BitSum.scala 11:24]
    _T_844[7] <= _T_817 @[BitSum.scala 11:24]
    _T_844[8] <= _T_820 @[BitSum.scala 11:24]
    _T_844[9] <= _T_823 @[BitSum.scala 11:24]
    _T_844[10] <= _T_826 @[BitSum.scala 11:24]
    _T_844[11] <= _T_829 @[BitSum.scala 11:24]
    _T_844[12] <= _T_832 @[BitSum.scala 11:24]
    _T_844[13] <= _T_835 @[BitSum.scala 11:24]
    _T_844[14] <= _T_838 @[BitSum.scala 11:24]
    _T_844[15] <= _T_841 @[BitSum.scala 11:24]
    reg _T_866 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_869 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_872 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_875 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_878 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_881 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_884 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_887 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_890 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_893 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_896 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_899 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_902 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_905 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_908 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_911 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_914 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_914 is invalid @[BitSum.scala 11:24]
    _T_914[0] <= _T_866 @[BitSum.scala 11:24]
    _T_914[1] <= _T_869 @[BitSum.scala 11:24]
    _T_914[2] <= _T_872 @[BitSum.scala 11:24]
    _T_914[3] <= _T_875 @[BitSum.scala 11:24]
    _T_914[4] <= _T_878 @[BitSum.scala 11:24]
    _T_914[5] <= _T_881 @[BitSum.scala 11:24]
    _T_914[6] <= _T_884 @[BitSum.scala 11:24]
    _T_914[7] <= _T_887 @[BitSum.scala 11:24]
    _T_914[8] <= _T_890 @[BitSum.scala 11:24]
    _T_914[9] <= _T_893 @[BitSum.scala 11:24]
    _T_914[10] <= _T_896 @[BitSum.scala 11:24]
    _T_914[11] <= _T_899 @[BitSum.scala 11:24]
    _T_914[12] <= _T_902 @[BitSum.scala 11:24]
    _T_914[13] <= _T_905 @[BitSum.scala 11:24]
    _T_914[14] <= _T_908 @[BitSum.scala 11:24]
    _T_914[15] <= _T_911 @[BitSum.scala 11:24]
    reg _T_936 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_939 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_942 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_945 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_948 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_951 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_954 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_957 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_960 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_963 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_966 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_969 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_972 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_975 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_978 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_981 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_984 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_984 is invalid @[BitSum.scala 11:24]
    _T_984[0] <= _T_936 @[BitSum.scala 11:24]
    _T_984[1] <= _T_939 @[BitSum.scala 11:24]
    _T_984[2] <= _T_942 @[BitSum.scala 11:24]
    _T_984[3] <= _T_945 @[BitSum.scala 11:24]
    _T_984[4] <= _T_948 @[BitSum.scala 11:24]
    _T_984[5] <= _T_951 @[BitSum.scala 11:24]
    _T_984[6] <= _T_954 @[BitSum.scala 11:24]
    _T_984[7] <= _T_957 @[BitSum.scala 11:24]
    _T_984[8] <= _T_960 @[BitSum.scala 11:24]
    _T_984[9] <= _T_963 @[BitSum.scala 11:24]
    _T_984[10] <= _T_966 @[BitSum.scala 11:24]
    _T_984[11] <= _T_969 @[BitSum.scala 11:24]
    _T_984[12] <= _T_972 @[BitSum.scala 11:24]
    _T_984[13] <= _T_975 @[BitSum.scala 11:24]
    _T_984[14] <= _T_978 @[BitSum.scala 11:24]
    _T_984[15] <= _T_981 @[BitSum.scala 11:24]
    reg _T_1006 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1009 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1012 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1015 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1018 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1021 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1024 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1027 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1030 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1033 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1036 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1039 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1042 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1045 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1048 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1051 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1054 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1054 is invalid @[BitSum.scala 11:24]
    _T_1054[0] <= _T_1006 @[BitSum.scala 11:24]
    _T_1054[1] <= _T_1009 @[BitSum.scala 11:24]
    _T_1054[2] <= _T_1012 @[BitSum.scala 11:24]
    _T_1054[3] <= _T_1015 @[BitSum.scala 11:24]
    _T_1054[4] <= _T_1018 @[BitSum.scala 11:24]
    _T_1054[5] <= _T_1021 @[BitSum.scala 11:24]
    _T_1054[6] <= _T_1024 @[BitSum.scala 11:24]
    _T_1054[7] <= _T_1027 @[BitSum.scala 11:24]
    _T_1054[8] <= _T_1030 @[BitSum.scala 11:24]
    _T_1054[9] <= _T_1033 @[BitSum.scala 11:24]
    _T_1054[10] <= _T_1036 @[BitSum.scala 11:24]
    _T_1054[11] <= _T_1039 @[BitSum.scala 11:24]
    _T_1054[12] <= _T_1042 @[BitSum.scala 11:24]
    _T_1054[13] <= _T_1045 @[BitSum.scala 11:24]
    _T_1054[14] <= _T_1048 @[BitSum.scala 11:24]
    _T_1054[15] <= _T_1051 @[BitSum.scala 11:24]
    reg _T_1076 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1079 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1082 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1085 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1088 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1091 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1094 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1097 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1100 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1103 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1106 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1109 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1112 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1115 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1118 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1121 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1124 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1124 is invalid @[BitSum.scala 11:24]
    _T_1124[0] <= _T_1076 @[BitSum.scala 11:24]
    _T_1124[1] <= _T_1079 @[BitSum.scala 11:24]
    _T_1124[2] <= _T_1082 @[BitSum.scala 11:24]
    _T_1124[3] <= _T_1085 @[BitSum.scala 11:24]
    _T_1124[4] <= _T_1088 @[BitSum.scala 11:24]
    _T_1124[5] <= _T_1091 @[BitSum.scala 11:24]
    _T_1124[6] <= _T_1094 @[BitSum.scala 11:24]
    _T_1124[7] <= _T_1097 @[BitSum.scala 11:24]
    _T_1124[8] <= _T_1100 @[BitSum.scala 11:24]
    _T_1124[9] <= _T_1103 @[BitSum.scala 11:24]
    _T_1124[10] <= _T_1106 @[BitSum.scala 11:24]
    _T_1124[11] <= _T_1109 @[BitSum.scala 11:24]
    _T_1124[12] <= _T_1112 @[BitSum.scala 11:24]
    _T_1124[13] <= _T_1115 @[BitSum.scala 11:24]
    _T_1124[14] <= _T_1118 @[BitSum.scala 11:24]
    _T_1124[15] <= _T_1121 @[BitSum.scala 11:24]
    reg _T_1146 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1149 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1152 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1155 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1158 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1161 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1164 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1167 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1170 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1173 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1176 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1179 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1182 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1185 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1188 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1191 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1194 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1194 is invalid @[BitSum.scala 11:24]
    _T_1194[0] <= _T_1146 @[BitSum.scala 11:24]
    _T_1194[1] <= _T_1149 @[BitSum.scala 11:24]
    _T_1194[2] <= _T_1152 @[BitSum.scala 11:24]
    _T_1194[3] <= _T_1155 @[BitSum.scala 11:24]
    _T_1194[4] <= _T_1158 @[BitSum.scala 11:24]
    _T_1194[5] <= _T_1161 @[BitSum.scala 11:24]
    _T_1194[6] <= _T_1164 @[BitSum.scala 11:24]
    _T_1194[7] <= _T_1167 @[BitSum.scala 11:24]
    _T_1194[8] <= _T_1170 @[BitSum.scala 11:24]
    _T_1194[9] <= _T_1173 @[BitSum.scala 11:24]
    _T_1194[10] <= _T_1176 @[BitSum.scala 11:24]
    _T_1194[11] <= _T_1179 @[BitSum.scala 11:24]
    _T_1194[12] <= _T_1182 @[BitSum.scala 11:24]
    _T_1194[13] <= _T_1185 @[BitSum.scala 11:24]
    _T_1194[14] <= _T_1188 @[BitSum.scala 11:24]
    _T_1194[15] <= _T_1191 @[BitSum.scala 11:24]
    node _T_1214 = add(_T_704[_T_646], _T_774[_T_647]) @[BitSum.scala 18:14]
    node _T_1215 = tail(_T_1214, 1) @[BitSum.scala 18:14]
    node _T_1216 = asSInt(_T_1215) @[BitSum.scala 18:14]
    node _T_1217 = add(_T_844[_T_648], _T_914[_T_649]) @[BitSum.scala 18:14]
    node _T_1218 = tail(_T_1217, 1) @[BitSum.scala 18:14]
    node _T_1219 = asSInt(_T_1218) @[BitSum.scala 18:14]
    node _T_1220 = add(_T_984[_T_650], _T_1054[_T_651]) @[BitSum.scala 18:14]
    node _T_1221 = tail(_T_1220, 1) @[BitSum.scala 18:14]
    node _T_1222 = asSInt(_T_1221) @[BitSum.scala 18:14]
    node _T_1223 = add(_T_1124[_T_652], _T_1194[_T_653]) @[BitSum.scala 18:14]
    node _T_1224 = tail(_T_1223, 1) @[BitSum.scala 18:14]
    node _T_1225 = asSInt(_T_1224) @[BitSum.scala 18:14]
    node _T_1226 = add(_T_1216, _T_1219) @[BitSum.scala 18:14]
    node _T_1227 = tail(_T_1226, 1) @[BitSum.scala 18:14]
    node _T_1228 = asSInt(_T_1227) @[BitSum.scala 18:14]
    node _T_1229 = add(_T_1222, _T_1225) @[BitSum.scala 18:14]
    node _T_1230 = tail(_T_1229, 1) @[BitSum.scala 18:14]
    node _T_1231 = asSInt(_T_1230) @[BitSum.scala 18:14]
    node _T_1232 = add(_T_1228, _T_1231) @[BitSum.scala 18:14]
    node _T_1233 = tail(_T_1232, 1) @[BitSum.scala 18:14]
    node _T_1234 = asSInt(_T_1233) @[BitSum.scala 18:14]
    Accumulator_1.io.in <= _T_1234 @[XNORNetInference.scala 122:15]
    Accumulator_1.io.sel <= io.accSel @[XNORNetInference.scala 126:16]
    Accumulator_1.io.reset <= io.accReset @[XNORNetInference.scala 127:18]
    Accumulator_1.io.en <= io.accEn @[XNORNetInference.scala 128:14]
    inst MulAdd_1 of MulAdd_1 @[XNORNetInference.scala 131:24]
    MulAdd_1.io is invalid
    MulAdd_1.clock <= clock
    MulAdd_1.reset <= reset
    node _T_1235 = bits(mem.io.out, 95, 64) @[XNORNetInference.scala 139:30]
    node _T_1236 = bits(_T_1235, 31, 16) @[XNORNetInference.scala 141:28]
    node _T_1237 = asSInt(_T_1236) @[XNORNetInference.scala 141:101]
    MulAdd_1.io.a <= _T_1237 @[XNORNetInference.scala 141:19]
    node _T_1238 = bits(_T_1235, 15, 0) @[XNORNetInference.scala 142:28]
    node _T_1239 = asSInt(_T_1238) @[XNORNetInference.scala 142:71]
    MulAdd_1.io.c <= _T_1239 @[XNORNetInference.scala 142:19]
    MulAdd_1.io.m <= mean.io.output @[XNORNetInference.scala 152:16]
    MulAdd_1.io.b <= Accumulator_1.io.out @[XNORNetInference.scala 153:16]
    meanBuffer.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 154:24]
    maxModule.io.in[1] <= MulAdd_1.io.r @[XNORNetInference.scala 155:23]
    node signs_1 = bits(MulAdd_1.io.r, 31, 31) @[XNORNetInference.scala 156:16]
    inst Accumulator_2 of Accumulator_2 @[XNORNetInference.scala 119:21]
    Accumulator_2.io is invalid
    Accumulator_2.clock <= clock
    Accumulator_2.reset <= reset
    node _T_1240 = bits(xnor.io.out[2], 3, 0) @[BitSum.scala 31:51]
    node _T_1241 = bits(xnor.io.out[2], 7, 4) @[BitSum.scala 31:51]
    node _T_1242 = bits(xnor.io.out[2], 11, 8) @[BitSum.scala 31:51]
    node _T_1243 = bits(xnor.io.out[2], 15, 12) @[BitSum.scala 31:51]
    node _T_1244 = bits(xnor.io.out[2], 19, 16) @[BitSum.scala 31:51]
    node _T_1245 = bits(xnor.io.out[2], 23, 20) @[BitSum.scala 31:51]
    node _T_1246 = bits(xnor.io.out[2], 27, 24) @[BitSum.scala 31:51]
    node _T_1247 = bits(xnor.io.out[2], 31, 28) @[BitSum.scala 31:51]
    reg _T_1250 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1253 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1256 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1259 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1262 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1265 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1268 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1271 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1274 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1277 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1280 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1283 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1286 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1289 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1292 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1295 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1298 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1298 is invalid @[BitSum.scala 11:24]
    _T_1298[0] <= _T_1250 @[BitSum.scala 11:24]
    _T_1298[1] <= _T_1253 @[BitSum.scala 11:24]
    _T_1298[2] <= _T_1256 @[BitSum.scala 11:24]
    _T_1298[3] <= _T_1259 @[BitSum.scala 11:24]
    _T_1298[4] <= _T_1262 @[BitSum.scala 11:24]
    _T_1298[5] <= _T_1265 @[BitSum.scala 11:24]
    _T_1298[6] <= _T_1268 @[BitSum.scala 11:24]
    _T_1298[7] <= _T_1271 @[BitSum.scala 11:24]
    _T_1298[8] <= _T_1274 @[BitSum.scala 11:24]
    _T_1298[9] <= _T_1277 @[BitSum.scala 11:24]
    _T_1298[10] <= _T_1280 @[BitSum.scala 11:24]
    _T_1298[11] <= _T_1283 @[BitSum.scala 11:24]
    _T_1298[12] <= _T_1286 @[BitSum.scala 11:24]
    _T_1298[13] <= _T_1289 @[BitSum.scala 11:24]
    _T_1298[14] <= _T_1292 @[BitSum.scala 11:24]
    _T_1298[15] <= _T_1295 @[BitSum.scala 11:24]
    reg _T_1320 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1323 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1326 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1329 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1332 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1335 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1338 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1341 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1344 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1347 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1350 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1353 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1356 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1359 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1362 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1365 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1368 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1368 is invalid @[BitSum.scala 11:24]
    _T_1368[0] <= _T_1320 @[BitSum.scala 11:24]
    _T_1368[1] <= _T_1323 @[BitSum.scala 11:24]
    _T_1368[2] <= _T_1326 @[BitSum.scala 11:24]
    _T_1368[3] <= _T_1329 @[BitSum.scala 11:24]
    _T_1368[4] <= _T_1332 @[BitSum.scala 11:24]
    _T_1368[5] <= _T_1335 @[BitSum.scala 11:24]
    _T_1368[6] <= _T_1338 @[BitSum.scala 11:24]
    _T_1368[7] <= _T_1341 @[BitSum.scala 11:24]
    _T_1368[8] <= _T_1344 @[BitSum.scala 11:24]
    _T_1368[9] <= _T_1347 @[BitSum.scala 11:24]
    _T_1368[10] <= _T_1350 @[BitSum.scala 11:24]
    _T_1368[11] <= _T_1353 @[BitSum.scala 11:24]
    _T_1368[12] <= _T_1356 @[BitSum.scala 11:24]
    _T_1368[13] <= _T_1359 @[BitSum.scala 11:24]
    _T_1368[14] <= _T_1362 @[BitSum.scala 11:24]
    _T_1368[15] <= _T_1365 @[BitSum.scala 11:24]
    reg _T_1390 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1393 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1396 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1399 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1402 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1405 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1408 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1411 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1414 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1417 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1420 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1423 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1426 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1429 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1432 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1435 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1438 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1438 is invalid @[BitSum.scala 11:24]
    _T_1438[0] <= _T_1390 @[BitSum.scala 11:24]
    _T_1438[1] <= _T_1393 @[BitSum.scala 11:24]
    _T_1438[2] <= _T_1396 @[BitSum.scala 11:24]
    _T_1438[3] <= _T_1399 @[BitSum.scala 11:24]
    _T_1438[4] <= _T_1402 @[BitSum.scala 11:24]
    _T_1438[5] <= _T_1405 @[BitSum.scala 11:24]
    _T_1438[6] <= _T_1408 @[BitSum.scala 11:24]
    _T_1438[7] <= _T_1411 @[BitSum.scala 11:24]
    _T_1438[8] <= _T_1414 @[BitSum.scala 11:24]
    _T_1438[9] <= _T_1417 @[BitSum.scala 11:24]
    _T_1438[10] <= _T_1420 @[BitSum.scala 11:24]
    _T_1438[11] <= _T_1423 @[BitSum.scala 11:24]
    _T_1438[12] <= _T_1426 @[BitSum.scala 11:24]
    _T_1438[13] <= _T_1429 @[BitSum.scala 11:24]
    _T_1438[14] <= _T_1432 @[BitSum.scala 11:24]
    _T_1438[15] <= _T_1435 @[BitSum.scala 11:24]
    reg _T_1460 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1463 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1466 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1469 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1472 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1475 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1478 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1481 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1484 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1487 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1490 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1493 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1496 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1499 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1502 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1505 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1508 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1508 is invalid @[BitSum.scala 11:24]
    _T_1508[0] <= _T_1460 @[BitSum.scala 11:24]
    _T_1508[1] <= _T_1463 @[BitSum.scala 11:24]
    _T_1508[2] <= _T_1466 @[BitSum.scala 11:24]
    _T_1508[3] <= _T_1469 @[BitSum.scala 11:24]
    _T_1508[4] <= _T_1472 @[BitSum.scala 11:24]
    _T_1508[5] <= _T_1475 @[BitSum.scala 11:24]
    _T_1508[6] <= _T_1478 @[BitSum.scala 11:24]
    _T_1508[7] <= _T_1481 @[BitSum.scala 11:24]
    _T_1508[8] <= _T_1484 @[BitSum.scala 11:24]
    _T_1508[9] <= _T_1487 @[BitSum.scala 11:24]
    _T_1508[10] <= _T_1490 @[BitSum.scala 11:24]
    _T_1508[11] <= _T_1493 @[BitSum.scala 11:24]
    _T_1508[12] <= _T_1496 @[BitSum.scala 11:24]
    _T_1508[13] <= _T_1499 @[BitSum.scala 11:24]
    _T_1508[14] <= _T_1502 @[BitSum.scala 11:24]
    _T_1508[15] <= _T_1505 @[BitSum.scala 11:24]
    reg _T_1530 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1533 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1536 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1539 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1542 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1545 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1548 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1551 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1554 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1557 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1560 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1563 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1566 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1569 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1572 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1575 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1578 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1578 is invalid @[BitSum.scala 11:24]
    _T_1578[0] <= _T_1530 @[BitSum.scala 11:24]
    _T_1578[1] <= _T_1533 @[BitSum.scala 11:24]
    _T_1578[2] <= _T_1536 @[BitSum.scala 11:24]
    _T_1578[3] <= _T_1539 @[BitSum.scala 11:24]
    _T_1578[4] <= _T_1542 @[BitSum.scala 11:24]
    _T_1578[5] <= _T_1545 @[BitSum.scala 11:24]
    _T_1578[6] <= _T_1548 @[BitSum.scala 11:24]
    _T_1578[7] <= _T_1551 @[BitSum.scala 11:24]
    _T_1578[8] <= _T_1554 @[BitSum.scala 11:24]
    _T_1578[9] <= _T_1557 @[BitSum.scala 11:24]
    _T_1578[10] <= _T_1560 @[BitSum.scala 11:24]
    _T_1578[11] <= _T_1563 @[BitSum.scala 11:24]
    _T_1578[12] <= _T_1566 @[BitSum.scala 11:24]
    _T_1578[13] <= _T_1569 @[BitSum.scala 11:24]
    _T_1578[14] <= _T_1572 @[BitSum.scala 11:24]
    _T_1578[15] <= _T_1575 @[BitSum.scala 11:24]
    reg _T_1600 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1603 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1606 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1609 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1612 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1615 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1618 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1621 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1624 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1627 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1630 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1633 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1636 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1639 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1642 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1645 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1648 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1648 is invalid @[BitSum.scala 11:24]
    _T_1648[0] <= _T_1600 @[BitSum.scala 11:24]
    _T_1648[1] <= _T_1603 @[BitSum.scala 11:24]
    _T_1648[2] <= _T_1606 @[BitSum.scala 11:24]
    _T_1648[3] <= _T_1609 @[BitSum.scala 11:24]
    _T_1648[4] <= _T_1612 @[BitSum.scala 11:24]
    _T_1648[5] <= _T_1615 @[BitSum.scala 11:24]
    _T_1648[6] <= _T_1618 @[BitSum.scala 11:24]
    _T_1648[7] <= _T_1621 @[BitSum.scala 11:24]
    _T_1648[8] <= _T_1624 @[BitSum.scala 11:24]
    _T_1648[9] <= _T_1627 @[BitSum.scala 11:24]
    _T_1648[10] <= _T_1630 @[BitSum.scala 11:24]
    _T_1648[11] <= _T_1633 @[BitSum.scala 11:24]
    _T_1648[12] <= _T_1636 @[BitSum.scala 11:24]
    _T_1648[13] <= _T_1639 @[BitSum.scala 11:24]
    _T_1648[14] <= _T_1642 @[BitSum.scala 11:24]
    _T_1648[15] <= _T_1645 @[BitSum.scala 11:24]
    reg _T_1670 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1673 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1676 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1679 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1682 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1685 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1688 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1691 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1694 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1697 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1700 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1703 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1706 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1709 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1712 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1715 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1718 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1718 is invalid @[BitSum.scala 11:24]
    _T_1718[0] <= _T_1670 @[BitSum.scala 11:24]
    _T_1718[1] <= _T_1673 @[BitSum.scala 11:24]
    _T_1718[2] <= _T_1676 @[BitSum.scala 11:24]
    _T_1718[3] <= _T_1679 @[BitSum.scala 11:24]
    _T_1718[4] <= _T_1682 @[BitSum.scala 11:24]
    _T_1718[5] <= _T_1685 @[BitSum.scala 11:24]
    _T_1718[6] <= _T_1688 @[BitSum.scala 11:24]
    _T_1718[7] <= _T_1691 @[BitSum.scala 11:24]
    _T_1718[8] <= _T_1694 @[BitSum.scala 11:24]
    _T_1718[9] <= _T_1697 @[BitSum.scala 11:24]
    _T_1718[10] <= _T_1700 @[BitSum.scala 11:24]
    _T_1718[11] <= _T_1703 @[BitSum.scala 11:24]
    _T_1718[12] <= _T_1706 @[BitSum.scala 11:24]
    _T_1718[13] <= _T_1709 @[BitSum.scala 11:24]
    _T_1718[14] <= _T_1712 @[BitSum.scala 11:24]
    _T_1718[15] <= _T_1715 @[BitSum.scala 11:24]
    reg _T_1740 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1743 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1746 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1749 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1752 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1755 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1758 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1761 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1764 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1767 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1770 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1773 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1776 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1779 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1782 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1785 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1788 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1788 is invalid @[BitSum.scala 11:24]
    _T_1788[0] <= _T_1740 @[BitSum.scala 11:24]
    _T_1788[1] <= _T_1743 @[BitSum.scala 11:24]
    _T_1788[2] <= _T_1746 @[BitSum.scala 11:24]
    _T_1788[3] <= _T_1749 @[BitSum.scala 11:24]
    _T_1788[4] <= _T_1752 @[BitSum.scala 11:24]
    _T_1788[5] <= _T_1755 @[BitSum.scala 11:24]
    _T_1788[6] <= _T_1758 @[BitSum.scala 11:24]
    _T_1788[7] <= _T_1761 @[BitSum.scala 11:24]
    _T_1788[8] <= _T_1764 @[BitSum.scala 11:24]
    _T_1788[9] <= _T_1767 @[BitSum.scala 11:24]
    _T_1788[10] <= _T_1770 @[BitSum.scala 11:24]
    _T_1788[11] <= _T_1773 @[BitSum.scala 11:24]
    _T_1788[12] <= _T_1776 @[BitSum.scala 11:24]
    _T_1788[13] <= _T_1779 @[BitSum.scala 11:24]
    _T_1788[14] <= _T_1782 @[BitSum.scala 11:24]
    _T_1788[15] <= _T_1785 @[BitSum.scala 11:24]
    node _T_1808 = add(_T_1298[_T_1240], _T_1368[_T_1241]) @[BitSum.scala 18:14]
    node _T_1809 = tail(_T_1808, 1) @[BitSum.scala 18:14]
    node _T_1810 = asSInt(_T_1809) @[BitSum.scala 18:14]
    node _T_1811 = add(_T_1438[_T_1242], _T_1508[_T_1243]) @[BitSum.scala 18:14]
    node _T_1812 = tail(_T_1811, 1) @[BitSum.scala 18:14]
    node _T_1813 = asSInt(_T_1812) @[BitSum.scala 18:14]
    node _T_1814 = add(_T_1578[_T_1244], _T_1648[_T_1245]) @[BitSum.scala 18:14]
    node _T_1815 = tail(_T_1814, 1) @[BitSum.scala 18:14]
    node _T_1816 = asSInt(_T_1815) @[BitSum.scala 18:14]
    node _T_1817 = add(_T_1718[_T_1246], _T_1788[_T_1247]) @[BitSum.scala 18:14]
    node _T_1818 = tail(_T_1817, 1) @[BitSum.scala 18:14]
    node _T_1819 = asSInt(_T_1818) @[BitSum.scala 18:14]
    node _T_1820 = add(_T_1810, _T_1813) @[BitSum.scala 18:14]
    node _T_1821 = tail(_T_1820, 1) @[BitSum.scala 18:14]
    node _T_1822 = asSInt(_T_1821) @[BitSum.scala 18:14]
    node _T_1823 = add(_T_1816, _T_1819) @[BitSum.scala 18:14]
    node _T_1824 = tail(_T_1823, 1) @[BitSum.scala 18:14]
    node _T_1825 = asSInt(_T_1824) @[BitSum.scala 18:14]
    node _T_1826 = add(_T_1822, _T_1825) @[BitSum.scala 18:14]
    node _T_1827 = tail(_T_1826, 1) @[BitSum.scala 18:14]
    node _T_1828 = asSInt(_T_1827) @[BitSum.scala 18:14]
    Accumulator_2.io.in <= _T_1828 @[XNORNetInference.scala 122:15]
    Accumulator_2.io.sel <= io.accSel @[XNORNetInference.scala 126:16]
    Accumulator_2.io.reset <= io.accReset @[XNORNetInference.scala 127:18]
    Accumulator_2.io.en <= io.accEn @[XNORNetInference.scala 128:14]
    inst MulAdd_2 of MulAdd_2 @[XNORNetInference.scala 131:24]
    MulAdd_2.io is invalid
    MulAdd_2.clock <= clock
    MulAdd_2.reset <= reset
    node _T_1829 = bits(mem.io.out, 63, 32) @[XNORNetInference.scala 139:30]
    node _T_1830 = bits(_T_1829, 31, 16) @[XNORNetInference.scala 141:28]
    node _T_1831 = asSInt(_T_1830) @[XNORNetInference.scala 141:101]
    MulAdd_2.io.a <= _T_1831 @[XNORNetInference.scala 141:19]
    node _T_1832 = bits(_T_1829, 15, 0) @[XNORNetInference.scala 142:28]
    node _T_1833 = asSInt(_T_1832) @[XNORNetInference.scala 142:71]
    MulAdd_2.io.c <= _T_1833 @[XNORNetInference.scala 142:19]
    MulAdd_2.io.m <= mean.io.output @[XNORNetInference.scala 152:16]
    MulAdd_2.io.b <= Accumulator_2.io.out @[XNORNetInference.scala 153:16]
    meanBuffer.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 154:24]
    maxModule.io.in[2] <= MulAdd_2.io.r @[XNORNetInference.scala 155:23]
    node signs_2 = bits(MulAdd_2.io.r, 31, 31) @[XNORNetInference.scala 156:16]
    inst Accumulator_3 of Accumulator_3 @[XNORNetInference.scala 119:21]
    Accumulator_3.io is invalid
    Accumulator_3.clock <= clock
    Accumulator_3.reset <= reset
    node _T_1834 = bits(xnor.io.out[3], 3, 0) @[BitSum.scala 31:51]
    node _T_1835 = bits(xnor.io.out[3], 7, 4) @[BitSum.scala 31:51]
    node _T_1836 = bits(xnor.io.out[3], 11, 8) @[BitSum.scala 31:51]
    node _T_1837 = bits(xnor.io.out[3], 15, 12) @[BitSum.scala 31:51]
    node _T_1838 = bits(xnor.io.out[3], 19, 16) @[BitSum.scala 31:51]
    node _T_1839 = bits(xnor.io.out[3], 23, 20) @[BitSum.scala 31:51]
    node _T_1840 = bits(xnor.io.out[3], 27, 24) @[BitSum.scala 31:51]
    node _T_1841 = bits(xnor.io.out[3], 31, 28) @[BitSum.scala 31:51]
    reg _T_1844 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1847 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1850 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1853 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1856 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1859 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1862 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1865 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1868 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1871 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1874 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1877 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1880 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1883 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1886 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1889 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1892 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1892 is invalid @[BitSum.scala 11:24]
    _T_1892[0] <= _T_1844 @[BitSum.scala 11:24]
    _T_1892[1] <= _T_1847 @[BitSum.scala 11:24]
    _T_1892[2] <= _T_1850 @[BitSum.scala 11:24]
    _T_1892[3] <= _T_1853 @[BitSum.scala 11:24]
    _T_1892[4] <= _T_1856 @[BitSum.scala 11:24]
    _T_1892[5] <= _T_1859 @[BitSum.scala 11:24]
    _T_1892[6] <= _T_1862 @[BitSum.scala 11:24]
    _T_1892[7] <= _T_1865 @[BitSum.scala 11:24]
    _T_1892[8] <= _T_1868 @[BitSum.scala 11:24]
    _T_1892[9] <= _T_1871 @[BitSum.scala 11:24]
    _T_1892[10] <= _T_1874 @[BitSum.scala 11:24]
    _T_1892[11] <= _T_1877 @[BitSum.scala 11:24]
    _T_1892[12] <= _T_1880 @[BitSum.scala 11:24]
    _T_1892[13] <= _T_1883 @[BitSum.scala 11:24]
    _T_1892[14] <= _T_1886 @[BitSum.scala 11:24]
    _T_1892[15] <= _T_1889 @[BitSum.scala 11:24]
    reg _T_1914 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1917 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1920 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1923 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1926 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1929 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1932 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1935 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1938 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1941 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1944 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1947 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1950 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1953 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1956 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_1959 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_1962 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_1962 is invalid @[BitSum.scala 11:24]
    _T_1962[0] <= _T_1914 @[BitSum.scala 11:24]
    _T_1962[1] <= _T_1917 @[BitSum.scala 11:24]
    _T_1962[2] <= _T_1920 @[BitSum.scala 11:24]
    _T_1962[3] <= _T_1923 @[BitSum.scala 11:24]
    _T_1962[4] <= _T_1926 @[BitSum.scala 11:24]
    _T_1962[5] <= _T_1929 @[BitSum.scala 11:24]
    _T_1962[6] <= _T_1932 @[BitSum.scala 11:24]
    _T_1962[7] <= _T_1935 @[BitSum.scala 11:24]
    _T_1962[8] <= _T_1938 @[BitSum.scala 11:24]
    _T_1962[9] <= _T_1941 @[BitSum.scala 11:24]
    _T_1962[10] <= _T_1944 @[BitSum.scala 11:24]
    _T_1962[11] <= _T_1947 @[BitSum.scala 11:24]
    _T_1962[12] <= _T_1950 @[BitSum.scala 11:24]
    _T_1962[13] <= _T_1953 @[BitSum.scala 11:24]
    _T_1962[14] <= _T_1956 @[BitSum.scala 11:24]
    _T_1962[15] <= _T_1959 @[BitSum.scala 11:24]
    reg _T_1984 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_1987 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1990 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1993 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_1996 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_1999 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2002 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2005 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2008 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2011 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2014 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2017 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2020 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2023 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2026 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2029 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2032 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2032 is invalid @[BitSum.scala 11:24]
    _T_2032[0] <= _T_1984 @[BitSum.scala 11:24]
    _T_2032[1] <= _T_1987 @[BitSum.scala 11:24]
    _T_2032[2] <= _T_1990 @[BitSum.scala 11:24]
    _T_2032[3] <= _T_1993 @[BitSum.scala 11:24]
    _T_2032[4] <= _T_1996 @[BitSum.scala 11:24]
    _T_2032[5] <= _T_1999 @[BitSum.scala 11:24]
    _T_2032[6] <= _T_2002 @[BitSum.scala 11:24]
    _T_2032[7] <= _T_2005 @[BitSum.scala 11:24]
    _T_2032[8] <= _T_2008 @[BitSum.scala 11:24]
    _T_2032[9] <= _T_2011 @[BitSum.scala 11:24]
    _T_2032[10] <= _T_2014 @[BitSum.scala 11:24]
    _T_2032[11] <= _T_2017 @[BitSum.scala 11:24]
    _T_2032[12] <= _T_2020 @[BitSum.scala 11:24]
    _T_2032[13] <= _T_2023 @[BitSum.scala 11:24]
    _T_2032[14] <= _T_2026 @[BitSum.scala 11:24]
    _T_2032[15] <= _T_2029 @[BitSum.scala 11:24]
    reg _T_2054 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2057 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2060 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2063 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2066 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2069 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2072 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2075 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2078 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2081 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2084 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2087 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2090 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2093 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2096 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2099 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2102 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2102 is invalid @[BitSum.scala 11:24]
    _T_2102[0] <= _T_2054 @[BitSum.scala 11:24]
    _T_2102[1] <= _T_2057 @[BitSum.scala 11:24]
    _T_2102[2] <= _T_2060 @[BitSum.scala 11:24]
    _T_2102[3] <= _T_2063 @[BitSum.scala 11:24]
    _T_2102[4] <= _T_2066 @[BitSum.scala 11:24]
    _T_2102[5] <= _T_2069 @[BitSum.scala 11:24]
    _T_2102[6] <= _T_2072 @[BitSum.scala 11:24]
    _T_2102[7] <= _T_2075 @[BitSum.scala 11:24]
    _T_2102[8] <= _T_2078 @[BitSum.scala 11:24]
    _T_2102[9] <= _T_2081 @[BitSum.scala 11:24]
    _T_2102[10] <= _T_2084 @[BitSum.scala 11:24]
    _T_2102[11] <= _T_2087 @[BitSum.scala 11:24]
    _T_2102[12] <= _T_2090 @[BitSum.scala 11:24]
    _T_2102[13] <= _T_2093 @[BitSum.scala 11:24]
    _T_2102[14] <= _T_2096 @[BitSum.scala 11:24]
    _T_2102[15] <= _T_2099 @[BitSum.scala 11:24]
    reg _T_2124 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2127 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2130 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2133 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2136 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2139 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2142 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2145 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2148 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2151 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2154 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2157 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2160 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2163 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2166 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2169 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2172 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2172 is invalid @[BitSum.scala 11:24]
    _T_2172[0] <= _T_2124 @[BitSum.scala 11:24]
    _T_2172[1] <= _T_2127 @[BitSum.scala 11:24]
    _T_2172[2] <= _T_2130 @[BitSum.scala 11:24]
    _T_2172[3] <= _T_2133 @[BitSum.scala 11:24]
    _T_2172[4] <= _T_2136 @[BitSum.scala 11:24]
    _T_2172[5] <= _T_2139 @[BitSum.scala 11:24]
    _T_2172[6] <= _T_2142 @[BitSum.scala 11:24]
    _T_2172[7] <= _T_2145 @[BitSum.scala 11:24]
    _T_2172[8] <= _T_2148 @[BitSum.scala 11:24]
    _T_2172[9] <= _T_2151 @[BitSum.scala 11:24]
    _T_2172[10] <= _T_2154 @[BitSum.scala 11:24]
    _T_2172[11] <= _T_2157 @[BitSum.scala 11:24]
    _T_2172[12] <= _T_2160 @[BitSum.scala 11:24]
    _T_2172[13] <= _T_2163 @[BitSum.scala 11:24]
    _T_2172[14] <= _T_2166 @[BitSum.scala 11:24]
    _T_2172[15] <= _T_2169 @[BitSum.scala 11:24]
    reg _T_2194 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2197 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2200 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2203 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2206 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2209 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2212 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2215 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2218 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2221 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2224 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2227 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2230 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2233 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2236 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2239 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2242 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2242 is invalid @[BitSum.scala 11:24]
    _T_2242[0] <= _T_2194 @[BitSum.scala 11:24]
    _T_2242[1] <= _T_2197 @[BitSum.scala 11:24]
    _T_2242[2] <= _T_2200 @[BitSum.scala 11:24]
    _T_2242[3] <= _T_2203 @[BitSum.scala 11:24]
    _T_2242[4] <= _T_2206 @[BitSum.scala 11:24]
    _T_2242[5] <= _T_2209 @[BitSum.scala 11:24]
    _T_2242[6] <= _T_2212 @[BitSum.scala 11:24]
    _T_2242[7] <= _T_2215 @[BitSum.scala 11:24]
    _T_2242[8] <= _T_2218 @[BitSum.scala 11:24]
    _T_2242[9] <= _T_2221 @[BitSum.scala 11:24]
    _T_2242[10] <= _T_2224 @[BitSum.scala 11:24]
    _T_2242[11] <= _T_2227 @[BitSum.scala 11:24]
    _T_2242[12] <= _T_2230 @[BitSum.scala 11:24]
    _T_2242[13] <= _T_2233 @[BitSum.scala 11:24]
    _T_2242[14] <= _T_2236 @[BitSum.scala 11:24]
    _T_2242[15] <= _T_2239 @[BitSum.scala 11:24]
    reg _T_2264 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2267 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2270 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2273 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2276 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2279 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2282 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2285 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2288 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2291 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2294 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2297 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2300 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2303 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2306 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2309 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2312 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2312 is invalid @[BitSum.scala 11:24]
    _T_2312[0] <= _T_2264 @[BitSum.scala 11:24]
    _T_2312[1] <= _T_2267 @[BitSum.scala 11:24]
    _T_2312[2] <= _T_2270 @[BitSum.scala 11:24]
    _T_2312[3] <= _T_2273 @[BitSum.scala 11:24]
    _T_2312[4] <= _T_2276 @[BitSum.scala 11:24]
    _T_2312[5] <= _T_2279 @[BitSum.scala 11:24]
    _T_2312[6] <= _T_2282 @[BitSum.scala 11:24]
    _T_2312[7] <= _T_2285 @[BitSum.scala 11:24]
    _T_2312[8] <= _T_2288 @[BitSum.scala 11:24]
    _T_2312[9] <= _T_2291 @[BitSum.scala 11:24]
    _T_2312[10] <= _T_2294 @[BitSum.scala 11:24]
    _T_2312[11] <= _T_2297 @[BitSum.scala 11:24]
    _T_2312[12] <= _T_2300 @[BitSum.scala 11:24]
    _T_2312[13] <= _T_2303 @[BitSum.scala 11:24]
    _T_2312[14] <= _T_2306 @[BitSum.scala 11:24]
    _T_2312[15] <= _T_2309 @[BitSum.scala 11:24]
    reg _T_2334 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03c")))) @[BitSum.scala 11:43]
    reg _T_2337 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2340 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2343 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2346 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2349 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2352 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2355 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2358 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h03e")))) @[BitSum.scala 11:43]
    reg _T_2361 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2364 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2367 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2370 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h00")))) @[BitSum.scala 11:43]
    reg _T_2373 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2376 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h02")))) @[BitSum.scala 11:43]
    reg _T_2379 : SInt<6>, clock with : (reset => (reset, asSInt(UInt<6>("h04")))) @[BitSum.scala 11:43]
    wire _T_2382 : SInt<6>[16] @[BitSum.scala 11:24]
    _T_2382 is invalid @[BitSum.scala 11:24]
    _T_2382[0] <= _T_2334 @[BitSum.scala 11:24]
    _T_2382[1] <= _T_2337 @[BitSum.scala 11:24]
    _T_2382[2] <= _T_2340 @[BitSum.scala 11:24]
    _T_2382[3] <= _T_2343 @[BitSum.scala 11:24]
    _T_2382[4] <= _T_2346 @[BitSum.scala 11:24]
    _T_2382[5] <= _T_2349 @[BitSum.scala 11:24]
    _T_2382[6] <= _T_2352 @[BitSum.scala 11:24]
    _T_2382[7] <= _T_2355 @[BitSum.scala 11:24]
    _T_2382[8] <= _T_2358 @[BitSum.scala 11:24]
    _T_2382[9] <= _T_2361 @[BitSum.scala 11:24]
    _T_2382[10] <= _T_2364 @[BitSum.scala 11:24]
    _T_2382[11] <= _T_2367 @[BitSum.scala 11:24]
    _T_2382[12] <= _T_2370 @[BitSum.scala 11:24]
    _T_2382[13] <= _T_2373 @[BitSum.scala 11:24]
    _T_2382[14] <= _T_2376 @[BitSum.scala 11:24]
    _T_2382[15] <= _T_2379 @[BitSum.scala 11:24]
    node _T_2402 = add(_T_1892[_T_1834], _T_1962[_T_1835]) @[BitSum.scala 18:14]
    node _T_2403 = tail(_T_2402, 1) @[BitSum.scala 18:14]
    node _T_2404 = asSInt(_T_2403) @[BitSum.scala 18:14]
    node _T_2405 = add(_T_2032[_T_1836], _T_2102[_T_1837]) @[BitSum.scala 18:14]
    node _T_2406 = tail(_T_2405, 1) @[BitSum.scala 18:14]
    node _T_2407 = asSInt(_T_2406) @[BitSum.scala 18:14]
    node _T_2408 = add(_T_2172[_T_1838], _T_2242[_T_1839]) @[BitSum.scala 18:14]
    node _T_2409 = tail(_T_2408, 1) @[BitSum.scala 18:14]
    node _T_2410 = asSInt(_T_2409) @[BitSum.scala 18:14]
    node _T_2411 = add(_T_2312[_T_1840], _T_2382[_T_1841]) @[BitSum.scala 18:14]
    node _T_2412 = tail(_T_2411, 1) @[BitSum.scala 18:14]
    node _T_2413 = asSInt(_T_2412) @[BitSum.scala 18:14]
    node _T_2414 = add(_T_2404, _T_2407) @[BitSum.scala 18:14]
    node _T_2415 = tail(_T_2414, 1) @[BitSum.scala 18:14]
    node _T_2416 = asSInt(_T_2415) @[BitSum.scala 18:14]
    node _T_2417 = add(_T_2410, _T_2413) @[BitSum.scala 18:14]
    node _T_2418 = tail(_T_2417, 1) @[BitSum.scala 18:14]
    node _T_2419 = asSInt(_T_2418) @[BitSum.scala 18:14]
    node _T_2420 = add(_T_2416, _T_2419) @[BitSum.scala 18:14]
    node _T_2421 = tail(_T_2420, 1) @[BitSum.scala 18:14]
    node _T_2422 = asSInt(_T_2421) @[BitSum.scala 18:14]
    Accumulator_3.io.in <= _T_2422 @[XNORNetInference.scala 122:15]
    Accumulator_3.io.sel <= io.accSel @[XNORNetInference.scala 126:16]
    Accumulator_3.io.reset <= io.accReset @[XNORNetInference.scala 127:18]
    Accumulator_3.io.en <= io.accEn @[XNORNetInference.scala 128:14]
    inst MulAdd_3 of MulAdd_3 @[XNORNetInference.scala 131:24]
    MulAdd_3.io is invalid
    MulAdd_3.clock <= clock
    MulAdd_3.reset <= reset
    node _T_2423 = bits(mem.io.out, 31, 0) @[XNORNetInference.scala 139:30]
    node _T_2424 = bits(_T_2423, 31, 16) @[XNORNetInference.scala 141:28]
    node _T_2425 = asSInt(_T_2424) @[XNORNetInference.scala 141:101]
    MulAdd_3.io.a <= _T_2425 @[XNORNetInference.scala 141:19]
    node _T_2426 = bits(_T_2423, 15, 0) @[XNORNetInference.scala 142:28]
    node _T_2427 = asSInt(_T_2426) @[XNORNetInference.scala 142:71]
    MulAdd_3.io.c <= _T_2427 @[XNORNetInference.scala 142:19]
    MulAdd_3.io.m <= mean.io.output @[XNORNetInference.scala 152:16]
    MulAdd_3.io.b <= Accumulator_3.io.out @[XNORNetInference.scala 153:16]
    meanBuffer.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 154:24]
    maxModule.io.in[3] <= MulAdd_3.io.r @[XNORNetInference.scala 155:23]
    node signs_3 = bits(MulAdd_3.io.r, 31, 31) @[XNORNetInference.scala 156:16]
    node _T_2428 = cat(signs_2, signs_3) @[Cat.scala 30:58]
    node _T_2429 = cat(signs_0, signs_1) @[Cat.scala 30:58]
    node _T_2430 = cat(_T_2429, _T_2428) @[Cat.scala 30:58]
    inputWire <= _T_2430 @[XNORNetInference.scala 160:12]
    meanBuffer.io.reset <= io.meanUpdate @[XNORNetInference.scala 162:22]
    meanBuffer.io.cntInverse65536 <= io.featureNumInverse65536 @[XNORNetInference.scala 163:32]
    
  module LayerParamShifter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip shift : UInt<1>, currentLayer : UInt<4>, currentFeatureCnt : UInt<16>, currentFeatureCnt65536 : UInt<16>, currentInputRound : UInt<16>, currentTotalRound : UInt<16>, currentAccWidth : UInt<16>, lastLayer : UInt<1>, memoryOffset : UInt<8>}
    
    clock is invalid
    reset is invalid
    io is invalid
    reg currentLayer : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[LayerParamShifter.scala 11:29]
    reg featureCnts_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h060"))) @[LayerParamShifter.scala 14:17]
    reg featureCnts_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0c"))) @[LayerParamShifter.scala 14:17]
    reg featureCnts65536_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h02aa"))) @[LayerParamShifter.scala 17:17]
    reg featureCnts65536_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h01555"))) @[LayerParamShifter.scala 17:17]
    reg accWidth_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h018"))) @[LayerParamShifter.scala 20:17]
    reg accWidth_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 20:17]
    reg inputRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h08"))) @[LayerParamShifter.scala 24:17]
    reg inputRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h03"))) @[LayerParamShifter.scala 24:17]
    reg totalRound_0 : UInt<16>, clock with : (reset => (reset, UInt<16>("h0c0"))) @[LayerParamShifter.scala 29:17]
    reg totalRound_1 : UInt<16>, clock with : (reset => (reset, UInt<16>("h09"))) @[LayerParamShifter.scala 29:17]
    reg memoryOffset_0 : UInt<8>, clock with : (reset => (reset, UInt<8>("h0d8"))) @[LayerParamShifter.scala 43:51]
    reg memoryOffset_1 : UInt<8>, clock with : (reset => (reset, UInt<8>("h0e4"))) @[LayerParamShifter.scala 43:51]
    io.currentLayer <= currentLayer @[LayerParamShifter.scala 57:18]
    io.currentFeatureCnt <= featureCnts_0 @[LayerParamShifter.scala 58:23]
    io.currentFeatureCnt65536 <= featureCnts65536_0 @[LayerParamShifter.scala 59:28]
    io.currentInputRound <= inputRound_0 @[LayerParamShifter.scala 60:23]
    io.currentTotalRound <= totalRound_0 @[LayerParamShifter.scala 61:23]
    io.currentAccWidth <= accWidth_0 @[LayerParamShifter.scala 62:21]
    node _T_38 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 63:30]
    io.lastLayer <= _T_38 @[LayerParamShifter.scala 63:15]
    io.memoryOffset <= memoryOffset_0 @[LayerParamShifter.scala 64:18]
    when io.shift : @[LayerParamShifter.scala 66:18]
      featureCnts_0 <= featureCnts_1 @[LayerParamShifter.scala 68:22]
      featureCnts65536_0 <= featureCnts65536_1 @[LayerParamShifter.scala 69:27]
      accWidth_0 <= accWidth_1 @[LayerParamShifter.scala 70:18]
      inputRound_0 <= inputRound_1 @[LayerParamShifter.scala 71:20]
      totalRound_0 <= totalRound_1 @[LayerParamShifter.scala 72:20]
      memoryOffset_0 <= memoryOffset_1 @[LayerParamShifter.scala 73:22]
      node _T_40 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 74:24]
      when _T_40 : @[LayerParamShifter.scala 74:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 75:22]
        skip @[LayerParamShifter.scala 74:56]
      node _T_43 = eq(_T_40, UInt<1>("h00")) @[LayerParamShifter.scala 74:56]
      when _T_43 : @[LayerParamShifter.scala 76:9]
        node _T_45 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 77:35]
        node _T_46 = tail(_T_45, 1) @[LayerParamShifter.scala 77:35]
        currentLayer <= _T_46 @[LayerParamShifter.scala 77:21]
        skip @[LayerParamShifter.scala 76:9]
      featureCnts_1 <= featureCnts_0 @[LayerParamShifter.scala 68:22]
      featureCnts65536_1 <= featureCnts65536_0 @[LayerParamShifter.scala 69:27]
      accWidth_1 <= accWidth_0 @[LayerParamShifter.scala 70:18]
      inputRound_1 <= inputRound_0 @[LayerParamShifter.scala 71:20]
      totalRound_1 <= totalRound_0 @[LayerParamShifter.scala 72:20]
      memoryOffset_1 <= memoryOffset_0 @[LayerParamShifter.scala 73:22]
      node _T_48 = eq(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 74:24]
      when _T_48 : @[LayerParamShifter.scala 74:56]
        currentLayer <= UInt<1>("h00") @[LayerParamShifter.scala 75:22]
        skip @[LayerParamShifter.scala 74:56]
      node _T_51 = eq(_T_48, UInt<1>("h00")) @[LayerParamShifter.scala 74:56]
      when _T_51 : @[LayerParamShifter.scala 76:9]
        node _T_53 = add(currentLayer, UInt<1>("h01")) @[LayerParamShifter.scala 77:35]
        node _T_54 = tail(_T_53, 1) @[LayerParamShifter.scala 77:35]
        currentLayer <= _T_54 @[LayerParamShifter.scala 77:21]
        skip @[LayerParamShifter.scala 76:9]
      skip @[LayerParamShifter.scala 66:18]
    
  module IglooScheduler : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip en : UInt<1>, flip inputOffset : UInt<8>, flip memOffset : UInt<8>, finished : UInt<1>, result : UInt<4>, flip memWen : UInt<1>, flip memWAddr : UInt<8>, flip memIn : UInt<16>}
    
    clock is invalid
    reset is invalid
    io is invalid
    inst hw of XNORNetInference @[IglooScheduler.scala 83:18]
    hw.io is invalid
    hw.clock <= clock
    hw.reset <= reset
    hw.io.memWen <= io.memWen @[IglooScheduler.scala 85:15]
    hw.io.memIn <= io.memIn @[IglooScheduler.scala 86:14]
    hw.io.memWAddr <= io.memWAddr @[IglooScheduler.scala 87:17]
    io.result <= hw.io.result @[IglooScheduler.scala 90:12]
    inst layerParams of LayerParamShifter @[IglooScheduler.scala 92:25]
    layerParams.io is invalid
    layerParams.clock <= clock
    layerParams.reset <= reset
    hw.io.maxEn <= layerParams.io.lastLayer @[IglooScheduler.scala 94:14]
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[IglooScheduler.scala 97:20]
    reg substate : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[IglooScheduler.scala 98:23]
    reg maxOffsetReg : UInt<4>, clock @[IglooScheduler.scala 114:23]
    hw.io.maxOffset <= maxOffsetReg @[IglooScheduler.scala 115:18]
    reg memOffset : UInt<8>, clock @[IglooScheduler.scala 118:20]
    node acc = rem(substate, layerParams.io.currentAccWidth) @[IglooScheduler.scala 121:19]
    hw.io.accSel <= acc @[IglooScheduler.scala 122:15]
    when io.en : @[IglooScheduler.scala 126:15]
      node _T_17 = eq(state, UInt<8>("h00")) @[IglooScheduler.scala 101:25]
      when _T_17 : @[IglooScheduler.scala 128:21]
        hw.io.memAddr <= io.inputOffset @[IglooScheduler.scala 129:21]
        memOffset <= io.memOffset @[IglooScheduler.scala 131:16]
        hw.io.inputBufferPush <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.inputBufferPop <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.inputBufferReset <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
        hw.io.input <= hw.io.memOut @[IglooScheduler.scala 136:18]
        state <= UInt<8>("h01") @[IglooScheduler.scala 103:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
        skip @[IglooScheduler.scala 128:21]
      node _T_24 = eq(state, UInt<8>("h01")) @[IglooScheduler.scala 101:25]
      when _T_24 : @[IglooScheduler.scala 141:23]
        hw.io.inputBufferReset <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.inputPush <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
        node _T_28 = add(io.inputOffset, UInt<1>("h01")) @[IglooScheduler.scala 145:37]
        node _T_29 = tail(_T_28, 1) @[IglooScheduler.scala 145:37]
        hw.io.memAddr <= _T_29 @[IglooScheduler.scala 145:20]
        state <= UInt<8>("h02") @[IglooScheduler.scala 103:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
        skip @[IglooScheduler.scala 141:23]
      node _T_33 = eq(state, UInt<8>("h02")) @[IglooScheduler.scala 101:25]
      when _T_33 : @[IglooScheduler.scala 148:26]
        node _T_35 = lt(substate, UInt<1>("h00")) @[IglooScheduler.scala 151:21]
        when _T_35 : @[IglooScheduler.scala 151:50]
          node _T_37 = add(io.inputOffset, UInt<2>("h02")) @[IglooScheduler.scala 153:39]
          node _T_38 = tail(_T_37, 1) @[IglooScheduler.scala 153:39]
          node _T_39 = add(_T_38, substate) @[IglooScheduler.scala 153:43]
          node _T_40 = tail(_T_39, 1) @[IglooScheduler.scala 153:43]
          hw.io.memAddr <= _T_40 @[IglooScheduler.scala 153:22]
          node _T_42 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 105:30]
          node _T_43 = tail(_T_42, 1) @[IglooScheduler.scala 105:30]
          substate <= _T_43 @[IglooScheduler.scala 105:20]
          skip @[IglooScheduler.scala 151:50]
        node _T_45 = eq(substate, UInt<1>("h00")) @[IglooScheduler.scala 155:27]
        node _T_47 = eq(_T_35, UInt<1>("h00")) @[IglooScheduler.scala 151:50]
        node _T_48 = and(_T_47, _T_45) @[IglooScheduler.scala 155:58]
        when _T_48 : @[IglooScheduler.scala 155:58]
          hw.io.memAddr <= io.memOffset @[IglooScheduler.scala 156:23]
          state <= UInt<8>("h03") @[IglooScheduler.scala 103:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
          skip @[IglooScheduler.scala 155:58]
        skip @[IglooScheduler.scala 148:26]
      node _T_52 = eq(state, UInt<8>("h03")) @[IglooScheduler.scala 101:25]
      when _T_52 : @[IglooScheduler.scala 160:28]
        hw.io.inputPush <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.accEn <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
        hw.io.accReset <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
        hw.io.accSel <= UInt<1>("h00") @[IglooScheduler.scala 167:20]
        hw.io.memAddr <= memOffset @[IglooScheduler.scala 169:20]
        node _T_58 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 170:27]
        node _T_59 = tail(_T_58, 1) @[IglooScheduler.scala 170:27]
        memOffset <= _T_59 @[IglooScheduler.scala 170:16]
        state <= UInt<8>("h04") @[IglooScheduler.scala 103:34]
        substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
        skip @[IglooScheduler.scala 160:28]
      node _T_63 = eq(state, UInt<8>("h04")) @[IglooScheduler.scala 101:25]
      when _T_63 : @[IglooScheduler.scala 174:20]
        layerParams.io.shift <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.accReset <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.meanUpdate <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        node _T_68 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 183:27]
        node _T_69 = tail(_T_68, 1) @[IglooScheduler.scala 183:27]
        memOffset <= _T_69 @[IglooScheduler.scala 183:16]
        node _T_71 = sub(layerParams.io.currentAccWidth, UInt<2>("h02")) @[IglooScheduler.scala 185:48]
        node _T_72 = asUInt(_T_71) @[IglooScheduler.scala 185:48]
        node _T_73 = tail(_T_72, 1) @[IglooScheduler.scala 185:48]
        node _T_74 = eq(acc, _T_73) @[IglooScheduler.scala 185:15]
        when _T_74 : @[IglooScheduler.scala 185:53]
          hw.io.inputBufferPop <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
          skip @[IglooScheduler.scala 185:53]
        node _T_77 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 188:54]
        node _T_78 = asUInt(_T_77) @[IglooScheduler.scala 188:54]
        node _T_79 = tail(_T_78, 1) @[IglooScheduler.scala 188:54]
        node _T_80 = eq(acc, _T_79) @[IglooScheduler.scala 188:21]
        node _T_82 = eq(_T_74, UInt<1>("h00")) @[IglooScheduler.scala 185:53]
        node _T_83 = and(_T_82, _T_80) @[IglooScheduler.scala 188:59]
        when _T_83 : @[IglooScheduler.scala 188:59]
          hw.io.inputBufferPop <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
          skip @[IglooScheduler.scala 188:59]
        node _T_86 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 192:53]
        node _T_87 = asUInt(_T_86) @[IglooScheduler.scala 192:53]
        node _T_88 = tail(_T_87, 1) @[IglooScheduler.scala 192:53]
        node _T_89 = lt(substate, _T_88) @[IglooScheduler.scala 192:20]
        when _T_89 : @[IglooScheduler.scala 192:58]
          node _T_91 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 105:30]
          node _T_92 = tail(_T_91, 1) @[IglooScheduler.scala 105:30]
          substate <= _T_92 @[IglooScheduler.scala 105:20]
          skip @[IglooScheduler.scala 192:58]
        node _T_94 = sub(layerParams.io.currentTotalRound, UInt<1>("h01")) @[IglooScheduler.scala 195:61]
        node _T_95 = asUInt(_T_94) @[IglooScheduler.scala 195:61]
        node _T_96 = tail(_T_95, 1) @[IglooScheduler.scala 195:61]
        node _T_97 = eq(substate, _T_96) @[IglooScheduler.scala 195:26]
        node _T_99 = eq(_T_89, UInt<1>("h00")) @[IglooScheduler.scala 192:58]
        node _T_100 = and(_T_99, _T_97) @[IglooScheduler.scala 195:66]
        when _T_100 : @[IglooScheduler.scala 195:66]
          hw.io.inputBufferPush <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
          state <= UInt<8>("h05") @[IglooScheduler.scala 103:34]
          substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
          hw.io.maxReset <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
          hw.io.meanReset <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
          maxOffsetReg <= UInt<1>("h00") @[IglooScheduler.scala 206:21]
          hw.io.accEn <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
          skip @[IglooScheduler.scala 195:66]
        skip @[IglooScheduler.scala 174:20]
      node _T_109 = eq(state, UInt<8>("h05")) @[IglooScheduler.scala 101:25]
      when _T_109 : @[IglooScheduler.scala 211:18]
        node _T_111 = add(memOffset, UInt<1>("h01")) @[IglooScheduler.scala 214:27]
        node _T_112 = tail(_T_111, 1) @[IglooScheduler.scala 214:27]
        memOffset <= _T_112 @[IglooScheduler.scala 214:16]
        hw.io.maxReset <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        hw.io.meanReset <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
        node _T_116 = add(maxOffsetReg, UInt<3>("h04")) @[IglooScheduler.scala 219:33]
        node _T_117 = tail(_T_116, 1) @[IglooScheduler.scala 219:33]
        maxOffsetReg <= _T_117 @[IglooScheduler.scala 219:19]
        node _T_119 = add(substate, UInt<1>("h01")) @[IglooScheduler.scala 105:30]
        node _T_120 = tail(_T_119, 1) @[IglooScheduler.scala 105:30]
        substate <= _T_120 @[IglooScheduler.scala 105:20]
        node _T_122 = sub(layerParams.io.currentAccWidth, UInt<1>("h01")) @[IglooScheduler.scala 221:54]
        node _T_123 = asUInt(_T_122) @[IglooScheduler.scala 221:54]
        node _T_124 = tail(_T_123, 1) @[IglooScheduler.scala 221:54]
        node _T_125 = eq(substate, _T_124) @[IglooScheduler.scala 221:20]
        when _T_125 : @[IglooScheduler.scala 221:59]
          when layerParams.io.lastLayer : @[IglooScheduler.scala 224:40]
            io.finished <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
            hw.io.maxEn <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
            state <= UInt<8>("h06") @[IglooScheduler.scala 103:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
            skip @[IglooScheduler.scala 224:40]
          node _T_131 = eq(layerParams.io.lastLayer, UInt<1>("h00")) @[IglooScheduler.scala 224:40]
          when _T_131 : @[IglooScheduler.scala 229:11]
            layerParams.io.shift <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
            hw.io.meanUpdate <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
            hw.io.inputBufferPush <= UInt<1>("h00") @[IglooScheduler.scala 108:22]
            hw.io.accReset <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
            hw.io.accEn <= UInt<1>("h01") @[IglooScheduler.scala 107:20]
            state <= UInt<8>("h04") @[IglooScheduler.scala 103:34]
            substate <= UInt<1>("h00") @[IglooScheduler.scala 103:50]
            skip @[IglooScheduler.scala 229:11]
          skip @[IglooScheduler.scala 221:59]
        skip @[IglooScheduler.scala 211:18]
      skip @[IglooScheduler.scala 126:15]
    
